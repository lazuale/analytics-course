"""
–°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ SQL-–∑–∞–ø—Ä–æ—Å–æ–≤
–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–æ –∏ –ø–æ—Å–ª–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–Ω–¥–µ–∫—Å–æ–≤ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π
"""

import sqlite3
import time
import pandas as pd
import matplotlib.pyplot as plt
from datetime import datetime
import os

class PerformanceBenchmark:
    """–ö–ª–∞—Å—Å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ SQL"""
    
    def __init__(self, db_path='ecommerce_performance.db'):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        
        Args:
            db_path (str): –ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö SQLite
        """
        self.db_path = db_path
        self.test_queries = []
        self.baseline_results = []
        self.optimized_results = []
        
    def add_test_query(self, name, query, description=""):
        """
        –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        
        Args:
            name (str): –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞
            query (str): SQL –∑–∞–ø—Ä–æ—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            description (str): –û–ø–∏—Å–∞–Ω–∏–µ —á—Ç–æ —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç –∑–∞–ø—Ä–æ—Å
        """
        self.test_queries.append({
            'name': name,
            'query': query,
            'description': description
        })
        
    def measure_query_performance(self, query, iterations=3):
        """
        –ò–∑–º–µ—Ä–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –æ–¥–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        
        Args:
            query (str): SQL –∑–∞–ø—Ä–æ—Å
            iterations (int): –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π –¥–ª—è —É—Å—Ä–µ–¥–Ω–µ–Ω–∏—è
            
        Returns:
            dict: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è
        """
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        times = []
        row_counts = []
        
        for i in range(iterations):
            start_time = time.time()
            cursor.execute(query)
            rows = cursor.fetchall()
            end_time = time.time()
            
            execution_time_ms = (end_time - start_time) * 1000
            times.append(execution_time_ms)
            row_counts.append(len(rows))
        
        conn.close()
        
        return {
            'avg_time_ms': sum(times) / len(times),
            'min_time_ms': min(times),
            'max_time_ms': max(times),
            'rows_returned': row_counts[0],  # –î–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤–æ
            'iterations': iterations
        }
    
    def get_query_plan(self, query):
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–ª–∞–Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞
        
        Args:
            query (str): SQL –∑–∞–ø—Ä–æ—Å
            
        Returns:
            list: –ü–ª–∞–Ω –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        """
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        cursor.execute(f"EXPLAIN QUERY PLAN {query}")
        plan = cursor.fetchall()
        
        conn.close()
        return plan
    
    def run_baseline_tests(self):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–∑–æ–≤–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–∑ –∏–Ω–¥–µ–∫—Å–æ–≤"""
        print("üöÄ –ó–∞–ø—É—Å–∫ –±–∞–∑–æ–≤–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–±–µ–∑ –∏–Ω–¥–µ–∫—Å–æ–≤)...")
        
        # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –∏–Ω–¥–µ–∫—Å—ã —É–¥–∞–ª–µ–Ω—ã
        self.remove_all_indexes()
        
        self.baseline_results = []
        
        for test in self.test_queries:
            print(f"   –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: {test['name']}")
            
            # –ò–∑–º–µ—Ä–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            performance = self.measure_query_performance(test['query'])
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–ª–∞–Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            plan = self.get_query_plan(test['query'])
            
            result = {
                'name': test['name'],
                'description': test['description'],
                'performance': performance,
                'query_plan': plan,
                'query': test['query']
            }
            
            self.baseline_results.append(result)
            
            print(f"      –í—Ä–µ–º—è: {performance['avg_time_ms']:.2f}ms, –°—Ç—Ä–æ–∫: {performance['rows_returned']}")
        
        print(f"‚úÖ –ë–∞–∑–æ–≤–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ ({len(self.baseline_results)} —Ç–µ—Å—Ç–æ–≤)")
    
    def apply_optimizations(self):
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π (—Å–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤)"""
        print("üîß –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π...")
        
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        # –ß—Ç–µ–Ω–∏–µ –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–¥–µ–∫—Å–æ–≤
        try:
            with open('index_creation_script.sql', 'r', encoding='utf-8') as f:
                index_script = f.read()
            
            # –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã (–ø—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è)
            commands = [cmd.strip() for cmd in index_script.split(';') if cmd.strip() and not cmd.strip().startswith('--')]
            
            created_indexes = 0
            for command in commands:
                if 'CREATE INDEX' in command.upper():
                    try:
                        cursor.execute(command)
                        created_indexes += 1
                    except sqlite3.Error as e:
                        print(f"      –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: {e}")
            
            conn.commit()
            print(f"   –°–æ–∑–¥–∞–Ω–æ –∏–Ω–¥–µ–∫—Å–æ–≤: {created_indexes}")
            
        except FileNotFoundError:
            print("   –§–∞–π–ª index_creation_script.sql –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ –∏–Ω–¥–µ–∫—Å—ã...")
            
            # –ë–∞–∑–æ–≤—ã–µ –∏–Ω–¥–µ–∫—Å—ã –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω
            basic_indexes = [
                "CREATE INDEX IF NOT EXISTS idx_customers_email ON customers(email)",
                "CREATE INDEX IF NOT EXISTS idx_orders_customer_id ON orders(customer_id)",
                "CREATE INDEX IF NOT EXISTS idx_orders_date ON orders(order_date)",
                "CREATE INDEX IF NOT EXISTS idx_order_items_order_id ON order_items(order_id)",
                "CREATE INDEX IF NOT EXISTS idx_order_items_product_id ON order_items(product_id)"
            ]
            
            for index_sql in basic_indexes:
                cursor.execute(index_sql)
            
            conn.commit()
            print(f"   –°–æ–∑–¥–∞–Ω–æ –±–∞–∑–æ–≤—ã—Ö –∏–Ω–¥–µ–∫—Å–æ–≤: {len(basic_indexes)}")
        
        conn.close()
        print("‚úÖ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã")
    
    def run_optimized_tests(self):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è–º–∏"""
        print("üöÄ –ó–∞–ø—É—Å–∫ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (—Å –∏–Ω–¥–µ–∫—Å–∞–º–∏)...")
        
        self.optimized_results = []
        
        for i, test in enumerate(self.test_queries):
            print(f"   –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: {test['name']}")
            
            # –ò–∑–º–µ—Ä–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            performance = self.measure_query_performance(test['query'])
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–ª–∞–Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            plan = self.get_query_plan(test['query'])
            
            result = {
                'name': test['name'],
                'description': test['description'],
                'performance': performance,
                'query_plan': plan,
                'query': test['query']
            }
            
            self.optimized_results.append(result)
            
            # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å baseline
            baseline_time = self.baseline_results[i]['performance']['avg_time_ms']
            improvement = ((baseline_time - performance['avg_time_ms']) / baseline_time) * 100
            
            print(f"      –í—Ä–µ–º—è: {performance['avg_time_ms']:.2f}ms, –£–ª—É—á—à–µ–Ω–∏–µ: {improvement:.1f}%")
        
        print(f"‚úÖ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ ({len(self.optimized_results)} —Ç–µ—Å—Ç–æ–≤)")
    
    def remove_all_indexes(self):
        """–£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∏–Ω–¥–µ–∫—Å–æ–≤"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –∏–Ω–¥–µ–∫—Å–æ–≤
        cursor.execute("""
            SELECT name FROM sqlite_master 
            WHERE type = 'index' 
            AND name NOT LIKE 'sqlite_autoindex%'
        """)
        
        indexes = cursor.fetchall()
        
        # –£–¥–∞–ª–µ–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞
        for (index_name,) in indexes:
            try:
                cursor.execute(f"DROP INDEX IF EXISTS {index_name}")
            except sqlite3.Error:
                pass
        
        conn.commit()
        conn.close()
        
        print(f"   –£–¥–∞–ª–µ–Ω–æ –∏–Ω–¥–µ–∫—Å–æ–≤: {len(indexes)}")
    
    def generate_comparison_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        if not self.baseline_results or not self.optimized_results:
            print("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞")
            return
        
        print("üìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è...")
        
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç—á–µ—Ç–∞
        comparison_data = []
        
        for i, test_name in enumerate([r['name'] for r in self.baseline_results]):
            baseline_time = self.baseline_results[i]['performance']['avg_time_ms']
            optimized_time = self.optimized_results[i]['performance']['avg_time_ms']
            improvement = ((baseline_time - optimized_time) / baseline_time) * 100
            speedup = baseline_time / optimized_time if optimized_time > 0 else float('inf')
            
            comparison_data.append({
                '–¢–µ—Å—Ç': test_name,
                '–í—Ä–µ–º—è –±–µ–∑ –∏–Ω–¥–µ–∫—Å–æ–≤ (–º—Å)': round(baseline_time, 2),
                '–í—Ä–µ–º—è —Å –∏–Ω–¥–µ–∫—Å–∞–º–∏ (–º—Å)': round(optimized_time, 2),
                '–£–ª—É—á—à–µ–Ω–∏–µ (%)': round(improvement, 1),
                '–£—Å–∫–æ—Ä–µ–Ω–∏–µ (—Ä–∞–∑)': round(speedup, 1),
                '–°—Ç—Ä–æ–∫': self.baseline_results[i]['performance']['rows_returned']
            })
        
        # –°–æ–∑–¥–∞–Ω–∏–µ DataFrame –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ CSV
        df = pd.DataFrame(comparison_data)
        df.to_csv('performance_comparison_results.csv', index=False, encoding='utf-8-sig')
        
        # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ –∫–æ–Ω—Å–æ–ª—å
        print("\n" + "="*80)
        print("üìà –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò")
        print("="*80)
        print(df.to_string(index=False))
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        avg_improvement = df['–£–ª—É—á—à–µ–Ω–∏–µ (%)'].mean()
        max_improvement = df['–£–ª—É—á—à–µ–Ω–∏–µ (%)'].max()
        avg_speedup = df['–£—Å–∫–æ—Ä–µ–Ω–∏–µ (—Ä–∞–∑)'].mean()
        
        print(f"\nüìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"   –°—Ä–µ–¥–Ω–µ–µ —É–ª—É—á—à–µ–Ω–∏–µ: {avg_improvement:.1f}%")
        print(f"   –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ: {max_improvement:.1f}%")
        print(f"   –°—Ä–µ–¥–Ω–µ–µ —É—Å–∫–æ—Ä–µ–Ω–∏–µ: {avg_speedup:.1f} —Ä–∞–∑")
        
        print(f"\nüìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: performance_comparison_results.csv")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
        self.create_performance_chart(df)
    
    def create_performance_chart(self, df):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        plt.figure(figsize=(12, 8))
        
        # –ì—Ä–∞—Ñ–∏–∫ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        plt.subplot(2, 1, 1)
        x = range(len(df))
        plt.bar([i-0.2 for i in x], df['–í—Ä–µ–º—è –±–µ–∑ –∏–Ω–¥–µ–∫—Å–æ–≤ (–º—Å)'], 0.4, label='–ë–µ–∑ –∏–Ω–¥–µ–∫—Å–æ–≤', color='red', alpha=0.7)
        plt.bar([i+0.2 for i in x], df['–í—Ä–µ–º—è —Å –∏–Ω–¥–µ–∫—Å–∞–º–∏ (–º—Å)'], 0.4, label='–° –∏–Ω–¥–µ–∫—Å–∞–º–∏', color='green', alpha=0.7)
        
        plt.xlabel('–¢–µ—Å—Ç—ã')
        plt.ylabel('–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (–º—Å)')
        plt.title('–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤')
        plt.xticks(x, df['–¢–µ—Å—Ç'], rotation=45, ha='right')
        plt.legend()
        plt.yscale('log')  # –õ–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–∞—è —à–∫–∞–ª–∞ –¥–ª—è –±–æ–ª—å—à–∏—Ö —Ä–∞–∑–ª–∏—á–∏–π
        
        # –ì—Ä–∞—Ñ–∏–∫ —É–ª—É—á—à–µ–Ω–∏–π
        plt.subplot(2, 1, 2)
        plt.bar(x, df['–£–ª—É—á—à–µ–Ω–∏–µ (%)'], color='blue', alpha=0.7)
        plt.xlabel('–¢–µ—Å—Ç—ã')
        plt.ylabel('–£–ª—É—á—à–µ–Ω–∏–µ (%)')
        plt.title('–ü—Ä–æ—Ü–µ–Ω—Ç —É–ª—É—á—à–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏')
        plt.xticks(x, df['–¢–µ—Å—Ç'], rotation=45, ha='right')
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π –Ω–∞ —Å—Ç–æ–ª–±—Ü—ã
        for i, v in enumerate(df['–£–ª—É—á—à–µ–Ω–∏–µ (%)']):
            plt.text(i, v + 1, f'{v:.1f}%', ha='center', va='bottom')
        
        plt.tight_layout()
        plt.savefig('performance_comparison_chart.png', dpi=300, bbox_inches='tight')
        print(f"üìä –ì—Ä–∞—Ñ–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: performance_comparison_chart.png")
    
    def run_full_benchmark(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        print("üéØ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
        print("="*60)
        
        start_time = datetime.now()
        
        # –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        self.run_baseline_tests()
        self.apply_optimizations()
        self.run_optimized_tests()
        self.generate_comparison_report()
        
        end_time = datetime.now()
        duration = (end_time - start_time).total_seconds()
        
        print(f"\nüèÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞ {duration:.1f} —Å–µ–∫—É–Ω–¥")
        print(f"üìÖ –í—Ä–µ–º—è: {end_time.strftime('%Y-%m-%d %H:%M:%S')}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ —Ç–µ—Å—Ç–µ—Ä–∞
    benchmark = PerformanceBenchmark()
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    benchmark.add_test_query(
        "–ü–æ–∏—Å–∫ –ø–æ email",
        "SELECT customer_id, customer_name FROM customers WHERE email = 'customer1@gmail.com'",
        "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–∞ –ø–æ —É–Ω–∏–∫–∞–ª—å–Ω–æ–º—É –∑–Ω–∞—á–µ–Ω–∏—é"
    )
    
    benchmark.add_test_query(
        "JOIN –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏ –∑–∞–∫–∞–∑–æ–≤",
        """SELECT c.customer_name, COUNT(o.order_id) as order_count
           FROM customers c
           LEFT JOIN orders o ON c.customer_id = o.customer_id
           GROUP BY c.customer_id, c.customer_name
           ORDER BY order_count DESC LIMIT 10""",
        "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ JOIN –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –∞–≥—Ä–µ–≥–∞—Ü–∏–µ–π"
    )
    
    benchmark.add_test_query(
        "–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –¥–∞—Ç–µ",
        "SELECT COUNT(*) FROM orders WHERE order_date >= '2024-01-01'",
        "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –¥–∞—Ç–µ"
    )
    
    benchmark.add_test_query(
        "–°–ª–æ–∂–Ω—ã–π –º–Ω–æ–≥–æ—Ç–∞–±–ª–∏—á–Ω—ã–π –∑–∞–ø—Ä–æ—Å",
        """SELECT c.customer_name, o.order_date, o.total_amount
           FROM customers c
           JOIN orders o ON c.customer_id = o.customer_id
           WHERE o.order_date >= '2024-01-01' AND c.country = 'Russia'
           ORDER BY o.order_date DESC LIMIT 20""",
        "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ª–æ–∂–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π"
    )
    
    # –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    benchmark.run_full_benchmark()

if __name__ == "__main__":
    main()