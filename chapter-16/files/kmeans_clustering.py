"""
üéØ K-means –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è - –≤–∞—à –ø–µ—Ä–≤—ã–π —à–∞–≥ –≤ –Ω–µ–∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ–º–æ–µ –æ–±—É—á–µ–Ω–∏–µ!

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç:
- –û—Å–Ω–æ–≤—ã –∞–ª–≥–æ—Ä–∏—Ç–º–∞ K-means
- –í—ã–±–æ—Ä –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤
- –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
- –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é –∫–ª–∞—Å—Ç–µ—Ä–æ–≤ –¥–ª—è –±–∏–∑–Ω–µ—Å–∞
- –°–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—é –∫–ª–∏–µ–Ω—Ç–æ–≤
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.cluster import KMeans
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import silhouette_score, calinski_harabasz_score, davies_bouldin_score
from sklearn.decomposition import PCA
import warnings

warnings.filterwarnings('ignore')

print("üéØ –ò–∑—É—á–∞–µ–º K-means –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—é!")
print("=" * 50)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
plt.rcParams['figure.figsize'] = (12, 8)
plt.rcParams['font.size'] = 10
sns.set_style("whitegrid")

def generate_sample_data():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–∏–º–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    np.random.seed(42)
    n_customers = 500
    
    # –°–æ–∑–¥–∞–µ–º 4 –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∫–ª–∞—Å—Ç–µ—Ä–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤
    clusters_data = []
    
    # –ö–ª–∞—Å—Ç–µ—Ä 1: –ú–æ–ª–æ–¥—ã–µ —Å –Ω–∏–∑–∫–∏–º –¥–æ—Ö–æ–¥–æ–º
    cluster1 = {
        'age': np.random.normal(25, 3, 125),
        'income': np.random.normal(40, 8, 125),
        'spending': np.random.normal(20, 5, 125)
    }
    clusters_data.append(cluster1)
    
    # –ö–ª–∞—Å—Ç–µ—Ä 2: –°—Ä–µ–¥–Ω–∏–π –≤–æ–∑—Ä–∞—Å—Ç, —Å—Ä–µ–¥–Ω–∏–π –¥–æ—Ö–æ–¥  
    cluster2 = {
        'age': np.random.normal(40, 5, 125),
        'income': np.random.normal(70, 10, 125), 
        'spending': np.random.normal(45, 8, 125)
    }
    clusters_data.append(cluster2)
    
    # –ö–ª–∞—Å—Ç–µ—Ä 3: –°—Ç–∞—Ä—à–µ, –≤—ã—Å–æ–∫–∏–π –¥–æ—Ö–æ–¥
    cluster3 = {
        'age': np.random.normal(55, 4, 125),
        'income': np.random.normal(100, 15, 125),
        'spending': np.random.normal(70, 10, 125)
    }
    clusters_data.append(cluster3)
    
    # –ö–ª–∞—Å—Ç–µ—Ä 4: –ú–æ–ª–æ–¥—ã–µ —Å –≤—ã—Å–æ–∫–∏–º –¥–æ—Ö–æ–¥–æ–º (IT)
    cluster4 = {
        'age': np.random.normal(30, 4, 125),
        'income': np.random.normal(120, 20, 125),
        'spending': np.random.normal(80, 12, 125)
    }
    clusters_data.append(cluster4)
    
    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –∫–ª–∞—Å—Ç–µ—Ä—ã
    age = np.concatenate([cluster['age'] for cluster in clusters_data])
    income = np.concatenate([cluster['income'] for cluster in clusters_data])
    spending = np.concatenate([cluster['spending'] for cluster in clusters_data])
    
    # –°–æ–∑–¥–∞–µ–º DataFrame
    data = pd.DataFrame({
        'age': np.clip(age, 18, 75),
        'income': np.clip(income, 20, 200),
        'spending': np.clip(spending, 5, 150),
        'true_cluster': np.repeat([0, 1, 2, 3], 125)  # –ò—Å—Ç–∏–Ω–Ω—ã–µ –∫–ª–∞—Å—Ç–µ—Ä—ã –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    })
    
    return data

def visualize_data(data, title="–ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"):
    """–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ 3D –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ"""
    fig = plt.figure(figsize=(15, 5))
    
    # 2D –ø—Ä–æ–µ–∫—Ü–∏–∏
    ax1 = plt.subplot(1, 3, 1)
    plt.scatter(data['age'], data['income'], alpha=0.6, c='blue')
    plt.xlabel('–í–æ–∑—Ä–∞—Å—Ç')
    plt.ylabel('–î–æ—Ö–æ–¥ (—Ç—ã—Å. —Ä—É–±.)')
    plt.title('–í–æ–∑—Ä–∞—Å—Ç vs –î–æ—Ö–æ–¥')
    plt.grid(alpha=0.3)
    
    ax2 = plt.subplot(1, 3, 2)
    plt.scatter(data['age'], data['spending'], alpha=0.6, c='green')
    plt.xlabel('–í–æ–∑—Ä–∞—Å—Ç')
    plt.ylabel('–¢—Ä–∞—Ç—ã (—Ç—ã—Å. —Ä—É–±.)')
    plt.title('–í–æ–∑—Ä–∞—Å—Ç vs –¢—Ä–∞—Ç—ã')
    plt.grid(alpha=0.3)
    
    ax3 = plt.subplot(1, 3, 3)
    plt.scatter(data['income'], data['spending'], alpha=0.6, c='red')
    plt.xlabel('–î–æ—Ö–æ–¥ (—Ç—ã—Å. —Ä—É–±.)')
    plt.ylabel('–¢—Ä–∞—Ç—ã (—Ç—ã—Å. —Ä—É–±.)')
    plt.title('–î–æ—Ö–æ–¥ vs –¢—Ä–∞—Ç—ã')
    plt.grid(alpha=0.3)
    
    plt.suptitle(title, fontsize=16)
    plt.tight_layout()
    plt.show()

def find_optimal_clusters(data, features, max_k=10):
    """–ù–∞—Ö–æ–¥–∏—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤"""
    print("\nüîç –ü–æ–∏—Å–∫ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤...")
    
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    X = data[features]
    scaler = StandardScaler()
    X_scaled = scaler.fit_transform(X)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤
    k_range = range(2, max_k + 1)
    inertias = []
    silhouette_scores = []
    calinski_scores = []
    davies_bouldin_scores = []
    
    for k in k_range:
        print(f"  –¢–µ—Å—Ç–∏—Ä—É–µ–º k={k}...")
        
        kmeans = KMeans(n_clusters=k, random_state=42, n_init=10)
        cluster_labels = kmeans.fit_predict(X_scaled)
        
        # –°–æ–±–∏—Ä–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
        inertias.append(kmeans.inertia_)
        silhouette_scores.append(silhouette_score(X_scaled, cluster_labels))
        calinski_scores.append(calinski_harabasz_score(X_scaled, cluster_labels))
        davies_bouldin_scores.append(davies_bouldin_score(X_scaled, cluster_labels))
    
    # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    fig, axes = plt.subplots(2, 2, figsize=(15, 10))
    fig.suptitle('üìä –í—ã–±–æ—Ä –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤', fontsize=16)
    
    # –ì—Ä–∞—Ñ–∏–∫ –ª–æ–∫—Ç—è
    axes[0, 0].plot(k_range, inertias, 'bo-', linewidth=2, markersize=8)
    axes[0, 0].set_title('üìà –ú–µ—Ç–æ–¥ –ª–æ–∫—Ç—è (—á–µ–º –º–µ–Ω—å—à–µ, —Ç–µ–º –ª—É—á—à–µ)')
    axes[0, 0].set_xlabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤ (k)')
    axes[0, 0].set_ylabel('Inertia (–≤–Ω—É—Ç—Ä–∏–∫–ª–∞—Å—Ç–µ—Ä–Ω–∞—è –¥–∏—Å–ø–µ—Ä—Å–∏—è)')
    axes[0, 0].grid(alpha=0.3)
    
    # –°–∏–ª—É—ç—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑
    axes[0, 1].plot(k_range, silhouette_scores, 'ro-', linewidth=2, markersize=8)
    axes[0, 1].set_title('üìä –°–∏–ª—É—ç—Ç–Ω—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç (—á–µ–º –±–æ–ª—å—à–µ, —Ç–µ–º –ª—É—á—à–µ)')
    axes[0, 1].set_xlabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤ (k)')
    axes[0, 1].set_ylabel('–°–∏–ª—É—ç—Ç–Ω—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç')
    axes[0, 1].grid(alpha=0.3)
    
    # Calinski-Harabasz –∏–Ω–¥–µ–∫—Å
    axes[1, 0].plot(k_range, calinski_scores, 'go-', linewidth=2, markersize=8)
    axes[1, 0].set_title('üéØ Calinski-Harabasz –∏–Ω–¥–µ–∫—Å (—á–µ–º –±–æ–ª—å—à–µ, —Ç–µ–º –ª—É—á—à–µ)')
    axes[1, 0].set_xlabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤ (k)')
    axes[1, 0].set_ylabel('Calinski-Harabasz –∏–Ω–¥–µ–∫—Å')
    axes[1, 0].grid(alpha=0.3)
    
    # Davies-Bouldin –∏–Ω–¥–µ–∫—Å
    axes[1, 1].plot(k_range, davies_bouldin_scores, 'mo-', linewidth=2, markersize=8)
    axes[1, 1].set_title('üìâ Davies-Bouldin –∏–Ω–¥–µ–∫—Å (—á–µ–º –º–µ–Ω—å—à–µ, —Ç–µ–º –ª—É—á—à–µ)')
    axes[1, 1].set_xlabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤ (k)')
    axes[1, 1].set_ylabel('Davies-Bouldin –∏–Ω–¥–µ–∫—Å')
    axes[1, 1].grid(alpha=0.3)
    
    plt.tight_layout()
    plt.show()
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ k
    best_k_silhouette = k_range[np.argmax(silhouette_scores)]
    best_k_calinski = k_range[np.argmax(calinski_scores)]
    best_k_davies = k_range[np.argmin(davies_bouldin_scores)]
    
    print(f"\nüìä –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∫–ª–∞—Å—Ç–µ—Ä–æ–≤:")
    print(f"  ‚Ä¢ –ü–æ —Å–∏–ª—É—ç—Ç–Ω–æ–º—É –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—É: k = {best_k_silhouette} (score = {max(silhouette_scores):.3f})")
    print(f"  ‚Ä¢ –ü–æ Calinski-Harabasz: k = {best_k_calinski} (score = {max(calinski_scores):.1f})")
    print(f"  ‚Ä¢ –ü–æ Davies-Bouldin: k = {best_k_davies} (score = {min(davies_bouldin_scores):.3f})")
    
    return X_scaled, scaler, best_k_silhouette

def perform_kmeans_clustering(data, X_scaled, n_clusters=4):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç K-means –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—é"""
    print(f"\nüéØ –í—ã–ø–æ–ª–Ω—è–µ–º K-means –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—é —Å k={n_clusters}...")
    
    # –û–±—É—á–∞–µ–º –º–æ–¥–µ–ª—å
    kmeans = KMeans(n_clusters=n_clusters, random_state=42, n_init=10)
    cluster_labels = kmeans.fit_predict(X_scaled)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∫–∏ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤ –∫ –¥–∞–Ω–Ω—ã–º
    data_with_clusters = data.copy()
    data_with_clusters['cluster'] = cluster_labels
    
    # –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞
    silhouette = silhouette_score(X_scaled, cluster_labels)
    calinski = calinski_harabasz_score(X_scaled, cluster_labels)
    davies_bouldin = davies_bouldin_score(X_scaled, cluster_labels)
    
    print(f"‚úÖ –ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print(f"üìä –ö–∞—á–µ—Å—Ç–≤–æ –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏:")
    print(f"  ‚Ä¢ –°–∏–ª—É—ç—Ç–Ω—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: {silhouette:.3f}")
    print(f"  ‚Ä¢ Calinski-Harabasz –∏–Ω–¥–µ–∫—Å: {calinski:.1f}")
    print(f"  ‚Ä¢ Davies-Bouldin –∏–Ω–¥–µ–∫—Å: {davies_bouldin:.3f}")
    print(f"  ‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Ç–µ—Ä–∞—Ü–∏–π: {kmeans.n_iter_}")
    
    return data_with_clusters, kmeans

def visualize_clusters(data_with_clusters, kmeans, X_scaled):
    """–í–∏–∑—É–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏"""
    print("\nüé® –í–∏–∑—É–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏...")
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º PCA –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –≤ 2D
    pca = PCA(n_components=2)
    X_pca = pca.fit_transform(X_scaled)
    
    # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—Ç—Ä–æ–∏–¥—ã –≤ PCA –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ
    centers_pca = pca.transform(kmeans.cluster_centers_)
    
    fig, axes = plt.subplots(2, 2, figsize=(15, 12))
    fig.suptitle('üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã K-means –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏', fontsize=16)
    
    # –ì—Ä–∞—Ñ–∏–∫ 1: PCA —Å –∫–ª–∞—Å—Ç–µ—Ä–∞–º–∏
    colors = plt.cm.Set1(np.linspace(0, 1, len(np.unique(data_with_clusters['cluster']))))
    
    for i, color in enumerate(colors):
        mask = data_with_clusters['cluster'] == i
        axes[0, 0].scatter(X_pca[mask, 0], X_pca[mask, 1], 
                          c=[color], label=f'–ö–ª–∞—Å—Ç–µ—Ä {i}', alpha=0.7, s=50)
    
    # –¶–µ–Ω—Ç—Ä–æ–∏–¥—ã
    axes[0, 0].scatter(centers_pca[:, 0], centers_pca[:, 1],
                      c='black', marker='x', s=300, linewidths=3, label='–¶–µ–Ω—Ç—Ä–æ–∏–¥—ã')
    
    axes[0, 0].set_title('üìä –ö–ª–∞—Å—Ç–µ—Ä—ã –≤ PCA –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ')
    axes[0, 0].set_xlabel(f'PC1 ({pca.explained_variance_ratio_[0]:.1%} –¥–∏—Å–ø–µ—Ä—Å–∏–∏)')
    axes[0, 0].set_ylabel(f'PC2 ({pca.explained_variance_ratio_[1]:.1%} –¥–∏—Å–ø–µ—Ä—Å–∏–∏)')
    axes[0, 0].legend()
    axes[0, 0].grid(alpha=0.3)
    
    # –ì—Ä–∞—Ñ–∏–∫ 2: –í–æ–∑—Ä–∞—Å—Ç vs –î–æ—Ö–æ–¥
    for i, color in enumerate(colors):
        mask = data_with_clusters['cluster'] == i
        axes[0, 1].scatter(data_with_clusters[mask]['age'], data_with_clusters[mask]['income'],
                          c=[color], label=f'–ö–ª–∞—Å—Ç–µ—Ä {i}', alpha=0.7)
    
    axes[0, 1].set_title('üë• –ö–ª–∞—Å—Ç–µ—Ä—ã: –í–æ–∑—Ä–∞—Å—Ç vs –î–æ—Ö–æ–¥')
    axes[0, 1].set_xlabel('–í–æ–∑—Ä–∞—Å—Ç')
    axes[0, 1].set_ylabel('–î–æ—Ö–æ–¥ (—Ç—ã—Å. —Ä—É–±.)')
    axes[0, 1].legend()
    axes[0, 1].grid(alpha=0.3)
    
    # –ì—Ä–∞—Ñ–∏–∫ 3: –î–æ—Ö–æ–¥ vs –¢—Ä–∞—Ç—ã
    for i, color in enumerate(colors):
        mask = data_with_clusters['cluster'] == i
        axes[1, 0].scatter(data_with_clusters[mask]['income'], data_with_clusters[mask]['spending'],
                          c=[color], label=f'–ö–ª–∞—Å—Ç–µ—Ä {i}', alpha=0.7)
    
    axes[1, 0].set_title('üí∞ –ö–ª–∞—Å—Ç–µ—Ä—ã: –î–æ—Ö–æ–¥ vs –¢—Ä–∞—Ç—ã')
    axes[1, 0].set_xlabel('–î–æ—Ö–æ–¥ (—Ç—ã—Å. —Ä—É–±.)')
    axes[1, 0].set_ylabel('–¢—Ä–∞—Ç—ã (—Ç—ã—Å. —Ä—É–±.)')
    axes[1, 0].legend()
    axes[1, 0].grid(alpha=0.3)
    
    # –ì—Ä–∞—Ñ–∏–∫ 4: –†–∞–∑–º–µ—Ä—ã –∫–ª–∞—Å—Ç–µ—Ä–æ–≤
    cluster_sizes = data_with_clusters['cluster'].value_counts().sort_index()
    bars = axes[1, 1].bar(range(len(cluster_sizes)), cluster_sizes.values,
                         color=colors[:len(cluster_sizes)], alpha=0.7)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ —Å—Ç–æ–ª–±—Ü—ã
    for bar, size in zip(bars, cluster_sizes.values):
        height = bar.get_height()
        axes[1, 1].text(bar.get_x() + bar.get_width()/2., height + 5,
                        f'{size}', ha='center', va='bottom', fontweight='bold')
    
    axes[1, 1].set_title('üìä –†–∞–∑–º–µ—Ä—ã –∫–ª–∞—Å—Ç–µ—Ä–æ–≤')
    axes[1, 1].set_xlabel('–ù–æ–º–µ—Ä –∫–ª–∞—Å—Ç–µ—Ä–∞')
    axes[1, 1].set_ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∏–µ–Ω—Ç–æ–≤')
    axes[1, 1].set_xticks(range(len(cluster_sizes)))
    axes[1, 1].grid(axis='y', alpha=0.3)
    
    plt.tight_layout()
    plt.show()

def analyze_clusters(data_with_clusters):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–æ—Ñ–∏–ª–∏ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤"""
    print("\nüìã –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ—Ñ–∏–ª–µ–π –∫–ª–∞—Å—Ç–µ—Ä–æ–≤:")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–∏–ª–∏ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤
    features = ['age', 'income', 'spending']
    cluster_profiles = []
    
    for cluster_id in sorted(data_with_clusters['cluster'].unique()):
        cluster_data = data_with_clusters[data_with_clusters['cluster'] == cluster_id]
        
        profile = {
            '–ö–ª–∞—Å—Ç–µ—Ä': cluster_id,
            '–†–∞–∑–º–µ—Ä': len(cluster_data),
            '–î–æ–ª—è (%)': f"{len(cluster_data) / len(data_with_clusters) * 100:.1f}%"
        }
        
        for feature in features:
            profile[f'–°—Ä–µ–¥–Ω–∏–π {feature}'] = cluster_data[feature].mean()
            profile[f'–°—Ç–¥ {feature}'] = cluster_data[feature].std()
        
        cluster_profiles.append(profile)
    
    profiles_df = pd.DataFrame(cluster_profiles)
    print(profiles_df.round(1))
    
    # –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –±–∏–∑–Ω–µ—Å-–Ω–∞–∑–≤–∞–Ω–∏—è –∫–ª–∞—Å—Ç–µ—Ä–∞–º
    print(f"\nüè∑Ô∏è –ë–∏–∑–Ω–µ—Å-–∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è –∫–ª–∞—Å—Ç–µ—Ä–æ–≤:")
    business_names = assign_business_names(profiles_df)
    
    for i, name in enumerate(business_names):
        size = profiles_df[profiles_df['–ö–ª–∞—Å—Ç–µ—Ä'] == i]['–†–∞–∑–º–µ—Ä'].iloc[0]
        percentage = profiles_df[profiles_df['–ö–ª–∞—Å—Ç–µ—Ä'] == i]['–î–æ–ª—è (%)'].iloc[0]
        print(f"  –ö–ª–∞—Å—Ç–µ—Ä {i}: '{name}' ({size} –∫–ª–∏–µ–Ω—Ç–æ–≤, {percentage})")
    
    return profiles_df, business_names

def assign_business_names(profiles_df):
    """–ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ—Ç –±–∏–∑–Ω–µ—Å-–Ω–∞–∑–≤–∞–Ω–∏—è –∫–ª–∞—Å—Ç–µ—Ä–∞–º –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫"""
    names = []
    
    for _, profile in profiles_df.iterrows():
        avg_age = profile['–°—Ä–µ–¥–Ω–∏–π age']
        avg_income = profile['–°—Ä–µ–¥–Ω–∏–π income'] 
        avg_spending = profile['–°—Ä–µ–¥–Ω–∏–π spending']
        
        # –õ–æ–≥–∏–∫–∞ –ø—Ä–∏—Å–≤–æ–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏–π
        if avg_income > 90 and avg_spending > 60:
            name = "üíé VIP –∫–ª–∏–µ–Ω—Ç—ã"
        elif avg_age < 35 and avg_income > 80:
            name = "üöÄ –ú–æ–ª–æ–¥—ã–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—ã"
        elif avg_age > 50 and avg_income > 70:
            name = "üèÜ –ó—Ä–µ–ª—ã–µ —Å–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω—ã–µ"
        elif avg_spending < 30:
            name = "üí∞ –≠–∫–æ–Ω–æ–º–Ω—ã–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª–∏"
        elif avg_age < 35:
            name = "üå± –ú–æ–ª–æ–¥—ã–µ –Ω–∞—á–∏–Ω–∞—é—â–∏–µ"
        else:
            name = "üë• –°—Ä–µ–¥–Ω–∏–π –∫–ª–∞—Å—Å"
        
        names.append(name)
    
    return names

def create_marketing_strategies(profiles_df, business_names):
    """–°–æ–∑–¥–∞–µ—Ç –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–µ–≥–º–µ–Ω—Ç–∞"""
    print(f"\nüéØ –ú–ê–†–ö–ï–¢–ò–ù–ì–û–í–´–ï –°–¢–†–ê–¢–ï–ì–ò–ò –ü–û –°–ï–ì–ú–ï–ù–¢–ê–ú:")
    print("=" * 60)
    
    strategies = {
        "üíé VIP –∫–ª–∏–µ–Ω—Ç—ã": {
            "strategy": "–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–∏—Å –∏ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è",
            "channels": "–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä, VIP-–º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è",
            "offers": "–ü—Ä–µ–º–∏—É–º —Ç–æ–≤–∞—Ä—ã, —ç–∫—Å–∫–ª—é–∑–∏–≤—ã, –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Å–∫–∏–¥–∫–∏",
            "expected_conversion": "15-20%"
        },
        "üöÄ –ú–æ–ª–æ–¥—ã–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—ã": {
            "strategy": "–£–¥–æ–±—Å—Ç–≤–æ –∏ –∏–Ω–Ω–æ–≤–∞—Ü–∏–∏",
            "channels": "–ú–æ–±–∏–ª—å–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏",
            "offers": "–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã, –ø–æ–¥–ø–∏—Å–∫–∏, –±—ã—Å—Ç—Ä–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞",
            "expected_conversion": "8-12%"
        },
        "üèÜ –ó—Ä–µ–ª—ã–µ —Å–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω—ã–µ": {
            "strategy": "–ö–∞—á–µ—Å—Ç–≤–æ –∏ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å",
            "channels": "Email, –∫–∞—Ç–∞–ª–æ–≥–∏, –ª–∏—á–Ω—ã–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏",
            "offers": "–ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã, –≥–∞—Ä–∞–Ω—Ç–∏–∏, —Å–µ–º–µ–π–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è",
            "expected_conversion": "10-15%"
        },
        "üí∞ –≠–∫–æ–Ω–æ–º–Ω—ã–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª–∏": {
            "strategy": "–ê–∫—Ü–∏–∏ –∏ –≤—ã–≥–æ–¥–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è",
            "channels": "SMS, –ø—Ä–æ–º–æ-—Ä–∞—Å—Å—ã–ª–∫–∏, —Å–æ—Ü—Å–µ—Ç–∏",
            "offers": "–°–∫–∏–¥–∫–∏, —Ä–∞—Å–ø—Ä–æ–¥–∞–∂–∏, –ø—Ä–æ–≥—Ä–∞–º–º—ã –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏",
            "expected_conversion": "5-8%"
        },
        "üå± –ú–æ–ª–æ–¥—ã–µ –Ω–∞—á–∏–Ω–∞—é—â–∏–µ": {
            "strategy": "–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∏ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ",
            "channels": "–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏, –±–ª–æ–≥–∏, –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä—ã",
            "offers": "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã, —Ä–∞—Å—Å—Ä–æ—á–∫–∞, –æ–±—É—á–∞—é—â–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç",
            "expected_conversion": "6-10%"
        },
        "üë• –°—Ä–µ–¥–Ω–∏–π –∫–ª–∞—Å—Å": {
            "strategy": "–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è",
            "channels": "Email, –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Ä–µ–∫–ª–∞–º–∞, –º–∞–≥–∞–∑–∏–Ω—ã",
            "offers": "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç, —É–º–µ—Ä–µ–Ω–Ω—ã–µ —Å–∫–∏–¥–∫–∏",
            "expected_conversion": "7-11%"
        }
    }
    
    for i, name in enumerate(business_names):
        if name in strategies:
            strategy = strategies[name]
            size = profiles_df[profiles_df['–ö–ª–∞—Å—Ç–µ—Ä'] == i]['–†–∞–∑–º–µ—Ä'].iloc[0]
            
            print(f"\n{name} ({size} –∫–ª–∏–µ–Ω—Ç–æ–≤):")
            print(f"  üìà –°—Ç—Ä–∞—Ç–µ–≥–∏—è: {strategy['strategy']}")
            print(f"  üì± –ö–∞–Ω–∞–ª—ã: {strategy['channels']}")
            print(f"  üéÅ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: {strategy['offers']}")
            print(f"  üìä –û–∂–∏–¥–∞–µ–º–∞—è –∫–æ–Ω–≤–µ—Ä—Å–∏—è: {strategy['expected_conversion']}")

def demonstrate_new_customer_prediction(kmeans, scaler):
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –∫–ª–∞—Å—Ç–µ—Ä–∞ –¥–ª—è –Ω–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤"""
    print(f"\nüîÆ –ü–†–ï–î–°–ö–ê–ó–ê–ù–ò–ï –°–ï–ì–ú–ï–ù–¢–ê –î–õ–Ø –ù–û–í–´–• –ö–õ–ò–ï–ù–¢–û–í:")
    print("=" * 55)
    
    # –ü—Ä–∏–º–µ—Ä—ã –Ω–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
    new_customers = pd.DataFrame({
        'age': [28, 45, 60, 35],
        'income': [85, 65, 120, 45],
        'spending': [50, 40, 90, 25]
    })
    
    print("–ù–æ–≤—ã–µ –∫–ª–∏–µ–Ω—Ç—ã –¥–ª—è —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏:")
    print(new_customers)
    
    # –ü—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞—Å—Ç–µ—Ä—ã
    new_customers_scaled = scaler.transform(new_customers[['age', 'income', 'spending']])
    predicted_clusters = kmeans.predict(new_customers_scaled)
    
    print(f"\n–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–µ —Å–µ–≥–º–µ–Ω—Ç—ã:")
    for i, cluster in enumerate(predicted_clusters):
        customer_info = new_customers.iloc[i]
        print(f"  –ö–ª–∏–µ–Ω—Ç {i+1} (–≤–æ–∑—Ä–∞—Å—Ç: {customer_info['age']}, "
              f"–¥–æ—Ö–æ–¥: {customer_info['income']}, —Ç—Ä–∞—Ç—ã: {customer_info['spending']}) "
              f"‚Üí –ö–ª–∞—Å—Ç–µ—Ä {cluster}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ K-means"""
    print("üöÄ –ó–∞–ø—É—Å–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ K-means –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏!")
    
    # 1. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
    data = generate_sample_data()
    print(f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(data)} –∑–∞–ø–∏—Å–µ–π –∫–ª–∏–µ–Ω—Ç–æ–≤")
    
    # 2. –í–∏–∑—É–∞–ª–∏–∑–∏—Ä—É–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    visualize_data(data, "üìä –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–æ–≤")
    
    # 3. –ù–∞—Ö–æ–¥–∏–º –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤
    features = ['age', 'income', 'spending']
    X_scaled, scaler, optimal_k = find_optimal_clusters(data, features)
    
    # 4. –í—ã–ø–æ–ª–Ω—è–µ–º –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—é
    data_with_clusters, kmeans = perform_kmeans_clustering(data, X_scaled, optimal_k)
    
    # 5. –í–∏–∑—É–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    visualize_clusters(data_with_clusters, kmeans, X_scaled)
    
    # 6. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ—Ñ–∏–ª–∏ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤
    profiles_df, business_names = analyze_clusters(data_with_clusters)
    
    # 7. –°–æ–∑–¥–∞–µ–º –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
    create_marketing_strategies(profiles_df, business_names)
    
    # 8. –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –¥–ª—è –Ω–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
    demonstrate_new_customer_prediction(kmeans, scaler)
    
    print(f"\nüéâ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è K-means –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print("üìö –°–ª–µ–¥—É—é—â–∏–π —à–∞–≥: –∏–∑—É—á–∏—Ç–µ hierarchical_clustering.py")
    print("üí° –°–æ–≤–µ—Ç: —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ —Å —Ä–∞–∑–Ω—ã–º–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞–º–∏ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤!")
    
    return data_with_clusters, kmeans, scaler

if __name__ == "__main__":
    results = main()