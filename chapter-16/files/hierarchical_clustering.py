"""
üå≥ –ò–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–∞—è –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è - —Å—Ç—Ä–æ–∏–º –¥–µ—Ä–µ–≤–æ –≥—Ä—É–ø–ø –¥–∞–Ω–Ω—ã—Ö!

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç:
- –ê–≥–ª–æ–º–µ—Ä–∞—Ç–∏–≤–Ω—É—é –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—é  
- –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∏ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é –¥–µ–Ω–¥—Ä–æ–≥—Ä–∞–º–º
- –†–∞–∑–ª–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –∫–ª–∞—Å—Ç–µ—Ä–æ–≤
- –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å K-means
- –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∫ —Ç–æ–≤–∞—Ä–Ω—ã–º –¥–∞–Ω–Ω—ã–º
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.cluster import AgglomerativeClustering, KMeans
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import silhouette_score, adjusted_rand_score
from scipy.cluster.hierarchy import dendrogram, linkage, fcluster
from scipy.spatial.distance import pdist
import warnings

warnings.filterwarnings('ignore')

print("üå≥ –ò–∑—É—á–∞–µ–º –∏–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫—É—é –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—é!")
print("=" * 55)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
plt.rcParams['figure.figsize'] = (12, 8)
plt.rcParams['font.size'] = 10
sns.set_style("whitegrid")

def generate_product_data():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∏–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–æ–π –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏"""
    np.random.seed(42)
    n_products = 100
    
    # –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø —Ç–æ–≤–∞—Ä–æ–≤
    product_groups = [
        {"name": "–ü—Ä–µ–º–∏—É–º —ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞", "size": 15, "price_mean": 50000, "rating_mean": 4.5, "reviews_mean": 200},
        {"name": "–ú–∞—Å—Å–æ–≤–∞—è —ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞", "size": 25, "price_mean": 15000, "rating_mean": 4.0, "reviews_mean": 150},
        {"name": "–î–æ—Ä–æ–≥–∞—è –æ–¥–µ–∂–¥–∞", "size": 10, "price_mean": 8000, "rating_mean": 4.2, "reviews_mean": 80},
        {"name": "–û–±—ã—á–Ω–∞—è –æ–¥–µ–∂–¥–∞", "size": 20, "price_mean": 2000, "rating_mean": 3.8, "reviews_mean": 60},
        {"name": "–°–ø–æ—Ä—Ç—Ç–æ–≤–∞—Ä—ã", "size": 15, "price_mean": 5000, "rating_mean": 4.1, "reviews_mean": 90},
        {"name": "–ö–Ω–∏–≥–∏", "size": 15, "price_mean": 800, "rating_mean": 4.3, "reviews_mean": 45}
    ]
    
    products_data = []
    product_id = 1
    
    for group in product_groups:
        for _ in range(group["size"]):
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Ç–æ–≤–∞—Ä–∞ —Å –≤–∞—Ä–∏–∞—Ü–∏–µ–π
            price = max(100, np.random.normal(group["price_mean"], group["price_mean"] * 0.3))
            rating = np.clip(np.random.normal(group["rating_mean"], 0.3), 1, 5)
            review_count = max(1, int(np.random.normal(group["reviews_mean"], 30)))
            
            # –ü—Ä–æ–¥–∞–∂–∏ –∑–∞–≤–∏—Å—è—Ç –æ—Ç —Ä–µ–π—Ç–∏–Ω–≥–∞ –∏ —Ü–µ–Ω—ã (–æ–±—Ä–∞—Ç–Ω–∞—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –æ—Ç —Ü–µ–Ω—ã)
            sales_base = (rating - 1) * 50 + (10000 / price) * 100
            sales_volume = max(1, int(np.random.normal(sales_base, 20)))
            
            # –ü—Ä–æ—Ü–µ–Ω—Ç –≤–æ–∑–≤—Ä–∞—Ç–æ–≤ –æ–±—Ä–∞—Ç–Ω–æ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ä–µ–π—Ç–∏–Ω–≥–∞
            return_rate = max(0, min(30, np.random.normal((5 - rating) * 5, 2)))
            
            # –ú–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Å–ª—É—á–∞–π–Ω–∞—è –Ω–æ —Å —Ç–µ–Ω–¥–µ–Ω—Ü–∏—è–º–∏ –ø–æ –≥—Ä—É–ø–ø–∞–º
            if "–ü—Ä–µ–º–∏—É–º" in group["name"]:
                profit_margin = np.random.normal(35, 8)
            elif "–ö–Ω–∏–≥–∏" in group["name"]:
                profit_margin = np.random.normal(50, 10)
            else:
                profit_margin = np.random.normal(25, 6)
            
            profit_margin = np.clip(profit_margin, 5, 70)
            
            # –ë—Ä–µ–Ω–¥ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –≥—Ä—É–ø–ø—ã
            if "—ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞" in group["name"]:
                brand = np.random.choice(['Apple', 'Samsung', 'Xiaomi', 'Sony', 'LG'])
            elif "–æ–¥–µ–∂–¥–∞" in group["name"]:
                brand = np.random.choice(['Nike', 'Adidas', 'Zara', 'H&M', 'Uniqlo'])
            elif "–°–ø–æ—Ä—Ç" in group["name"]:
                brand = np.random.choice(['Nike', 'Adidas', 'Puma', 'Reebok', 'Under Armour'])
            else:
                brand = np.random.choice(['NoName', 'Generic', 'Local', 'Import', 'Premium'])
            
            product = {
                'product_id': f'PROD_{product_id:05d}',
                'product_name': f'{group["name"]} —Ç–æ–≤–∞—Ä {product_id}',
                'category': group["name"],
                'price': round(price, 2),
                'rating': round(rating, 1),
                'review_count': review_count,
                'sales_volume': sales_volume,
                'return_rate': round(return_rate, 1),
                'brand': brand,
                'profit_margin': round(profit_margin, 1),
                'true_group': group["name"]  # –ò—Å—Ç–∏–Ω–Ω–∞—è –≥—Ä—É–ø–ø–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            }
            
            products_data.append(product)
            product_id += 1
    
    return pd.DataFrame(products_data)

def plot_dendrogram_comparison(data, features, methods=['ward', 'complete', 'average', 'single']):
    """–°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è —á–µ—Ä–µ–∑ –¥–µ–Ω–¥—Ä–æ–≥—Ä–∞–º–º—ã"""
    print("\nüå≥ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–µ—Ç–æ–¥–æ–≤ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –∫–ª–∞—Å—Ç–µ—Ä–æ–≤...")
    
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    X = data[features]
    scaler = StandardScaler()
    X_scaled = scaler.fit_transform(X)
    
    fig, axes = plt.subplots(2, 2, figsize=(20, 15))
    fig.suptitle('üå≥ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–µ—Ç–æ–¥–æ–≤ –∏–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–æ–π –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏', fontsize=16)
    
    axes = axes.ravel()
    
    for i, method in enumerate(methods):
        ax = axes[i]
        
        # –í—ã—á–∏—Å–ª—è–µ–º –º–∞—Ç—Ä–∏—Ü—É —Å–≤—è–∑–µ–π
        linkage_matrix = linkage(X_scaled, method=method)
        
        # –°—Ç—Ä–æ–∏–º –¥–µ–Ω–¥—Ä–æ–≥—Ä–∞–º–º—É
        dendrogram(linkage_matrix,
                  truncate_mode='lastp',  # –ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ p –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–π
                  p=30,                   # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏—Å—Ç—å–µ–≤
                  leaf_rotation=90,       # –ü–æ–≤–æ—Ä–æ—Ç –ø–æ–¥–ø–∏—Å–µ–π
                  leaf_font_size=8,
                  ax=ax)
        
        ax.set_title(f'–ú–µ—Ç–æ–¥: {method.upper()}', fontsize=14)
        ax.set_xlabel('–ù–æ–º–µ—Ä –∫–ª–∞—Å—Ç–µ—Ä–∞ –∏–ª–∏ —Ä–∞–∑–º–µ—Ä')
        ax.set_ylabel('–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è')
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—É—é –ª–∏–Ω–∏—é –¥–ª—è —Ä–∞–∑—Ä–µ–∑–∞ –Ω–∞ 5 –∫–ª–∞—Å—Ç–µ—Ä–æ–≤
        threshold = np.percentile(linkage_matrix[:, 2], 80)  # 80-–π –ø—Ä–æ—Ü–µ–Ω—Ç–∏–ª—å —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π
        ax.axhline(y=threshold, color='red', linestyle='--', alpha=0.7, 
                  label=f'–ü–æ—Ä–æ–≥ –¥–ª—è ~5 –∫–ª–∞—Å—Ç–µ—Ä–æ–≤')
        ax.legend()
    
    plt.tight_layout()
    plt.show()
    
    return linkage_matrix

def perform_hierarchical_clustering(data, features, n_clusters=5, linkage_method='ward'):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∏–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫—É—é –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—é"""
    print(f"\nüéØ –í—ã–ø–æ–ª–Ω—è–µ–º –∏–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫—É—é –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—é...")
    print(f"  ‚Ä¢ –ú–µ—Ç–æ–¥ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è: {linkage_method}")
    print(f"  ‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤: {n_clusters}")
    
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    X = data[features]
    scaler = StandardScaler()
    X_scaled = scaler.fit_transform(X)
    
    # –û–±—É—á–∞–µ–º –º–æ–¥–µ–ª—å
    hierarchical = AgglomerativeClustering(
        n_clusters=n_clusters,
        linkage=linkage_method
    )
    
    cluster_labels = hierarchical.fit_predict(X_scaled)
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫ –¥–∞–Ω–Ω—ã–º
    data_with_clusters = data.copy()
    data_with_clusters['cluster'] = cluster_labels
    
    # –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞
    silhouette = silhouette_score(X_scaled, cluster_labels)
    
    print(f"‚úÖ –ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print(f"üìä –°–∏–ª—É—ç—Ç–Ω—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: {silhouette:.3f}")
    
    return data_with_clusters, hierarchical, X_scaled

def compare_clustering_methods(data, features, n_clusters=5):
    """–°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –∏–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫—É—é –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—é –∏ K-means"""
    print(f"\n‚öîÔ∏è –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–µ—Ç–æ–¥–æ–≤ –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏...")
    
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    X = data[features]
    scaler = StandardScaler()
    X_scaled = scaler.fit_transform(X)
    
    # –ú–µ—Ç–æ–¥—ã –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    methods = {
        'K-means': KMeans(n_clusters=n_clusters, random_state=42),
        '–ò–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–∞—è (ward)': AgglomerativeClustering(n_clusters=n_clusters, linkage='ward'),
        '–ò–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–∞—è (complete)': AgglomerativeClustering(n_clusters=n_clusters, linkage='complete'),
        '–ò–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–∞—è (average)': AgglomerativeClustering(n_clusters=n_clusters, linkage='average')
    }
    
    results = {}
    
    for method_name, model in methods.items():
        cluster_labels = model.fit_predict(X_scaled)
        silhouette = silhouette_score(X_scaled, cluster_labels)
        
        # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å –∏—Å—Ç–∏–Ω–Ω—ã–º–∏ –≥—Ä—É–ø–ø–∞–º–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        if 'true_group' in data.columns:
            # –ö–æ–¥–∏—Ä—É–µ–º –∏—Å—Ç–∏–Ω–Ω—ã–µ –≥—Ä—É–ø–ø—ã –≤ —á–∏—Å–ª–∞ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            true_labels = pd.Categorical(data['true_group']).codes
            ari = adjusted_rand_score(true_labels, cluster_labels)
        else:
            ari = None
        
        results[method_name] = {
            'silhouette_score': silhouette,
            'adjusted_rand_index': ari,
            'cluster_labels': cluster_labels
        }
        
        print(f"  {method_name}:")
        print(f"    –°–∏–ª—É—ç—Ç–Ω—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: {silhouette:.3f}")
        if ari is not None:
            print(f"    Adjusted Rand Index: {ari:.3f}")
    
    # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    fig, axes = plt.subplots(2, 2, figsize=(15, 12))
    fig.suptitle('‚öîÔ∏è –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–µ—Ç–æ–¥–æ–≤ –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏', fontsize=16)
    
    axes = axes.ravel()
    colors = plt.cm.Set1(np.linspace(0, 1, n_clusters))
    
    for i, (method_name, result) in enumerate(results.items()):
        ax = axes[i]
        cluster_labels = result['cluster_labels']
        
        # –í–∏–∑—É–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ –¥–≤–∞ –ø—Ä–∏–∑–Ω–∞–∫–∞
        for cluster in range(n_clusters):
            mask = cluster_labels == cluster
            if np.any(mask):
                ax.scatter(X_scaled[mask, 0], X_scaled[mask, 1],
                          c=[colors[cluster]], label=f'–ö–ª–∞—Å—Ç–µ—Ä {cluster}',
                          alpha=0.7, s=50)
        
        ax.set_title(f'{method_name}\nSilhouette: {result["silhouette_score"]:.3f}')
        ax.set_xlabel(f'{features[0]} (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π)')
        ax.set_ylabel(f'{features[1]} (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π)')
        ax.legend()
        ax.grid(alpha=0.3)
    
    plt.tight_layout()
    plt.show()
    
    return results

def analyze_hierarchical_clusters(data_with_clusters, features):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–æ—Ñ–∏–ª–∏ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤ –∏–∑ –∏–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–æ–π –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏"""
    print("\nüìã –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ—Ñ–∏–ª–µ–π –∫–ª–∞—Å—Ç–µ—Ä–æ–≤:")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–∏–ª–∏ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤
    cluster_profiles = []
    
    for cluster_id in sorted(data_with_clusters['cluster'].unique()):
        cluster_data = data_with_clusters[data_with_clusters['cluster'] == cluster_id]
        
        profile = {
            '–ö–ª–∞—Å—Ç–µ—Ä': cluster_id,
            '–†–∞–∑–º–µ—Ä': len(cluster_data),
            '–î–æ–ª—è (%)': f"{len(cluster_data) / len(data_with_clusters) * 100:.1f}%"
        }
        
        # –°—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è —á–∏—Å–ª–æ–≤—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
        for feature in features:
            profile[f'–°—Ä–µ–¥–Ω–∏–π {feature}'] = cluster_data[feature].mean()
        
        # –°–∞–º—ã–µ —á–∞—Å—Ç—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        if 'brand' in cluster_data.columns:
            top_brand = cluster_data['brand'].mode()
            profile['–¢–æ–ø –±—Ä–µ–Ω–¥'] = top_brand[0] if len(top_brand) > 0 else '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'
        
        if 'true_group' in cluster_data.columns:
            top_group = cluster_data['true_group'].mode()
            profile['–û—Å–Ω–æ–≤–Ω–∞—è –≥—Ä—É–ø–ø–∞'] = top_group[0] if len(top_group) > 0 else '–°–º–µ—à–∞–Ω–Ω–∞—è'
        
        cluster_profiles.append(profile)
    
    profiles_df = pd.DataFrame(cluster_profiles)
    print(profiles_df.round(1))
    
    return profiles_df

def create_product_recommendations(data_with_clusters):
    """–°–æ–∑–¥–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤"""
    print(f"\nüõçÔ∏è –°–ò–°–¢–ï–ú–ê –¢–û–í–ê–†–ù–´–• –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ô:")
    print("=" * 50)
    
    recommendations = {}
    
    for cluster_id in sorted(data_with_clusters['cluster'].unique()):
        cluster_data = data_with_clusters[data_with_clusters['cluster'] == cluster_id]
        
        # –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∫–ª–∞—Å—Ç–µ—Ä–∞
        avg_price = cluster_data['price'].mean()
        avg_rating = cluster_data['rating'].mean()
        avg_sales = cluster_data['sales_volume'].mean()
        top_brands = cluster_data['brand'].value_counts().head(3)
        
        # –°—Ç—Ä–∞—Ç–µ–≥–∏—è –¥–ª—è –∫–ª–∞—Å—Ç–µ—Ä–∞
        if avg_price > 20000:
            strategy = "–ü—Ä–µ–º–∏—É–º —Å–µ–≥–º–µ–Ω—Ç - –∞–∫—Ü–µ–Ω—Ç –Ω–∞ –∫–∞—á–µ—Å—Ç–≤–æ –∏ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω–æ—Å—Ç—å"
        elif avg_rating > 4.2:
            strategy = "–í—ã—Å–æ–∫–∏–π —Ä–µ–π—Ç–∏–Ω–≥ - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞"
        elif avg_sales > 100:
            strategy = "–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã - –∞–∫—Ü–µ–Ω—Ç –Ω–∞ —Ç—Ä–µ–Ω–¥–æ–≤–æ—Å—Ç—å"
        else:
            strategy = "–ù–∏—à–µ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã - –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"
        
        recommendations[cluster_id] = {
            '—Ä–∞–∑–º–µ—Ä': len(cluster_data),
            '—Å—Ä–µ–¥–Ω—è—è_—Ü–µ–Ω–∞': avg_price,
            '—Å—Ä–µ–¥–Ω–∏–π_—Ä–µ–π—Ç–∏–Ω–≥': avg_rating,
            '—Ç–æ–ø_–±—Ä–µ–Ω–¥—ã': top_brands.to_dict(),
            '—Å—Ç—Ä–∞—Ç–µ–≥–∏—è': strategy,
            '—Ç–æ–≤–∞—Ä—ã': cluster_data[['product_name', 'price', 'rating']].head(3).to_dict('records')
        }
    
    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    for cluster_id, rec in recommendations.items():
        print(f"\nüéØ –ö–ª–∞—Å—Ç–µ—Ä {cluster_id} ({rec['—Ä–∞–∑–º–µ—Ä']} —Ç–æ–≤–∞—Ä–æ–≤):")
        print(f"  üí∞ –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: {rec['—Å—Ä–µ–¥–Ω—è—è_—Ü–µ–Ω–∞']:,.0f} —Ä—É–±.")
        print(f"  ‚≠ê –°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥: {rec['—Å—Ä–µ–¥–Ω–∏–π_—Ä–µ–π—Ç–∏–Ω–≥']:.1f}")
        print(f"  üèÜ –¢–æ–ø –±—Ä–µ–Ω–¥—ã: {', '.join(rec['—Ç–æ–ø_–±—Ä–µ–Ω–¥—ã'].keys())}")
        print(f"  üìà –°—Ç—Ä–∞—Ç–µ–≥–∏—è: {rec['—Å—Ç—Ä–∞—Ç–µ–≥–∏—è']}")
        print(f"  üõçÔ∏è –ü—Ä–∏–º–µ—Ä—ã —Ç–æ–≤–∞—Ä–æ–≤:")
        for product in rec['—Ç–æ–≤–∞—Ä—ã']:
            print(f"    ‚Ä¢ {product['product_name']} - {product['price']:,.0f} —Ä—É–±. (‚òÖ{product['rating']})")
    
    return recommendations

def demonstrate_dynamic_clustering(data, features):
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—ã–±–æ—Ä –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤ —á–µ—Ä–µ–∑ –¥–µ–Ω–¥—Ä–æ–≥—Ä–∞–º–º—É"""
    print(f"\nüîç –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤...")
    
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    X = data[features]
    scaler = StandardScaler()
    X_scaled = scaler.fit_transform(X)
    
    # –°—Ç—Ä–æ–∏–º –¥–µ–Ω–¥—Ä–æ–≥—Ä–∞–º–º—É —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –≤—ã–±–æ—Ä–∞ –ø–æ—Ä–æ–≥–∞
    linkage_matrix = linkage(X_scaled, method='ward')
    
    fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(18, 6))
    fig.suptitle('üîç –í—ã–±–æ—Ä –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤ —á–µ—Ä–µ–∑ –¥–µ–Ω–¥—Ä–æ–≥—Ä–∞–º–º—É', fontsize=14)
    
    # –ü–æ–ª–Ω–∞—è –¥–µ–Ω–¥—Ä–æ–≥—Ä–∞–º–º–∞
    dendrogram(linkage_matrix, ax=ax1, leaf_rotation=90, leaf_font_size=8)
    ax1.set_title('–ü–æ–ª–Ω–∞—è –¥–µ–Ω–¥—Ä–æ–≥—Ä–∞–º–º–∞')
    ax1.set_xlabel('–ù–æ–º–µ—Ä –æ–±—ä–µ–∫—Ç–∞')
    ax1.set_ylabel('–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è')
    
    # –û–±—Ä–µ–∑–∞–Ω–Ω–∞—è –¥–µ–Ω–¥—Ä–æ–≥—Ä–∞–º–º–∞
    dendrogram(linkage_matrix, truncate_mode='lastp', p=15, ax=ax2,
              leaf_rotation=90, leaf_font_size=10)
    ax2.set_title('–û–±—Ä–µ–∑–∞–Ω–Ω–∞—è –¥–µ–Ω–¥—Ä–æ–≥—Ä–∞–º–º–∞ (15 –ª–∏—Å—Ç—å–µ–≤)')
    ax2.set_xlabel('–ö–ª–∞—Å—Ç–µ—Ä')
    ax2.set_ylabel('–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è')
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ª–∏–Ω–∏–∏ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∫–æ–ª–∏—á–µ—Å—Ç–≤ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤
    distances = linkage_matrix[:, 2]
    for n_clusters, color in [(3, 'red'), (5, 'blue'), (7, 'green')]:
        threshold = distances[-(n_clusters-1)]
        ax2.axhline(y=threshold, color=color, linestyle='--', alpha=0.7,
                   label=f'{n_clusters} –∫–ª–∞—Å—Ç–µ—Ä–æ–≤')
    
    ax2.legend()
    plt.tight_layout()
    plt.show()
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –¥–ª—è —Ä–∞–∑–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤
    print(f"\nüìä –ö–∞—á–µ—Å—Ç–≤–æ –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è —Ä–∞–∑–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≥—Ä—É–ø–ø:")
    
    cluster_range = range(2, 8)
    silhouette_scores = []
    
    for n_clusters in cluster_range:
        hierarchical = AgglomerativeClustering(n_clusters=n_clusters, linkage='ward')
        cluster_labels = hierarchical.fit_predict(X_scaled)
        silhouette = silhouette_score(X_scaled, cluster_labels)
        silhouette_scores.append(silhouette)
        
        print(f"  {n_clusters} –∫–ª–∞—Å—Ç–µ—Ä–æ–≤: —Å–∏–ª—É—ç—Ç–Ω—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç = {silhouette:.3f}")
    
    # –ì—Ä–∞—Ñ–∏–∫ –∫–∞—á–µ—Å—Ç–≤–∞
    plt.figure(figsize=(10, 6))
    plt.plot(cluster_range, silhouette_scores, 'bo-', linewidth=2, markersize=8)
    plt.title('üìä –ö–∞—á–µ—Å—Ç–≤–æ –∏–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–æ–π –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏')
    plt.xlabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤')
    plt.ylabel('–°–∏–ª—É—ç—Ç–Ω—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç')
    plt.grid(alpha=0.3)
    plt.show()
    
    optimal_k = cluster_range[np.argmax(silhouette_scores)]
    print(f"üéØ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤: {optimal_k}")
    
    return optimal_k

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∏–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–æ–π –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏"""
    print("üöÄ –ó–∞–ø—É—Å–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∏–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–æ–π –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏!")
    
    # 1. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–æ–≤
    data = generate_product_data()
    features = ['price', 'rating', 'review_count', 'sales_volume', 'return_rate', 'profit_margin']
    
    print(f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(data)} —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
    print(f"üìä –ü—Ä–∏–∑–Ω–∞–∫–∏ –¥–ª—è –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏: {', '.join(features)}")
    
    # 2. –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è
    linkage_matrix = plot_dendrogram_comparison(data, features)
    
    # 3. –í—ã–ø–æ–ª–Ω—è–µ–º –∏–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫—É—é –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—é
    data_with_clusters, model, X_scaled = perform_hierarchical_clustering(data, features)
    
    # 4. –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å –¥—Ä—É–≥–∏–º–∏ –º–µ—Ç–æ–¥–∞–º–∏
    comparison_results = compare_clustering_methods(data, features)
    
    # 5. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ—Ñ–∏–ª–∏ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤
    profiles_df = analyze_hierarchical_clusters(data_with_clusters, features)
    
    # 6. –°–æ–∑–¥–∞–µ–º —Ç–æ–≤–∞—Ä–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    recommendations = create_product_recommendations(data_with_clusters)
    
    # 7. –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤
    optimal_k = demonstrate_dynamic_clustering(data, features)
    
    print(f"\nüéâ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∏–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–æ–π –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print("üìö –°–ª–µ–¥—É—é—â–∏–π —à–∞–≥: –∏–∑—É—á–∏—Ç–µ clustering_evaluation.py")
    print("üí° –°–æ–≤–µ—Ç: –∏–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–∞—è –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è –ª—É—á—à–µ –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö!")
    
    return data_with_clusters, recommendations, comparison_results

if __name__ == "__main__":
    results = main()