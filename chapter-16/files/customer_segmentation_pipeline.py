"""
üéõÔ∏è Production-ready —Å–∏—Å—Ç–µ–º–∞ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç:
- –ö–ª–∞—Å—Å CustomerSegmentation –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏
- –ü–æ–ª–Ω—ã–π –ø–∞–π–ø–ª–∞–π–Ω –æ—Ç —Å—ã—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–æ –±–∏–∑–Ω–µ—Å-—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
- –ú–µ—Ç–æ–¥—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–µ–π
- –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–∞—á–µ—Å—Ç–≤–∞ –∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –¥—Ä–∏—Ñ—Ç–∞
- –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π dashboard —Å –ø—Ä–æ—Ñ–∏–ª—è–º–∏ —Å–µ–≥–º–µ–Ω—Ç–æ–≤
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.cluster import KMeans
from sklearn.preprocessing import StandardScaler, LabelEncoder
from sklearn.metrics import silhouette_score, calinski_harabasz_score
from sklearn.decomposition import PCA
from datetime import datetime, timedelta
import joblib
import warnings
import json

warnings.filterwarnings('ignore')

class CustomerSegmentation:
    """
    Production-ready —Å–∏—Å—Ç–µ–º–∞ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤
    
    –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    -------------
    segmenter = CustomerSegmentation()
    segmenter.fit(customer_data, features=['age', 'income', 'spending'])
    new_segments = segmenter.predict(new_customer_data)
    profiles = segmenter.get_segment_profiles()
    """
    
    def __init__(self, n_clusters='auto', algorithm='kmeans', random_state=42):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏
        
        Parameters:
        -----------
        n_clusters : int –∏–ª–∏ 'auto'
            –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤. –ï—Å–ª–∏ 'auto', –≤—ã–±–∏—Ä–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        algorithm : str
            –ê–ª–≥–æ—Ä–∏—Ç–º –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏ ('kmeans', 'hierarchical')
        random_state : int
            –§–∏–∫—Å–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ—Å—Ç–∏ –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º–æ—Å—Ç–∏
        """
        self.n_clusters = n_clusters
        self.algorithm = algorithm
        self.random_state = random_state
        
        # –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –æ–±—ä–µ–∫—Ç—ã
        self.model = None
        self.scaler = None
        self.feature_names = None
        self.segment_profiles = None
        self.quality_metrics = {}
        self.business_names = {}
        self.fitted = False
        
        print(f"üéØ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏")
        print(f"  ‚Ä¢ –ê–ª–≥–æ—Ä–∏—Ç–º: {algorithm}")
        print(f"  ‚Ä¢ –ö–ª–∞—Å—Ç–µ—Ä–æ–≤: {n_clusters}")
    
    def _prepare_features(self, data, features=None):
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏"""
        if features is None:
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä —á–∏—Å–ª–æ–≤—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
            numeric_features = data.select_dtypes(include=[np.number]).columns.tolist()
            # –ò—Å–∫–ª—é—á–∞–µ–º ID –∏ –¥–∞—Ç—ã
            features = [f for f in numeric_features if not any(x in f.lower() for x in ['id', 'date'])]
        
        self.feature_names = features
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏
        X = data[features].copy()
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–ø—É—Å–∫–æ–≤
        X = X.fillna(X.median())
        
        return X
    
    def _find_optimal_clusters(self, X_scaled, max_k=10):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤"""
        print("üîç –ü–æ–∏—Å–∫ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤...")
        
        k_range = range(2, min(max_k + 1, len(X_scaled) // 2))
        silhouette_scores = []
        calinski_scores = []
        inertias = []
        
        for k in k_range:
            kmeans = KMeans(n_clusters=k, random_state=self.random_state, n_init=10)
            labels = kmeans.fit_predict(X_scaled)
            
            silhouette_scores.append(silhouette_score(X_scaled, labels))
            calinski_scores.append(calinski_harabasz_score(X_scaled, labels))
            inertias.append(kmeans.inertia_)
        
        # –í—ã–±–∏—Ä–∞–µ–º k –ø–æ —Å–∏–ª—É—ç—Ç–Ω–æ–º—É –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—É
        optimal_k = k_range[np.argmax(silhouette_scores)]
        best_silhouette = max(silhouette_scores)
        
        print(f"  ‚úÖ –û–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤: {optimal_k}")
        print(f"  üìä –°–∏–ª—É—ç—Ç–Ω—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: {best_silhouette:.3f}")
        
        return optimal_k
    
    def _create_rfm_features(self, data):
        """–°–æ–∑–¥–∞–Ω–∏–µ RFM –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –µ—Å–ª–∏ –µ—Å—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ"""
        rfm_features = {}
        
        # Recency - –¥–Ω–∏ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø–æ–∫—É–ø–∫–∏
        if 'last_purchase_date' in data.columns:
            try:
                last_purchase = pd.to_datetime(data['last_purchase_date'])
                rfm_features['recency'] = (datetime.now() - last_purchase).dt.days
            except:
                if 'days_since_last_purchase' in data.columns:
                    rfm_features['recency'] = data['days_since_last_purchase']
        
        # Frequency - —á–∞—Å—Ç–æ—Ç–∞ –ø–æ–∫—É–ø–æ–∫
        if 'total_purchases' in data.columns:
            rfm_features['frequency'] = data['total_purchases']
        
        # Monetary - —Å—É–º–º–∞ –ø–æ–∫—É–ø–æ–∫
        if 'total_spent' in data.columns:
            rfm_features['monetary'] = data['total_spent']
        elif 'avg_order_value' in data.columns and 'total_purchases' in data.columns:
            rfm_features['monetary'] = data['avg_order_value'] * data['total_purchases']
        
        if rfm_features:
            print(f"  ‚úÖ –°–æ–∑–¥–∞–Ω—ã RFM –ø—Ä–∏–∑–Ω–∞–∫–∏: {list(rfm_features.keys())}")
            
        return pd.DataFrame(rfm_features)
    
    def fit(self, data, features=None, create_rfm=True):
        """
        –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏
        
        Parameters:
        -----------
        data : DataFrame
            –î–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–æ–≤
        features : list, optional
            –°–ø–∏—Å–æ–∫ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏
        create_rfm : bool
            –°–æ–∑–¥–∞–≤–∞—Ç—å –ª–∏ RFM –ø—Ä–∏–∑–Ω–∞–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        """
        print(f"\nüéØ –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ –Ω–∞ {len(data)} –∫–ª–∏–µ–Ω—Ç–∞—Ö...")
        
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
        X = self._prepare_features(data, features)
        
        # –î–æ–±–∞–≤–ª—è–µ–º RFM –ø—Ä–∏–∑–Ω–∞–∫–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if create_rfm:
            rfm_features = self._create_rfm_features(data)
            if not rfm_features.empty:
                X = pd.concat([X, rfm_features], axis=1)
                self.feature_names.extend(rfm_features.columns.tolist())
        
        print(f"  üìä –ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏: {self.feature_names}")
        print(f"  üìè –†–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö: {X.shape}")
        
        # –°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∞—Ü–∏—è
        self.scaler = StandardScaler()
        X_scaled = self.scaler.fit_transform(X)
        
        # –í—ã–±–æ—Ä –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤
        if self.n_clusters == 'auto':
            self.n_clusters = self._find_optimal_clusters(X_scaled)
        
        # –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏
        if self.algorithm == 'kmeans':
            self.model = KMeans(
                n_clusters=self.n_clusters, 
                random_state=self.random_state,
                n_init=10
            )
        else:
            from sklearn.cluster import AgglomerativeClustering
            self.model = AgglomerativeClustering(n_clusters=self.n_clusters)
        
        # –ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è
        cluster_labels = self.model.fit_predict(X_scaled)
        
        # –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞
        self.quality_metrics = {
            'silhouette_score': silhouette_score(X_scaled, cluster_labels),
            'calinski_harabasz': calinski_harabasz_score(X_scaled, cluster_labels),
            'n_clusters': self.n_clusters,
            'n_features': len(self.feature_names),
            'n_samples': len(data)
        }
        
        print(f"  ‚úÖ –ú–æ–¥–µ–ª—å –æ–±—É—á–µ–Ω–∞!")
        print(f"  üìä –ö–∞—á–µ—Å—Ç–≤–æ (—Å–∏–ª—É—ç—Ç): {self.quality_metrics['silhouette_score']:.3f}")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª–µ–π —Å–µ–≥–º–µ–Ω—Ç–æ–≤
        data_with_segments = data.copy()
        data_with_segments['segment'] = cluster_labels
        self._create_segment_profiles(data_with_segments, X)
        self._assign_business_names()
        
        self.fitted = True
        return self
    
    def _create_segment_profiles(self, data_with_segments, X):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª–µ–π —Å–µ–≥–º–µ–Ω—Ç–æ–≤"""
        print("  üìã –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª–µ–π —Å–µ–≥–º–µ–Ω—Ç–æ–≤...")
        
        profiles = []
        
        for segment_id in sorted(data_with_segments['segment'].unique()):
            segment_data = data_with_segments[data_with_segments['segment'] == segment_id]
            X_segment = X[data_with_segments['segment'] == segment_id]
            
            profile = {
                'segment_id': segment_id,
                'size': len(segment_data),
                'percentage': len(segment_data) / len(data_with_segments) * 100
            }
            
            # –°—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
            for i, feature in enumerate(self.feature_names):
                profile[f'avg_{feature}'] = X_segment.iloc[:, i].mean()
                profile[f'std_{feature}'] = X_segment.iloc[:, i].std()
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            if 'age' in data_with_segments.columns:
                profile['avg_age'] = segment_data['age'].mean()
                profile['age_range'] = f"{segment_data['age'].min()}-{segment_data['age'].max()}"
            
            if 'gender' in data_with_segments.columns:
                gender_dist = segment_data['gender'].value_counts(normalize=True)
                profile['gender_distribution'] = gender_dist.to_dict()
            
            if 'city' in data_with_segments.columns:
                top_city = segment_data['city'].mode()
                profile['top_city'] = top_city[0] if len(top_city) > 0 else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
            
            profiles.append(profile)
        
        self.segment_profiles = pd.DataFrame(profiles)
        print(f"    ‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(profiles)} –ø—Ä–æ—Ñ–∏–ª–µ–π —Å–µ–≥–º–µ–Ω—Ç–æ–≤")
    
    def _assign_business_names(self):
        """–ü—Ä–∏—Å–≤–æ–µ–Ω–∏–µ –±–∏–∑–Ω–µ—Å-–Ω–∞–∑–≤–∞–Ω–∏–π —Å–µ–≥–º–µ–Ω—Ç–∞–º"""
        names = {}
        
        for _, profile in self.segment_profiles.iterrows():
            segment_id = profile['segment_id']
            
            # –õ–æ–≥–∏–∫–∞ –ø—Ä–∏—Å–≤–æ–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
            if 'avg_monetary' in profile and 'avg_frequency' in profile:
                monetary = profile.get('avg_monetary', 0)
                frequency = profile.get('avg_frequency', 0)
                recency = profile.get('avg_recency', 180)
                
                # RFM —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è
                if monetary > 50000 and frequency > 15 and recency < 30:
                    name = "üíé –ß–µ–º–ø–∏–æ–Ω—ã"
                elif monetary > 30000 and frequency > 10:
                    name = "üèÜ –õ–æ—è–ª—å–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã"
                elif recency < 60 and frequency > 5:
                    name = "üöÄ –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –ª–æ—è–ª—å–Ω—ã–µ"
                elif recency < 30:
                    name = "üå± –ù–æ–≤—ã–µ –∫–ª–∏–µ–Ω—Ç—ã"
                elif recency > 180:
                    name = "üò¥ –°–ø—è—â–∏–µ"
                else:
                    name = "üë• –û–±—ã—á–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã"
                    
            elif 'avg_age' in profile:
                age = profile['avg_age']
                if age < 30:
                    name = "üåü –ú–æ–ª–æ–¥–µ–∂—å"
                elif age > 50:
                    name = "üéØ –ó—Ä–µ–ª—ã–µ –∫–ª–∏–µ–Ω—Ç—ã"
                else:
                    name = "üíº –°—Ä–µ–¥–Ω–∏–π –≤–æ–∑—Ä–∞—Å—Ç"
            else:
                name = f"üìä –°–µ–≥–º–µ–Ω—Ç {segment_id}"
            
            names[segment_id] = name
        
        self.business_names = names
        print(f"  üè∑Ô∏è –ü—Ä–∏—Å–≤–æ–µ–Ω—ã –±–∏–∑–Ω–µ—Å-–Ω–∞–∑–≤–∞–Ω–∏—è —Å–µ–≥–º–µ–Ω—Ç–∞–º")
    
    def predict(self, new_data):
        """
        –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —Å–µ–≥–º–µ–Ω—Ç–æ–≤ –¥–ª—è –Ω–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
        
        Parameters:
        -----------
        new_data : DataFrame
            –ù–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–æ–≤
            
        Returns:
        --------
        segments : array
            –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–µ —Å–µ–≥–º–µ–Ω—Ç—ã
        """
        if not self.fitted:
            raise ValueError("–°–Ω–∞—á–∞–ª–∞ –æ–±—É—á–∏—Ç–µ –º–æ–¥–µ–ª—å —Å –ø–æ–º–æ—â—å—é fit()")
        
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
        X_new = new_data[self.feature_names]
        X_new = X_new.fillna(X_new.median())
        
        # –°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∞—Ü–∏—è
        X_new_scaled = self.scaler.transform(X_new)
        
        # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
        segments = self.model.predict(X_new_scaled)
        
        return segments
    
    def get_segment_profiles(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª–µ–π —Å–µ–≥–º–µ–Ω—Ç–æ–≤"""
        if not self.fitted:
            raise ValueError("–°–Ω–∞—á–∞–ª–∞ –æ–±—É—á–∏—Ç–µ –º–æ–¥–µ–ª—å —Å –ø–æ–º–æ—â—å—é fit()")
        
        profiles_with_names = self.segment_profiles.copy()
        profiles_with_names['business_name'] = profiles_with_names['segment_id'].map(self.business_names)
        
        return profiles_with_names
    
    def visualize_segments(self, data=None, save_path=None):
        """–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ–≥–º–µ–Ω—Ç–æ–≤"""
        if not self.fitted:
            raise ValueError("–°–Ω–∞—á–∞–ª–∞ –æ–±—É—á–∏—Ç–µ –º–æ–¥–µ–ª—å —Å –ø–æ–º–æ—â—å—é fit()")
        
        print("üé® –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ–≥–º–µ–Ω—Ç–æ–≤...")
        
        if data is not None:
            # –ü—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞–µ–º —Å–µ–≥–º–µ–Ω—Ç—ã –¥–ª—è –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            X = self._prepare_features(data, self.feature_names)
            X_scaled = self.scaler.transform(X.fillna(X.median()))
            segments = self.model.predict(X_scaled)
        else:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –æ–±—É—á–µ–Ω–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å)
            print("  ‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã, —Å–æ–∑–¥–∞–µ–º –ø—Ä–∏–º–µ—Ä–Ω—É—é –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é")
            return
        
        # –°–æ–∑–¥–∞–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é
        if len(self.feature_names) > 2:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º PCA –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç–∏
            pca = PCA(n_components=2)
            X_pca = pca.fit_transform(X_scaled)
            
            plt.figure(figsize=(15, 10))
            
            # –ì—Ä–∞—Ñ–∏–∫ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤ –≤ PCA –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ
            plt.subplot(2, 2, 1)
            colors = plt.cm.Set1(np.linspace(0, 1, self.n_clusters))
            
            for i in range(self.n_clusters):
                mask = segments == i
                plt.scatter(X_pca[mask, 0], X_pca[mask, 1], 
                           c=[colors[i]], label=self.business_names.get(i, f'–°–µ–≥–º–µ–Ω—Ç {i}'),
                           alpha=0.7, s=50)
            
            plt.title('üéØ –°–µ–≥–º–µ–Ω—Ç—ã –≤ PCA –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ')
            plt.xlabel(f'PC1 ({pca.explained_variance_ratio_[0]:.1%})')
            plt.ylabel(f'PC2 ({pca.explained_variance_ratio_[1]:.1%})')
            plt.legend()
            plt.grid(alpha=0.3)
            
            # –†–∞–∑–º–µ—Ä—ã —Å–µ–≥–º–µ–Ω—Ç–æ–≤
            plt.subplot(2, 2, 2)
            segment_sizes = pd.Series(segments).value_counts().sort_index()
            bars = plt.bar(range(len(segment_sizes)), segment_sizes.values, color=colors)
            
            for bar, size in zip(bars, segment_sizes.values):
                plt.text(bar.get_x() + bar.get_width()/2, bar.get_height() + 5,
                        f'{size}', ha='center', va='bottom', fontweight='bold')
            
            plt.title('üìä –†–∞–∑–º–µ—Ä—ã —Å–µ–≥–º–µ–Ω—Ç–æ–≤')
            plt.xlabel('–°–µ–≥–º–µ–Ω—Ç')
            plt.ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∏–µ–Ω—Ç–æ–≤')
            plt.xticks(range(len(segment_sizes)), 
                      [self.business_names.get(i, f'–°–µ–≥–º–µ–Ω—Ç {i}') for i in segment_sizes.index],
                      rotation=45)
            
            # –ü—Ä–æ—Ñ–∏–ª–∏ —Å–µ–≥–º–µ–Ω—Ç–æ–≤ (—Ä–∞–¥–∞—Ä–Ω–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞)
            plt.subplot(2, 2, (3, 4))
            self._plot_radar_chart(plt.gca())
            
            plt.suptitle('üìä –ê–Ω–∞–ª–∏–∑ –∫–ª–∏–µ–Ω—Ç—Å–∫–∏—Ö —Å–µ–≥–º–µ–Ω—Ç–æ–≤', fontsize=16)
            plt.tight_layout()
            
            if save_path:
                plt.savefig(save_path, dpi=300, bbox_inches='tight')
                print(f"  ‚úÖ –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {save_path}")
            
            plt.show()
    
    def _plot_radar_chart(self, ax):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–¥–∞—Ä–Ω–æ–π –¥–∏–∞–≥—Ä–∞–º–º—ã –ø—Ä–æ—Ñ–∏–ª–µ–π —Å–µ–≥–º–µ–Ω—Ç–æ–≤"""
        # –í—ã–±–∏—Ä–∞–µ–º —Ç–æ–ø-5 –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è —Ä–∞–¥–∞—Ä–Ω–æ–π –¥–∏–∞–≥—Ä–∞–º–º—ã
        feature_cols = [col for col in self.segment_profiles.columns if col.startswith('avg_')][:5]
        
        if len(feature_cols) < 3:
            ax.text(0.5, 0.5, '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤\n–¥–ª—è —Ä–∞–¥–∞—Ä–Ω–æ–π –¥–∏–∞–≥—Ä–∞–º–º—ã', 
                   ha='center', va='center', transform=ax.transAxes)
            return
        
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞–¥–∞—Ä–Ω–æ–π –¥–∏–∞–≥—Ä–∞–º–º—ã
        profiles_norm = self.segment_profiles[feature_cols].copy()
        for col in feature_cols:
            profiles_norm[col] = (profiles_norm[col] - profiles_norm[col].min()) / \
                                (profiles_norm[col].max() - profiles_norm[col].min())
        
        angles = np.linspace(0, 2 * np.pi, len(feature_cols), endpoint=False).tolist()
        angles += angles[:1]  # –ó–∞–º–∫–Ω—É—Ç—å –∫—Ä—É–≥
        
        ax.set_theta_offset(np.pi / 2)
        ax.set_theta_direction(-1)
        ax.set_thetagrids(np.degrees(angles[:-1]), 
                         [col.replace('avg_', '').title() for col in feature_cols])
        
        colors = plt.cm.Set1(np.linspace(0, 1, len(profiles_norm)))
        
        for i, (_, row) in enumerate(profiles_norm.iterrows()):
            values = row.tolist()
            values += values[:1]  # –ó–∞–º–∫–Ω—É—Ç—å –ª–∏–Ω–∏—é
            
            ax.plot(angles, values, 'o-', linewidth=2, 
                   label=self.business_names.get(i, f'–°–µ–≥–º–µ–Ω—Ç {i}'),
                   color=colors[i])
            ax.fill(angles, values, alpha=0.25, color=colors[i])
        
        ax.set_ylim(0, 1)
        ax.set_title('üéØ –ü—Ä–æ—Ñ–∏–ª–∏ —Å–µ–≥–º–µ–Ω—Ç–æ–≤', pad=20)
        ax.legend(loc='upper right', bbox_to_anchor=(1.2, 1.0))
    
    def create_marketing_strategies(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –¥–ª—è —Å–µ–≥–º–µ–Ω—Ç–æ–≤"""
        if not self.fitted:
            raise ValueError("–°–Ω–∞—á–∞–ª–∞ –æ–±—É—á–∏—Ç–µ –º–æ–¥–µ–ª—å —Å –ø–æ–º–æ—â—å—é fit()")
        
        print(f"\nüéØ –ú–ê–†–ö–ï–¢–ò–ù–ì–û–í–´–ï –°–¢–†–ê–¢–ï–ì–ò–ò –ü–û –°–ï–ì–ú–ï–ù–¢–ê–ú:")
        print("=" * 60)
        
        strategy_templates = {
            "üíé –ß–µ–º–ø–∏–æ–Ω—ã": {
                "strategy": "VIP —Å–µ—Ä–≤–∏—Å –∏ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è",
                "channels": ["–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä", "VIP —Å–æ–±—ã—Ç–∏—è", "–ü—Ä–∏–≤–∞—Ç–Ω—ã–µ –ø—Ä–æ–¥–∞–∂–∏"],
                "tactics": ["–≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã", "–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Å–∫–∏–¥–∫–∏", "–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞"],
                "expected_conversion": "15-25%",
                "budget_allocation": "30%"
            },
            "üèÜ –õ–æ—è–ª—å–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã": {
                "strategy": "–ü—Ä–æ–≥—Ä–∞–º–º—ã –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏ –∏ —É–¥–µ—Ä–∂–∞–Ω–∏–µ",
                "channels": ["Email –º–∞—Ä–∫–µ—Ç–∏–Ω–≥", "Push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", "–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"],
                "tactics": ["–ù–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã–µ —Å–∫–∏–¥–∫–∏", "–†–∞–Ω–Ω–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–∞—Å–ø—Ä–æ–¥–∞–∂–∞—Ö", "–ü–æ–¥–∞—Ä–∫–∏"],
                "expected_conversion": "12-18%",
                "budget_allocation": "25%"
            },
            "üöÄ –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –ª–æ—è–ª—å–Ω—ã–µ": {
                "strategy": "–†–∞–∑–≤–∏—Ç–∏–µ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏ –∏ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ —á–∞—Å—Ç–æ—Ç—ã",
                "channels": ["Retargeting", "Social media", "Email –∫–∞–º–ø–∞–Ω–∏–∏"],
                "tactics": ["–ü—Ä–æ–º–æ –Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –ø–æ–∫—É–ø–∫–∏", "Cross-sell", "–û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç"],
                "expected_conversion": "8-12%",
                "budget_allocation": "20%"
            },
            "üå± –ù–æ–≤—ã–µ –∫–ª–∏–µ–Ω—Ç—ã": {
                "strategy": "Onboarding –∏ –ø–µ—Ä–≤–æ–µ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–µ",
                "channels": ["Welcome —Å–µ—Ä–∏–∏", "–ú–æ–±–∏–ª—å–Ω—ã–µ push", "–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏"],
                "tactics": ["–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–∫–∏–¥–∫–∏", "–û–±—É—á–∞—é—â–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç", "–ü—Ä–æ—Å—Ç–æ—Ç–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"],
                "expected_conversion": "6-10%",
                "budget_allocation": "15%"
            },
            "üò¥ –°–ø—è—â–∏–µ": {
                "strategy": "–†–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –∏ –≤–æ–∑–≤—Ä–∞—Ç",
                "channels": ["–†–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ email", "–†–µ—Ç–∞—Ä–≥–µ—Ç–∏–Ω–≥", "SMS"],
                "tactics": ["Win-back —Å–∫–∏–¥–∫–∏", "–û–ø—Ä–æ—Å—ã —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–∏", "–ù–æ–≤—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã"],
                "expected_conversion": "3-6%",
                "budget_allocation": "10%"
            }
        }
        
        strategies = {}
        
        for segment_id, business_name in self.business_names.items():
            profile = self.segment_profiles[self.segment_profiles['segment_id'] == segment_id].iloc[0]
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –ø–æ –±–∏–∑–Ω–µ—Å-–Ω–∞–∑–≤–∞–Ω–∏—é –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –æ–±—â—É—é
            if business_name in strategy_templates:
                strategy = strategy_templates[business_name].copy()
            else:
                strategy = {
                    "strategy": "–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥",
                    "channels": ["Multi-channel –∫–∞–º–ø–∞–Ω–∏—è"],
                    "tactics": ["A/B —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π"],
                    "expected_conversion": "5-10%",
                    "budget_allocation": "5%"
                }
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–≥–º–µ–Ω—Ç–µ
            strategy['segment_size'] = int(profile['size'])
            strategy['segment_percentage'] = round(profile['percentage'], 1)
            
            strategies[segment_id] = strategy
            
            # –í—ã–≤–æ–¥–∏–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
            print(f"\n{business_name} (–°–µ–≥–º–µ–Ω—Ç {segment_id}):")
            print(f"  üë• –†–∞–∑–º–µ—Ä: {strategy['segment_size']} –∫–ª–∏–µ–Ω—Ç–æ–≤ ({strategy['segment_percentage']}%)")
            print(f"  üéØ –°—Ç—Ä–∞—Ç–µ–≥–∏—è: {strategy['strategy']}")
            print(f"  üì± –ö–∞–Ω–∞–ª—ã: {', '.join(strategy['channels'])}")
            print(f"  üõ† –¢–∞–∫—Ç–∏–∫–∏: {', '.join(strategy['tactics'])}")
            print(f"  üìä –û–∂–∏–¥–∞–µ–º–∞—è –∫–æ–Ω–≤–µ—Ä—Å–∏—è: {strategy['expected_conversion']}")
            print(f"  üí∞ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –±—é–¥–∂–µ—Ç–∞: {strategy['budget_allocation']}")
        
        return strategies
    
    def save_model(self, filepath):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏"""
        if not self.fitted:
            raise ValueError("–°–Ω–∞—á–∞–ª–∞ –æ–±—É—á–∏—Ç–µ –º–æ–¥–µ–ª—å —Å –ø–æ–º–æ—â—å—é fit()")
        
        model_data = {
            'model': self.model,
            'scaler': self.scaler,
            'feature_names': self.feature_names,
            'segment_profiles': self.segment_profiles,
            'business_names': self.business_names,
            'quality_metrics': self.quality_metrics,
            'n_clusters': self.n_clusters,
            'algorithm': self.algorithm,
            'random_state': self.random_state
        }
        
        joblib.dump(model_data, filepath)
        print(f"‚úÖ –ú–æ–¥–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {filepath}")
    
    def load_model(self, filepath):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏"""
        model_data = joblib.load(filepath)
        
        self.model = model_data['model']
        self.scaler = model_data['scaler']
        self.feature_names = model_data['feature_names']
        self.segment_profiles = model_data['segment_profiles']
        self.business_names = model_data['business_names']
        self.quality_metrics = model_data['quality_metrics']
        self.n_clusters = model_data['n_clusters']
        self.algorithm = model_data['algorithm']
        self.random_state = model_data['random_state']
        self.fitted = True
        
        print(f"‚úÖ –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞: {filepath}")

def demo_full_pipeline():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª–Ω–æ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏"""
    print("üöÄ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª–Ω–æ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤!")
    print("=" * 60)
    
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        data = pd.read_csv('customer_behavior.csv')
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(data)} –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞")
    except FileNotFoundError:
        print("‚ùå –§–∞–π–ª customer_behavior.csv –Ω–µ –Ω–∞–π–¥–µ–Ω")
        print("   –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ kmeans_clustering.py –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö")
        return
    
    # 1. –°–æ–∑–¥–∞–µ–º –∏ –æ–±—É—á–∞–µ–º –º–æ–¥–µ–ª—å
    segmenter = CustomerSegmentation(n_clusters='auto', algorithm='kmeans')
    
    # –í—ã–±–∏—Ä–∞–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏ –¥–ª—è —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏
    features = ['age', 'income', 'total_purchases', 'total_spent', 'avg_order_value', 'loyalty_score']
    segmenter.fit(data, features=features, create_rfm=True)
    
    # 2. –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª–∏ —Å–µ–≥–º–µ–Ω—Ç–æ–≤
    profiles = segmenter.get_segment_profiles()
    print(f"\nüìã –ü—Ä–æ—Ñ–∏–ª–∏ —Å–µ–≥–º–µ–Ω—Ç–æ–≤:")
    print(profiles[['segment_id', 'business_name', 'size', 'percentage']].round(1))
    
    # 3. –°–æ–∑–¥–∞–µ–º –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
    strategies = segmenter.create_marketing_strategies()
    
    # 4. –í–∏–∑—É–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    segmenter.visualize_segments(data)
    
    # 5. –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –¥–ª—è –Ω–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
    print(f"\nüîÆ –¢–µ—Å—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –¥–ª—è –Ω–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤:")
    new_customers = pd.DataFrame({
        'age': [25, 45, 60],
        'income': [50, 80, 120],
        'total_purchases': [3, 15, 25],
        'total_spent': [5000, 50000, 100000],
        'avg_order_value': [1666, 3333, 4000],
        'loyalty_score': [5, 8, 9]
    })
    
    predicted_segments = segmenter.predict(new_customers)
    
    for i, segment in enumerate(predicted_segments):
        business_name = segmenter.business_names.get(segment, f'–°–µ–≥–º–µ–Ω—Ç {segment}')
        print(f"  –ö–ª–∏–µ–Ω—Ç {i+1}: {business_name}")
    
    # 6. –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–æ–¥–µ–ª—å
    segmenter.save_model('customer_segmentation_model.pkl')
    
    print(f"\nüéâ –ü–æ–ª–Ω—ã–π –ø–∞–π–ø–ª–∞–π–Ω —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω!")
    print("üí° –ú–æ–¥–µ–ª—å –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –≤ production!")
    
    return segmenter

if __name__ == "__main__":
    demo_full_pipeline()