"""
–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤ Python.
–ú—ã —Ä–∞–±–æ—Ç–∞–µ–º —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–∞ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –±–∞–∑–æ–≤—ã–µ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏.

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è: pandas, numpy
–£—Å—Ç–∞–Ω–æ–≤–∫–∞: pip install pandas numpy
"""

import pandas as pd
import numpy as np
import sys

print("üêç –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Python –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö!")
print("=" * 60)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–∞
print("üì• –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞ shop_data.csv...")

try:
    # –ó–∞–≥—Ä—É–∑–∫–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π, —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–º –∏ –¥–µ—Å—è—Ç–∏—á–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º
    data = pd.read_csv('shop_data.csv', 
                       encoding='utf-8', 
                       sep=';',
                       decimal=',')  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–ø—è—Ç—É—é –∫–∞–∫ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –¥—Ä–æ–±–µ–π
    print("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!")
    
except FileNotFoundError:
    print("‚ùå –û–®–ò–ë–ö–ê: –§–∞–π–ª shop_data.csv –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–µ–∫—É—â–µ–π –ø–∞–ø–∫–µ.")
    print("   –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —Ä—è–¥–æ–º —Å —ç—Ç–∏–º —Å–∫—Ä–∏–ø—Ç–æ–º.")
    sys.exit(1)
    
except Exception as e:
    print(f"‚ùå –û–®–ò–ë–ö–ê –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
    print("   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ shop_data.csv")
    sys.exit(1)

print(f"\nüìä –û–°–ù–û–í–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –î–ê–ù–ù–´–•:")
print("=" * 45)
print(f"üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ (–∑–∞–∫–∞–∑–æ–≤): {len(data):,}")
print(f"üìã –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–æ–ª–±—Ü–æ–≤: {len(data.columns)}")
print(f"üíæ –†–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö –≤ –ø–∞–º—è—Ç–∏: {data.memory_usage(deep=True).sum() / 1024:.1f} KB")
print(f"üìÖ –ü–µ—Ä–∏–æ–¥ –¥–∞–Ω–Ω—ã—Ö: —Å {data['order_date'].min()} –ø–æ {data['order_date'].max()}")

# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç–æ–ª–±—Ü–∞—Ö
print(f"\nüìã –°–¢–†–£–ö–¢–£–†–ê –î–ê–ù–ù–´–• - –ù–ê–ó–í–ê–ù–ò–Ø –°–¢–û–õ–ë–¶–û–í:")
print("=" * 50)
for i, col in enumerate(data.columns, 1):
    print(f"{i:2d}. {col}")

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
print(f"\nüîç –¢–ò–ü–´ –î–ê–ù–ù–´–• –í –°–¢–û–õ–ë–¶–ê–•:")
print("=" * 35)
for col in data.columns:
    dtype = data[col].dtype
    null_count = data[col].isnull().sum()
    print(f"‚Ä¢ {col:15} - {dtype} (–ø—Ä–æ–ø—É—Å–∫–æ–≤: {null_count})")

print(f"\nüìä –ü–ï–†–í–´–ï 5 –°–¢–†–û–ö –î–ê–ù–ù–´–•:")
print("=" * 35)
print(data.head())

print(f"\nüìà –û–°–ù–û–í–ù–´–ï –§–ò–ù–ê–ù–°–û–í–´–ï –ü–û–ö–ê–ó–ê–¢–ï–õ–ò:")
print("=" * 40)

# –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤—ã—Ä—É—á–∫–µ
total_revenue = data['total_amount'].sum()
average_order = data['total_amount'].mean()
median_order = data['total_amount'].median()
max_order = data['total_amount'].max()
min_order = data['total_amount'].min()
std_order = data['total_amount'].std()

print(f"üí∞ –û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞ –º–∞–≥–∞–∑–∏–Ω–∞: {total_revenue:,.2f} —Ä—É–±.")
print(f"üõí –°—Ä–µ–¥–Ω–∏–π —á–µ–∫ –∑–∞–∫–∞–∑–∞: {average_order:,.2f} —Ä—É–±.")
print(f"üìä –ú–µ–¥–∏–∞–Ω–Ω—ã–π —á–µ–∫: {median_order:,.2f} —Ä—É–±.")
print(f"üíé –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –∑–∞–∫–∞–∑: {max_order:,.2f} —Ä—É–±.")
print(f"üîª –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∑–∞–∫–∞–∑: {min_order:,.2f} —Ä—É–±.")
print(f"üìè –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: {std_order:,.2f} —Ä—É–±.")

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
total_quantity = data['quantity'].sum()
average_quantity = data['quantity'].mean()
unique_customers = data['customer_id'].nunique()
average_discount = data['discount_percent'].mean()

print(f"\nüì¶ –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
print("=" * 35)
print(f"üì¶ –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –ø—Ä–æ–¥–∞–Ω–æ: {total_quantity:,} —à—Ç.")
print(f"üõç –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∑–∞–∫–∞–∑–µ: {average_quantity:.1f} —à—Ç.")
print(f"üë• –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤: {unique_customers:,} —á–µ–ª–æ–≤–µ–∫")
print(f"üè∑ –°—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä —Å–∫–∏–¥–∫–∏: {average_discount:.1f}%")

print(f"\nüè∑Ô∏è –ê–ù–ê–õ–ò–ó –ö–ê–¢–ï–ì–û–†–ò–ô –¢–û–í–ê–†–û–í:")
print("=" * 40)

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
category_stats = data['product_category'].value_counts()
category_revenue = data.groupby('product_category')['total_amount'].agg(['sum', 'mean', 'count'])

print("üìä –ü–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–π (–ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∑–∞–∫–∞–∑–æ–≤):")
for category, count in category_stats.items():
    percentage = (count / len(data)) * 100
    revenue = category_revenue.loc[category, 'sum']
    avg_check = category_revenue.loc[category, 'mean']
    print(f"‚Ä¢ {category:12}: {count:3d} –∑–∞–∫–∞–∑–æ–≤ ({percentage:4.1f}%) | "
          f"–í—ã—Ä—É—á–∫–∞: {revenue:8,.0f} —Ä—É–±. | –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: {avg_check:6,.0f} —Ä—É–±.")

print(f"\nüèôÔ∏è –ê–ù–ê–õ–ò–ó –ü–û –ì–û–†–û–î–ê–ú:")
print("=" * 30)

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≥–æ—Ä–æ–¥–∞–º
city_stats = data['city'].value_counts()
city_revenue = data.groupby('city')['total_amount'].agg(['sum', 'mean', 'count'])

print("üìä –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ –≥–æ—Ä–æ–¥–∞–º:")
for city, count in city_stats.items():
    percentage = (count / len(data)) * 100
    revenue = city_revenue.loc[city, 'sum']
    avg_check = city_revenue.loc[city, 'mean']
    print(f"‚Ä¢ {city:15}: {count:3d} –∑–∞–∫–∞–∑–æ–≤ ({percentage:4.1f}%) | "
          f"–í—ã—Ä—É—á–∫–∞: {revenue:8,.0f} —Ä—É–±. | –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: {avg_check:6,.0f} —Ä—É–±.")

print(f"\nüí≥ –°–ü–û–°–û–ë–´ –û–ü–õ–ê–¢–´:")
print("=" * 25)

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–ø–æ—Å–æ–±–∞–º –æ–ø–ª–∞—Ç—ã
payment_stats = data['payment_method'].value_counts()
payment_revenue = data.groupby('payment_method')['total_amount'].agg(['sum', 'mean', 'count'])

print("üí∞ –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ –æ–ø–ª–∞—Ç–µ:")
for method, count in payment_stats.items():
    percentage = (count / len(data)) * 100
    revenue = payment_revenue.loc[method, 'sum']
    avg_check = payment_revenue.loc[method, 'mean']
    print(f"‚Ä¢ {method:18}: {count:3d} –∑–∞–∫–∞–∑–æ–≤ ({percentage:4.1f}%) | "
          f"–í—ã—Ä—É—á–∫–∞: {revenue:8,.0f} —Ä—É–±. | –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: {avg_check:6,.0f} —Ä—É–±.")

print(f"\nüìÖ –ê–ù–ê–õ–ò–ó –ü–û –î–ù–Ø–ú –ù–ï–î–ï–õ–ò:")
print("=" * 35)

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏
dow_stats = data['day_of_week'].value_counts()
dow_revenue = data.groupby('day_of_week')['total_amount'].agg(['sum', 'mean', 'count'])

print("üìä –ö–æ–≥–¥–∞ –∫–ª–∏–µ–Ω—Ç—ã –ø–æ–∫—É–ø–∞—é—Ç –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ:")
# –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
days_order = ['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞', '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ']
for day in days_order:
    if day in dow_stats.index:
        count = dow_stats[day]
        percentage = (count / len(data)) * 100
        revenue = dow_revenue.loc[day, 'sum']
        avg_check = dow_revenue.loc[day, 'mean']
        print(f"‚Ä¢ {day:11}: {count:3d} –∑–∞–∫–∞–∑–æ–≤ ({percentage:4.1f}%) | "
              f"–í—ã—Ä—É—á–∫–∞: {revenue:8,.0f} —Ä—É–±. | –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: {avg_check:6,.0f} —Ä—É–±.")

print(f"\nüìà –ê–ù–ê–õ–ò–ó –ü–û –ú–ï–°–Ø–¶–ê–ú:")
print("=" * 30)

# –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–æ–ª–±–µ—Ü —Å –º–µ—Å—è—Ü–µ–º –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–Ω–¥–æ–≤
data['order_month'] = pd.to_datetime(data['order_date']).dt.to_period('M')
monthly_stats = data.groupby('order_month').agg({
    'order_id': 'count',
    'total_amount': ['sum', 'mean']
}).round(2)

print("üìä –î–∏–Ω–∞–º–∏–∫–∞ –ø—Ä–æ–¥–∞–∂ –ø–æ –º–µ—Å—è—Ü–∞–º:")
for month in monthly_stats.index:
    count = monthly_stats.loc[month, ('order_id', 'count')]
    revenue = monthly_stats.loc[month, ('total_amount', 'sum')]
    avg_check = monthly_stats.loc[month, ('total_amount', 'mean')]
    print(f"‚Ä¢ {month}: {count:3d} –∑–∞–∫–∞–∑–æ–≤ | –í—ã—Ä—É—á–∫–∞: {revenue:8,.0f} —Ä—É–±. | –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: {avg_check:6,.0f} —Ä—É–±.")

print(f"\nüîç –ü–û–ò–°–ö –ò–ù–¢–ï–†–ï–°–ù–´–• –§–ê–ö–¢–û–í:")
print("=" * 40)

# –°–∞–º—ã–π –¥–æ—Ä–æ–≥–æ–π –∑–∞–∫–∞–∑
max_order_idx = data['total_amount'].idxmax()
max_order_info = data.loc[max_order_idx]
print(f"üíé –°–∞–º—ã–π –¥–æ—Ä–æ–≥–æ–π –∑–∞–∫–∞–∑:")
print(f"   ‚Ä¢ ID –∑–∞–∫–∞–∑–∞: {max_order_info['order_id']}")
print(f"   ‚Ä¢ –¢–æ–≤–∞—Ä: {max_order_info['product_name']}")
print(f"   ‚Ä¢ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {max_order_info['product_category']}")
print(f"   ‚Ä¢ –°—É–º–º–∞: {max_order_info['total_amount']:,.2f} —Ä—É–±.")
print(f"   ‚Ä¢ –ì–æ—Ä–æ–¥: {max_order_info['city']}")
print(f"   ‚Ä¢ –î–∞—Ç–∞: {max_order_info['order_date']}")

# –°–∞–º–∞—è –ø–æ–ø—É–ª—è—Ä–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –≤ –∫–∞–∂–¥–æ–º –≥–æ—Ä–æ–¥–µ
print(f"\nüèÜ –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ –≥–æ—Ä–æ–¥–∞–º:")
city_category = data.groupby(['city', 'product_category']).size().unstack(fill_value=0)
for city in data['city'].unique():
    city_data = data[data['city'] == city]
    top_category = city_data['product_category'].value_counts().index[0]
    count = city_data['product_category'].value_counts().iloc[0]
    percentage = (count / len(city_data)) * 100
    print(f"   ‚Ä¢ {city}: {top_category} ({count} –∑–∞–∫–∞–∑–æ–≤, {percentage:.1f}%)")

# –°—Ä–µ–¥–Ω–∏–π —á–µ–∫ –ø–æ —Å–ø–æ—Å–æ–±–∞–º –æ–ø–ª–∞—Ç—ã —Å –∞–Ω–∞–ª–∏–∑–æ–º
print(f"\nüí∞ –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ —Å–ø–æ—Å–æ–±–∞–º –æ–ø–ª–∞—Ç—ã:")
payment_analysis = data.groupby('payment_method').agg({
    'total_amount': ['count', 'sum', 'mean', 'median'],
    'quantity': 'mean'
}).round(2)

for method in data['payment_method'].unique():
    method_data = payment_analysis.loc[method]
    count = int(method_data[('total_amount', 'count')])
    total = method_data[('total_amount', 'sum')]
    mean_check = method_data[('total_amount', 'mean')]
    median_check = method_data[('total_amount', 'median')]
    avg_qty = method_data[('quantity', 'mean')]
    
    print(f"   ‚Ä¢ {method}:")
    print(f"     - –ó–∞–∫–∞–∑–æ–≤: {count}, –í—ã—Ä—É—á–∫–∞: {total:,.0f} —Ä—É–±.")
    print(f"     - –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: {mean_check:,.0f} —Ä—É–±., –ú–µ–¥–∏–∞–Ω–Ω—ã–π: {median_check:,.0f} —Ä—É–±.")
    print(f"     - –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª-–≤–æ —Ç–æ–≤–∞—Ä–æ–≤: {avg_qty:.1f} —à—Ç.")

print(f"\nüéØ –ö–õ–Æ–ß–ï–í–´–ï –í–´–í–û–î–´ –ò –ò–ù–°–ê–ô–¢–´:")
print("=" * 40)

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –≤—ã–≤–æ–¥—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö
total_days = (pd.to_datetime(data['order_date'].max()) - pd.to_datetime(data['order_date'].min())).days
avg_daily_revenue = total_revenue / total_days if total_days > 0 else 0
avg_daily_orders = len(data) / total_days if total_days > 0 else 0

print("üìà –û–±—â–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:")
print(f"   ‚Ä¢ –°—Ä–µ–¥–Ω—è—è –¥–Ω–µ–≤–Ω–∞—è –≤—ã—Ä—É—á–∫–∞: {avg_daily_revenue:,.0f} —Ä—É–±.")
print(f"   ‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤ –≤ –¥–µ–Ω—å: {avg_daily_orders:.1f}")
print(f"   ‚Ä¢ –ö–æ–Ω–≤–µ—Ä—Å–∏—è –≤ –ø–æ–∫—É–ø–∫—É: –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ")

print(f"\nüîç –ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –Ω–∞—Ö–æ–¥–∫–∏:")
# –ù–∞—Ö–æ–¥–∏–º –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –≤—ã—Ä—É—á–∫–æ–π
best_day = dow_revenue['sum'].idxmax()
best_day_revenue = dow_revenue.loc[best_day, 'sum']
print(f"   ‚Ä¢ –°–∞–º—ã–π –ø—Ä–∏–±—ã–ª—å–Ω—ã–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏: {best_day} ({best_day_revenue:,.0f} —Ä—É–±.)")

# –ù–∞—Ö–æ–¥–∏–º —Å–∞–º—É—é –ø—Ä–∏–±—ã–ª—å–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
best_category = category_revenue['sum'].idxmax()
best_category_revenue = category_revenue.loc[best_category, 'sum']
best_category_percent = (best_category_revenue / total_revenue) * 100
print(f"   ‚Ä¢ –°–∞–º–∞—è –ø—Ä–∏–±—ã–ª—å–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {best_category} ({best_category_percent:.1f}% –æ—Ç –æ–±—â–µ–π –≤—ã—Ä—É—á–∫–∏)")

# –ê–Ω–∞–ª–∏–∑ —Å–∫–∏–¥–æ–∫
orders_with_discount = data[data['discount_percent'] > 0]
discount_impact = orders_with_discount['total_amount'].mean() - data[data['discount_percent'] == 0]['total_amount'].mean()
print(f"   ‚Ä¢ –ó–∞–∫–∞–∑–æ–≤ —Å–æ —Å–∫–∏–¥–∫–æ–π: {len(orders_with_discount)} –∏–∑ {len(data)} ({len(orders_with_discount)/len(data)*100:.1f}%)")

print(f"\n‚úÖ –ü–†–û–í–ï–†–ö–ê –ö–ê–ß–ï–°–¢–í–ê –î–ê–ù–ù–´–•:")
print("=" * 35)
print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ –æ—à–∏–±–∫–∏ –∏ –∞–Ω–æ–º–∞–ª–∏–∏...")

# –ü—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö
issues_found = 0

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
missing_data = data.isnull().sum()
if missing_data.sum() > 0:
    print("‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω—ã –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è:")
    for col, count in missing_data[missing_data > 0].items():
        print(f"     ‚Ä¢ {col}: {count} –ø—Ä–æ–ø—É—Å–∫–æ–≤")
    issues_found += 1

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ —Ü–µ–Ω—ã –∏–ª–∏ —Å—É–º–º—ã
negative_prices = data[data['price'] < 0]
if len(negative_prices) > 0:
    print(f"‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω—ã –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ —Ü–µ–Ω—ã: {len(negative_prices)} –∑–∞–ø–∏—Å–µ–π")
    issues_found += 1

negative_amounts = data[data['total_amount'] < 0]
if len(negative_amounts) > 0:
    print(f"‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω—ã –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ —Å—É–º–º—ã: {len(negative_amounts)} –∑–∞–ø–∏—Å–µ–π")
    issues_found += 1

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–∏–∫–∏ —Å–∫–∏–¥–æ–∫
discount_logic = data[data['total_amount'] > data['price'] * data['quantity']]
if len(discount_logic) > 0:
    print(f"‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω—ã –ª–æ–≥–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ –≤ —Å–∫–∏–¥–∫–∞—Ö: {len(discount_logic)} –∑–∞–ø–∏—Å–µ–π")
    issues_found += 1

if issues_found == 0:
    print("‚úÖ –î–∞–Ω–Ω—ã–µ –≤—ã–≥–ª—è–¥—è—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ! –û—à–∏–±–æ–∫ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ.")

print(f"\nüöÄ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –î–õ–Ø –î–ê–õ–¨–ù–ï–ô–®–ï–ì–û –ê–ù–ê–õ–ò–ó–ê:")
print("=" * 50)
print("üìä –ù–∞ –æ—Å–Ω–æ–≤–µ –ø–µ—Ä–≤–∏—á–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –∏–∑—É—á–∏—Ç—å:")
print("   1. –°–µ–∑–æ–Ω–Ω–æ—Å—Ç—å –ø—Ä–æ–¥–∞–∂ - –µ—Å—Ç—å –ª–∏ –ø–∏–∫–∏ –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –º–µ—Å—è—Ü—ã?")
print("   2. –ü–æ–≤–µ–¥–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–æ–≤ - –∫—Ç–æ –ø–æ–∫—É–ø–∞–µ—Ç —á–∞—â–µ –≤—Å–µ–≥–æ?")
print("   3. –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å–∫–∏–¥–æ–∫ - —É–≤–µ–ª–∏—á–∏–≤–∞—é—Ç –ª–∏ –æ–Ω–∏ —Å—Ä–µ–¥–Ω–∏–π —á–µ–∫?")
print("   4. –ì–µ–æ–≥—Ä–∞—Ñ–∏—è –ø—Ä–æ–¥–∞–∂ - –≤ –∫–∞–∫–∏—Ö –≥–æ—Ä–æ–¥–∞—Ö –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª —Ä–æ—Å—Ç–∞?")
print("   5. –¢–æ–≤–∞—Ä–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞ - –∫–∞–∫–∏–µ —Ç–æ–≤–∞—Ä—ã –ø—Ä–æ–¥–∞—é—Ç—Å—è –≤–º–µ—Å—Ç–µ?")

print(f"\nüéì –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï:")
print("=" * 20)
print("‚úÖ Python —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∑–∏–ª –∏ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª –¥–∞–Ω–Ω—ã–µ!")
print("üìä –í—ã —É–≤–∏–¥–µ–ª–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö:")
print("   ‚Ä¢ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–æ–≤ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º")
print("   ‚Ä¢ –ë—ã—Å—Ç—Ä—ã–π —Ä–∞—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫ –∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π")
print("   ‚Ä¢ –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –∏ –∞–≥—Ä–µ–≥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ —Ä–∞–∑–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º")  
print("   ‚Ä¢ –ü–æ–∏—Å–∫ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö –∑–∞–∫–æ–Ω–æ–º–µ—Ä–Ω–æ—Å—Ç–µ–π –∏ –∏–Ω—Å–∞–π—Ç–æ–≤")
print("   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –æ—à–∏–±–∫–∏")
print("   ‚Ä¢ –§–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–≤–æ–¥–æ–≤ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π")

print(f"\nüöÄ –¢–µ–ø–µ—Ä—å –≤—ã –≥–æ—Ç–æ–≤—ã –∫ –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã–º –∞–Ω–∞–ª–∏–∑–∞–º –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –≥–ª–∞–≤–∞—Ö!")
print("üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —ç—Ç–æ—Ç –∞–Ω–∞–ª–∏–∑ –≤ Excel –∏ —Å—Ä–∞–≤–Ω–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã.")
print("üìà –í —Å–ª–µ–¥—É—é—â–µ–π –≥–ª–∞–≤–µ –º—ã –∏–∑—É—á–∏–º –æ–ø–∏—Å–∞—Ç–µ–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ.")

print("\n" + "="*60)
print("üêç –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω! –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–Ω–∏–º–∞–Ω–∏–µ!")
print("="*60)