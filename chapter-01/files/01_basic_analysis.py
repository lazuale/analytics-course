#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ì–ª–∞–≤–∞ 1: –ß—Ç–æ —Ç–∞–∫–æ–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö
–°–∫—Ä–∏–ø—Ç: –ë–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–∞

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö:
- –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –ø–µ—Ä–≤–∏—á–Ω—ã–π –æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö
- –†–∞—Å—á–µ—Ç –∫–ª—é—á–µ–≤—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π
- –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç—ã—Ö –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–π
- –§–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–≤–æ–¥–æ–≤

–ê–≤—Ç–æ—Ä: Analytics Course
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
plt.rcParams['figure.figsize'] = (10, 6)
plt.rcParams['font.size'] = 12
sns.set_style("whitegrid")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä—É—Å—Å–∫–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
plt.rcParams['font.family'] = ['DejaVu Sans']

def load_data(file_path):
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ CSV —Ñ–∞–π–ª–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏

    Args:
        file_path (str): –ü—É—Ç—å –∫ CSV —Ñ–∞–π–ª—É

    Returns:
        pandas.DataFrame: –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    """
    try:
        df = pd.read_csv(file_path, sep=';', decimal=',', encoding='utf-8-sig')
        df['order_date'] = pd.to_datetime(df['order_date'])
        print("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!")
        return df
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return None

def basic_info(df):
    """
    –í—ã–≤–æ–¥–∏—Ç –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–∞—Ç–∞—Å–µ—Ç–µ

    Args:
        df (pandas.DataFrame): –î–∞—Ç–∞—Ñ—Ä–µ–π–º —Å –¥–∞–Ω–Ω—ã–º–∏
    """
    print("\nüìä –ë–ê–ó–û–í–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –î–ê–ù–ù–´–•")
    print("=" * 50)
    print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π: {len(df):,}")
    print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–æ–ª–±—Ü–æ–≤: {df.shape[1]}")
    print(f"–ü–µ—Ä–∏–æ–¥ –¥–∞–Ω–Ω—ã—Ö: {df['order_date'].min().date()} - {df['order_date'].max().date()}")
    print(f"–ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: {df.isnull().sum().sum()}")

    print("\nüìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö:")
    print(df.dtypes.to_string())

    print("\nüëÄ –ü–µ—Ä–≤—ã–µ 5 –∑–∞–ø–∏—Å–µ–π:")
    print(df.head().to_string(index=False))

def calculate_kpi(df):
    """
    –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∫–ª—é—á–µ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏

    Args:
        df (pandas.DataFrame): –î–∞—Ç–∞—Ñ—Ä–µ–π–º —Å –¥–∞–Ω–Ω—ã–º–∏

    Returns:
        dict: –°–ª–æ–≤–∞—Ä—å —Å KPI
    """
    kpi = {
        'total_revenue': df['total_amount'].sum(),
        'total_orders': len(df),
        'average_order_value': df['total_amount'].mean(),
        'unique_customers': df['customer_name'].nunique(),
        'orders_per_customer': len(df) / df['customer_name'].nunique()
    }

    print("\nüí∞ –ö–õ–Æ–ß–ï–í–´–ï –ü–û–ö–ê–ó–ê–¢–ï–õ–ò")
    print("=" * 50)
    print(f"–û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞: {kpi['total_revenue']:,.2f} —Ä—É–±.")
    print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤: {kpi['total_orders']:,}")
    print(f"–°—Ä–µ–¥–Ω–∏–π —á–µ–∫: {kpi['average_order_value']:,.2f} —Ä—É–±.")
    print(f"–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤: {kpi['unique_customers']:,}")
    print(f"–ó–∞–∫–∞–∑–æ–≤ –Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞: {kpi['orders_per_customer']:.2f}")

    return kpi

def analyze_categories(df):
    """
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–æ–¥–∞–∂–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º —Ç–æ–≤–∞—Ä–æ–≤

    Args:
        df (pandas.DataFrame): –î–∞—Ç–∞—Ñ—Ä–µ–π–º —Å –¥–∞–Ω–Ω—ã–º–∏
    """
    print("\nüõçÔ∏è –ê–ù–ê–õ–ò–ó –ü–û –ö–ê–¢–ï–ì–û–†–ò–Ø–ú")
    print("=" * 50)

    category_analysis = df.groupby('category').agg({
        'total_amount': ['sum', 'mean', 'count']
    }).round(2)

    category_analysis.columns = ['–í—ã—Ä—É—á–∫–∞', '–°—Ä–µ–¥–Ω–∏–π_—á–µ–∫', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ_–∑–∞–∫–∞–∑–æ–≤']
    category_analysis = category_analysis.sort_values('–í—ã—Ä—É—á–∫–∞', ascending=False)

    print(category_analysis.to_string())

    # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
    plt.figure(figsize=(12, 8))

    # –ì—Ä–∞—Ñ–∏–∫ 1: –í—ã—Ä—É—á–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    plt.subplot(2, 2, 1)
    category_analysis['–í—ã—Ä—É—á–∫–∞'].plot(kind='bar', color='skyblue')
    plt.title('–í—ã—Ä—É—á–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º')
    plt.ylabel('–í—ã—Ä—É—á–∫–∞ (—Ä—É–±.)')
    plt.xticks(rotation=45)

    # –ì—Ä–∞—Ñ–∏–∫ 2: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤
    plt.subplot(2, 2, 2)
    category_analysis['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ_–∑–∞–∫–∞–∑–æ–≤'].plot(kind='bar', color='lightgreen')
    plt.title('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º')
    plt.ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤')
    plt.xticks(rotation=45)

    # –ì—Ä–∞—Ñ–∏–∫ 3: –°—Ä–µ–¥–Ω–∏–π —á–µ–∫
    plt.subplot(2, 2, 3)
    category_analysis['–°—Ä–µ–¥–Ω–∏–π_—á–µ–∫'].plot(kind='bar', color='orange')
    plt.title('–°—Ä–µ–¥–Ω–∏–π —á–µ–∫ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º')
    plt.ylabel('–°—Ä–µ–¥–Ω–∏–π —á–µ–∫ (—Ä—É–±.)')
    plt.xticks(rotation=45)

    # –ì—Ä–∞—Ñ–∏–∫ 4: –ö—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ –≤—ã—Ä—É—á–∫–∏
    plt.subplot(2, 2, 4)
    category_analysis['–í—ã—Ä—É—á–∫–∞'].plot(kind='pie', autopct='%1.1f%%')
    plt.title('–î–æ–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤ –≤—ã—Ä—É—á–∫–µ')
    plt.ylabel('')

    plt.tight_layout()
    plt.savefig('category_analysis.png', dpi=300, bbox_inches='tight')
    plt.show()

def analyze_time_trends(df):
    """
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–¥—ã –≤ –¥–∞–Ω–Ω—ã—Ö

    Args:
        df (pandas.DataFrame): –î–∞—Ç–∞—Ñ—Ä–µ–π–º —Å –¥–∞–Ω–Ω—ã–º–∏
    """
    print("\nüìà –í–†–ï–ú–ï–ù–ù–û–ô –ê–ù–ê–õ–ò–ó")
    print("=" * 50)

    # –ê–Ω–∞–ª–∏–∑ –ø–æ –º–µ—Å—è—Ü–∞–º
    df['month'] = df['order_date'].dt.month
    df['month_name'] = df['order_date'].dt.strftime('%B')

    monthly_stats = df.groupby(['month', 'month_name']).agg({
        'total_amount': ['sum', 'count', 'mean']
    }).round(2)

    monthly_stats.columns = ['–í—ã—Ä—É—á–∫–∞', '–ó–∞–∫–∞–∑–æ–≤', '–°—Ä–µ–¥–Ω–∏–π_—á–µ–∫']
    print("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –º–µ—Å—è—Ü–∞–º:")
    print(monthly_stats.to_string())

    # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ç—Ä–µ–Ω–¥–æ–≤
    plt.figure(figsize=(15, 5))

    # –ì—Ä–∞—Ñ–∏–∫ 1: –î–∏–Ω–∞–º–∏–∫–∞ –≤—ã—Ä—É—á–∫–∏
    plt.subplot(1, 3, 1)
    monthly_stats['–í—ã—Ä—É—á–∫–∞'].plot(kind='line', marker='o', color='blue')
    plt.title('–î–∏–Ω–∞–º–∏–∫–∞ –≤—ã—Ä—É—á–∫–∏ –ø–æ –º–µ—Å—è—Ü–∞–º')
    plt.ylabel('–í—ã—Ä—É—á–∫–∞ (—Ä—É–±.)')
    plt.xlabel('–ú–µ—Å—è—Ü')

    # –ì—Ä–∞—Ñ–∏–∫ 2: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤
    plt.subplot(1, 3, 2)
    monthly_stats['–ó–∞–∫–∞–∑–æ–≤'].plot(kind='line', marker='s', color='green')
    plt.title('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤ –ø–æ –º–µ—Å—è—Ü–∞–º')
    plt.ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤')
    plt.xlabel('–ú–µ—Å—è—Ü')

    # –ì—Ä–∞—Ñ–∏–∫ 3: –°—Ä–µ–¥–Ω–∏–π —á–µ–∫
    plt.subplot(1, 3, 3)
    monthly_stats['–°—Ä–µ–¥–Ω–∏–π_—á–µ–∫'].plot(kind='line', marker='^', color='red')
    plt.title('–°—Ä–µ–¥–Ω–∏–π —á–µ–∫ –ø–æ –º–µ—Å—è—Ü–∞–º')
    plt.ylabel('–°—Ä–µ–¥–Ω–∏–π —á–µ–∫ (—Ä—É–±.)')
    plt.xlabel('–ú–µ—Å—è—Ü')

    plt.tight_layout()
    plt.savefig('time_trends.png', dpi=300, bbox_inches='tight')
    plt.show()

def analyze_geography(df):
    """
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≥–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤

    Args:
        df (pandas.DataFrame): –î–∞—Ç–∞—Ñ—Ä–µ–π–º —Å –¥–∞–Ω–Ω—ã–º–∏
    """
    print("\nüó∫Ô∏è –ì–ï–û–ì–†–ê–§–ò–ß–ï–°–ö–ò–ô –ê–ù–ê–õ–ò–ó")
    print("=" * 50)

    geo_stats = df.groupby('city').agg({
        'total_amount': ['sum', 'mean', 'count']
    }).round(2)

    geo_stats.columns = ['–í—ã—Ä—É—á–∫–∞', '–°—Ä–µ–¥–Ω–∏–π_—á–µ–∫', '–ó–∞–∫–∞–∑–æ–≤']
    geo_stats = geo_stats.sort_values('–í—ã—Ä—É—á–∫–∞', ascending=False)

    print("–¢–æ–ø-10 –≥–æ—Ä–æ–¥–æ–≤ –ø–æ –≤—ã—Ä—É—á–∫–µ:")
    print(geo_stats.head(10).to_string())

    # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
    plt.figure(figsize=(12, 6))

    # –ì—Ä–∞—Ñ–∏–∫ 1: –¢–æ–ø-5 –≥–æ—Ä–æ–¥–æ–≤ –ø–æ –≤—ã—Ä—É—á–∫–µ
    plt.subplot(1, 2, 1)
    geo_stats.head(5)['–í—ã—Ä—É—á–∫–∞'].plot(kind='bar', color='purple')
    plt.title('–¢–æ–ø-5 –≥–æ—Ä–æ–¥–æ–≤ –ø–æ –≤—ã—Ä—É—á–∫–µ')
    plt.ylabel('–í—ã—Ä—É—á–∫–∞ (—Ä—É–±.)')
    plt.xticks(rotation=45)

    # –ì—Ä–∞—Ñ–∏–∫ 2: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤ –ø–æ –≥–æ—Ä–æ–¥–∞–º
    plt.subplot(1, 2, 2)
    geo_stats.head(5)['–ó–∞–∫–∞–∑–æ–≤'].plot(kind='bar', color='teal')
    plt.title('–¢–æ–ø-5 –≥–æ—Ä–æ–¥–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∑–∞–∫–∞–∑–æ–≤')
    plt.ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤')
    plt.xticks(rotation=45)

    plt.tight_layout()
    plt.savefig('geography_analysis.png', dpi=300, bbox_inches='tight')
    plt.show()

def generate_insights(df, kpi):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª—é—á–µ–≤—ã–µ –∏–Ω—Å–∞–π—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞

    Args:
        df (pandas.DataFrame): –î–∞—Ç–∞—Ñ—Ä–µ–π–º —Å –¥–∞–Ω–Ω—ã–º–∏
        kpi (dict): –ö–ª—é—á–µ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
    """
    print("\nüí° –ö–õ–Æ–ß–ï–í–´–ï –ò–ù–°–ê–ô–¢–´")
    print("=" * 50)

    # –ò–Ω—Å–∞–π—Ç 1: –°–∞–º–∞—è –ø—Ä–∏–±—ã–ª—å–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è
    top_category = df.groupby('category')['total_amount'].sum().idxmax()
    top_category_revenue = df.groupby('category')['total_amount'].sum().max()
    total_revenue = df['total_amount'].sum()
    category_share = (top_category_revenue / total_revenue) * 100

    print(f"1. üì± –°–∞–º–∞—è –ø—Ä–∏–±—ã–ª—å–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {top_category}")
    print(f"   –î–æ–ª—è –≤ –≤—ã—Ä—É—á–∫–µ: {category_share:.1f}% ({top_category_revenue:,.0f} —Ä—É–±.)")

    # –ò–Ω—Å–∞–π—Ç 2: –õ—É—á—à–∏–π –≥–æ—Ä–æ–¥
    top_city = df.groupby('city')['total_amount'].sum().idxmax()
    top_city_orders = df[df['city'] == top_city].shape[0]

    print(f"\n2. üèôÔ∏è –õ–∏–¥–µ—Ä –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º: {top_city}")
    print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤: {top_city_orders}")

    # –ò–Ω—Å–∞–π—Ç 3: –ö–ª–∏–µ–Ω—Ç—Å–∫–∞—è –ª–æ—è–ª—å–Ω–æ—Å—Ç—å
    repeat_customers = df['customer_name'].value_counts()
    loyal_customers = (repeat_customers > 1).sum()
    loyalty_rate = (loyal_customers / kpi['unique_customers']) * 100

    print(f"\n3. üë• –ü–æ–≤—Ç–æ—Ä–Ω—ã–µ –ø–æ–∫—É–ø–∫–∏:")
    print(f"   –ö–ª–∏–µ–Ω—Ç–æ–≤ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –∑–∞–∫–∞–∑–∞–º–∏: {loyal_customers} –∏–∑ {kpi['unique_customers']}")
    print(f"   –£—Ä–æ–≤–µ–Ω—å –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏: {loyalty_rate:.1f}%")

    # –ò–Ω—Å–∞–π—Ç 4: –°–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã
    payment_stats = df['payment_method'].value_counts()
    top_payment = payment_stats.index[0]
    top_payment_share = (payment_stats.iloc[0] / len(df)) * 100

    print(f"\n4. üí≥ –ü—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: {top_payment}")
    print(f"   –î–æ–ª—è: {top_payment_share:.1f}% –∑–∞–∫–∞–∑–æ–≤")

    print("\nüìã –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    print("1. –£–≤–µ–ª–∏—á–∏—Ç—å –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã–µ —Ä–∞—Å—Ö–æ–¥—ã –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—é", top_category)
    print("2. –†–∞–∑–≤–∏–≤–∞—Ç—å –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ –≤ –≥–æ—Ä–æ–¥–µ", top_city)
    print("3. –í–Ω–µ–¥—Ä–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–∫—É–ø–æ–∫")
    print("4. –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑", top_payment.lower())

def main():
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –≤—ã–ø–æ–ª–Ω—è—é—â–∞—è –≤–µ—Å—å –∞–Ω–∞–ª–∏–∑
    """
    print("üöÄ –ó–ê–ü–£–°–ö –ê–ù–ê–õ–ò–ó–ê –î–ê–ù–ù–´–• –ò–ù–¢–ï–†–ù–ï–¢-–ú–ê–ì–ê–ó–ò–ù–ê")
    print("=" * 60)

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    df = load_data('shop_sales_data.csv')
    if df is None:
        return

    # –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    basic_info(df)

    # –†–∞—Å—á–µ—Ç KPI
    kpi = calculate_kpi(df)

    # –ê–Ω–∞–ª–∏–∑ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    analyze_categories(df)

    # –í—Ä–µ–º–µ–Ω–Ω–æ–π –∞–Ω–∞–ª–∏–∑
    analyze_time_trends(df)

    # –ì–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑
    analyze_geography(df)

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–Ω—Å–∞–π—Ç–æ–≤
    generate_insights(df, kpi)

    print("\n‚úÖ –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù!")
    print("–°–æ–∑–¥–∞–Ω—ã —Ñ–∞–π–ª—ã: category_analysis.png, time_trends.png, geography_analysis.png")

if __name__ == "__main__":
    main()
