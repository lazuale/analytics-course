import sqlite3
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
from datetime import datetime

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä—É—Å—Å–∫–æ–≥–æ —à—Ä–∏—Ñ—Ç–∞ –¥–ª—è matplotlib
plt.rcParams['font.family'] = 'DejaVu Sans'

def connect_to_db():
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ SQLite –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    conn = sqlite3.connect('sales_data.db')
    return conn

def execute_sql_query(conn, query):
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ SQL –∑–∞–ø—Ä–æ—Å–∞ –∏ –≤–æ–∑–≤—Ä–∞—Ç DataFrame"""
    return pd.read_sql_query(query, conn)

def create_database_from_csv():
    """–°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏–∑ CSV —Ñ–∞–π–ª–æ–≤"""
    conn = sqlite3.connect('sales_data.db')
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ CSV —Ñ–∞–π–ª–æ–≤
    customers_df = pd.read_csv('customers.csv', sep=';')
    categories_df = pd.read_csv('categories.csv', sep=';')
    products_df = pd.read_csv('products.csv', sep=';')
    orders_df = pd.read_csv('orders.csv', sep=';')
    order_details_df = pd.read_csv('order_details.csv', sep=';')
    
    # –ó–∞–º–µ–Ω–∞ –∑–∞–ø—è—Ç—ã—Ö –Ω–∞ —Ç–æ—á–∫–∏ –≤ —á–∏—Å–ª–æ–≤—ã—Ö –ø–æ–ª—è—Ö
    products_df['price'] = products_df['price'].str.replace(',', '.').astype(float)
    orders_df['amount'] = orders_df['amount'].str.replace(',', '.').astype(float)
    order_details_df['unit_price'] = order_details_df['unit_price'].str.replace(',', '.').astype(float)
    order_details_df['discount'] = order_details_df['discount'].str.replace(',', '.').astype(float)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    customers_df.to_sql('customers', conn, if_exists='replace', index=False)
    categories_df.to_sql('categories', conn, if_exists='replace', index=False)
    products_df.to_sql('products', conn, if_exists='replace', index=False)
    orders_df.to_sql('orders', conn, if_exists='replace', index=False)
    order_details_df.to_sql('order_details', conn, if_exists='replace', index=False)
    
    print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω–∞ –∏–∑ CSV —Ñ–∞–π–ª–æ–≤")
    return conn

def monthly_sales_analysis(conn):
    """–ê–Ω–∞–ª–∏–∑ –º–µ—Å—è—á–Ω—ã—Ö –ø—Ä–æ–¥–∞–∂ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º CTE"""
    query = """
    WITH monthly_sales AS (
        SELECT 
            strftime('%Y-%m', order_date) as month,
            SUM(amount) as total_sales,
            COUNT(*) as order_count,
            AVG(amount) as avg_order_value,
            COUNT(DISTINCT customer_id) as unique_customers
        FROM orders
        WHERE status = '–í—ã–ø–æ–ª–Ω–µ–Ω'
          AND order_date >= date('now', '-12 months')
        GROUP BY strftime('%Y-%m', order_date)
    ),
    sales_with_growth AS (
        SELECT *,
            LAG(total_sales) OVER (ORDER BY month) as prev_month_sales,
            total_sales - LAG(total_sales) OVER (ORDER BY month) as sales_growth,
            ROUND(
                (total_sales - LAG(total_sales) OVER (ORDER BY month)) * 100.0 / 
                NULLIF(LAG(total_sales) OVER (ORDER BY month), 0), 2
            ) as growth_percent
        FROM monthly_sales
    )
    SELECT * FROM sales_with_growth
    ORDER BY month;
    """
    
    df = execute_sql_query(conn, query)
    
    # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
    fig, axes = plt.subplots(2, 2, figsize=(16, 12))
    fig.suptitle('üìà –ê–Ω–∞–ª–∏–∑ –º–µ—Å—è—á–Ω—ã—Ö –ø—Ä–æ–¥–∞–∂', fontsize=16, fontweight='bold')
    
    # –ì—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–¥–∞–∂
    axes[0,0].plot(df['month'], df['total_sales'], marker='o', linewidth=3, color='#2E86AB')
    axes[0,0].set_title('üí∞ –î–∏–Ω–∞–º–∏–∫–∞ –ø—Ä–æ–¥–∞–∂ –ø–æ –º–µ—Å—è—Ü–∞–º')
    axes[0,0].set_xlabel('–ú–µ—Å—è—Ü')
    axes[0,0].set_ylabel('–û–±—â–∏–µ –ø—Ä–æ–¥–∞–∂–∏ (—Ä—É–±.)')
    axes[0,0].tick_params(axis='x', rotation=45)
    axes[0,0].grid(True, alpha=0.3)
    
    # –ì—Ä–∞—Ñ–∏–∫ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–∫–∞–∑–æ–≤
    axes[0,1].bar(df['month'], df['order_count'], color='#A23B72', alpha=0.7)
    axes[0,1].set_title('üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤ –ø–æ –º–µ—Å—è—Ü–∞–º')
    axes[0,1].set_xlabel('–ú–µ—Å—è—Ü')
    axes[0,1].set_ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤')
    axes[0,1].tick_params(axis='x', rotation=45)
    
    # –ì—Ä–∞—Ñ–∏–∫ —Å—Ä–µ–¥–Ω–µ–≥–æ —á–µ–∫–∞
    axes[1,0].plot(df['month'], df['avg_order_value'], marker='s', color='#F18F01', linewidth=2)
    axes[1,0].set_title('üíé –°—Ä–µ–¥–Ω–∏–π —á–µ–∫ –ø–æ –º–µ—Å—è—Ü–∞–º')
    axes[1,0].set_xlabel('–ú–µ—Å—è—Ü')
    axes[1,0].set_ylabel('–°—Ä–µ–¥–Ω–∏–π —á–µ–∫ (—Ä—É–±.)')
    axes[1,0].tick_params(axis='x', rotation=45)
    axes[1,0].grid(True, alpha=0.3)
    
    # –ì—Ä–∞—Ñ–∏–∫ —Ä–æ—Å—Ç–∞ –ø—Ä–æ–¥–∞–∂
    colors = ['green' if x >= 0 else 'red' for x in df['growth_percent'].fillna(0)]
    axes[1,1].bar(df['month'][1:], df['growth_percent'][1:], color=colors[1:], alpha=0.7)
    axes[1,1].set_title('üìà –†–æ—Å—Ç –ø—Ä–æ–¥–∞–∂ –º–µ—Å—è—Ü –∫ –º–µ—Å—è—Ü—É (%)')
    axes[1,1].set_xlabel('–ú–µ—Å—è—Ü')
    axes[1,1].set_ylabel('–†–æ—Å—Ç (%)')
    axes[1,1].tick_params(axis='x', rotation=45)
    axes[1,1].axhline(y=0, color='black', linestyle='-', alpha=0.3)
    
    plt.tight_layout()
    plt.savefig('monthly_sales_analysis.png', dpi=300, bbox_inches='tight')
    plt.show()
    
    return df

def customer_segmentation_analysis(conn):
    """RFM –∞–Ω–∞–ª–∏–∑ –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø–æ–¥–∑–∞–ø—Ä–æ—Å–æ–≤ –∏ CTE"""
    query = """
    WITH customer_rfm_base AS (
        SELECT 
            c.customer_id,
            c.customer_name,
            c.city,
            -- Recency: –¥–Ω–∏ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–∫–∞–∑–∞
            COALESCE(
                julianday('now') - julianday(MAX(o.order_date)), 
                julianday('now') - julianday(c.registration_date)
            ) as recency_days,
            -- Frequency: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤
            COUNT(CASE WHEN o.status = '–í—ã–ø–æ–ª–Ω–µ–Ω' THEN o.order_id END) as frequency,
            -- Monetary: –æ–±—â–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–æ–≤
            COALESCE(SUM(CASE WHEN o.status = '–í—ã–ø–æ–ª–Ω–µ–Ω' THEN o.amount ELSE 0 END), 0) as monetary
        FROM customers c
        LEFT JOIN orders o ON c.customer_id = o.customer_id
        GROUP BY c.customer_id, c.customer_name, c.city, c.registration_date
    ),
    customer_rfm_scores AS (
        SELECT *,
            -- RFM —Å–∫–æ—Ä—ã (1-5, –≥–¥–µ 5 –ª—É—á—à–µ)
            CASE 
                WHEN recency_days <= 30 THEN 5
                WHEN recency_days <= 90 THEN 4
                WHEN recency_days <= 180 THEN 3
                WHEN recency_days <= 365 THEN 2
                ELSE 1
            END as r_score,
            CASE 
                WHEN frequency >= 8 THEN 5
                WHEN frequency >= 5 THEN 4
                WHEN frequency >= 3 THEN 3
                WHEN frequency >= 1 THEN 2
                ELSE 1
            END as f_score,
            CASE 
                WHEN monetary >= 20000 THEN 5
                WHEN monetary >= 10000 THEN 4
                WHEN monetary >= 5000 THEN 3
                WHEN monetary >= 1000 THEN 2
                ELSE 1
            END as m_score
        FROM customer_rfm_base
    ),
    customer_segments AS (
        SELECT *,
            -- –û–±—â–∏–π RFM —Å–µ–≥–º–µ–Ω—Ç
            CASE 
                WHEN r_score >= 4 AND f_score >= 4 AND m_score >= 4 THEN 'Champions'
                WHEN r_score >= 3 AND f_score >= 3 AND m_score >= 3 THEN 'Loyal Customers'
                WHEN r_score >= 4 AND f_score <= 2 THEN 'New Customers'
                WHEN r_score <= 2 AND f_score >= 3 AND m_score >= 3 THEN 'At Risk'
                WHEN r_score <= 2 AND f_score <= 2 THEN 'Lost'
                ELSE 'Others'
            END as rfm_segment
        FROM customer_rfm_scores
    )
    SELECT 
        customer_name,
        city,
        frequency,
        ROUND(monetary, 0) as monetary,
        ROUND(recency_days, 0) as recency_days,
        r_score,
        f_score,
        m_score,
        rfm_segment
    FROM customer_segments;
    """
    
    df = execute_sql_query(conn, query)
    
    # –ê–Ω–∞–ª–∏–∑ —Å–µ–≥–º–µ–Ω—Ç–æ–≤
    segment_analysis = df.groupby('rfm_segment').agg({
        'customer_name': 'count',
        'monetary': ['mean', 'sum'],
        'frequency': 'mean',
        'recency_days': 'mean'
    }).round(2)
    
    # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ–≥–º–µ–Ω—Ç–æ–≤
    plt.figure(figsize=(16, 12))
    
    # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Å–µ–≥–º–µ–Ω—Ç–∞–º
    plt.subplot(2, 3, 1)
    segment_counts = df['rfm_segment'].value_counts()
    colors = ['#FF6B6B', '#4ECDC4', '#45B7D1', '#96CEB4', '#FECA57', '#FF9FF3']
    plt.bar(segment_counts.index, segment_counts.values, color=colors[:len(segment_counts)])
    plt.title('üë• –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ —Å–µ–≥–º–µ–Ω—Ç–∞–º')
    plt.xlabel('RFM –°–µ–≥–º–µ–Ω—Ç')
    plt.ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∏–µ–Ω—Ç–æ–≤')
    plt.xticks(rotation=45)
    
    # Scatter plot R vs F, —Ü–≤–µ—Ç = M
    plt.subplot(2, 3, 2)
    scatter = plt.scatter(df['r_score'], df['f_score'], 
                         c=df['m_score'], cmap='viridis', alpha=0.6, s=50)
    plt.colorbar(scatter, label='Monetary Score')
    plt.title('üéØ RFM –°–∫–æ—Ä—ã: Recency vs Frequency')
    plt.xlabel('Recency Score')
    plt.ylabel('Frequency Score')
    
    # Boxplot –º–æ–Ω–µ—Ç–∞—Ä–Ω–æ–π —Ü–µ–Ω–Ω–æ—Å—Ç–∏ –ø–æ —Å–µ–≥–º–µ–Ω—Ç–∞–º
    plt.subplot(2, 3, 3)
    segments_for_box = df[df['monetary'] > 0]['rfm_segment'].unique()
    data_for_box = [df[df['rfm_segment'] == seg]['monetary'].values for seg in segments_for_box]
    plt.boxplot(data_for_box, labels=segments_for_box)
    plt.title('üí∞ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç—Ä–∞—Ç –ø–æ —Å–µ–≥–º–µ–Ω—Ç–∞–º')
    plt.xlabel('RFM –°–µ–≥–º–µ–Ω—Ç')
    plt.ylabel('–û–±—â–∏–µ —Ç—Ä–∞—Ç—ã (—Ä—É–±.)')
    plt.xticks(rotation=45)
    
    # –°—Ä–µ–¥–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –ø–æ —Å–µ–≥–º–µ–Ω—Ç–∞–º
    plt.subplot(2, 3, 4)
    segment_means = df.groupby('rfm_segment')[['recency_days', 'frequency', 'monetary']].mean()
    segment_means_norm = segment_means / segment_means.max()  # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
    
    x = np.arange(len(segment_means.index))
    width = 0.25
    plt.bar(x - width, segment_means_norm['recency_days'], width, label='Recency (–Ω–æ—Ä–º)', alpha=0.7)
    plt.bar(x, segment_means_norm['frequency'], width, label='Frequency (–Ω–æ—Ä–º)', alpha=0.7)
    plt.bar(x + width, segment_means_norm['monetary'], width, label='Monetary (–Ω–æ—Ä–º)', alpha=0.7)
    
    plt.title('üìä –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —Å—Ä–µ–¥–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏')
    plt.xlabel('RFM –°–µ–≥–º–µ–Ω—Ç')
    plt.ylabel('–ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è')
    plt.xticks(x, segment_means.index, rotation=45)
    plt.legend()
    
    # –ì–µ–æ–≥—Ä–∞—Ñ–∏—è —Å–µ–≥–º–µ–Ω—Ç–æ–≤
    plt.subplot(2, 3, 5)
    city_segments = pd.crosstab(df['city'], df['rfm_segment'])
    city_segments.plot(kind='bar', stacked=True, ax=plt.gca(), colormap='Set3')
    plt.title('üåç –ì–µ–æ–≥—Ä–∞—Ñ–∏—è RFM —Å–µ–≥–º–µ–Ω—Ç–æ–≤')
    plt.xlabel('–ì–æ—Ä–æ–¥')
    plt.ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∏–µ–Ω—Ç–æ–≤')
    plt.xticks(rotation=45)
    plt.legend(title='RFM –°–µ–≥–º–µ–Ω—Ç', bbox_to_anchor=(1.05, 1), loc='upper left')
    
    # –¢–∞–±–ª–∏—Ü–∞ –∫–ª—é—á–µ–≤—ã—Ö –º–µ—Ç—Ä–∏–∫
    plt.subplot(2, 3, 6)
    plt.axis('off')
    
    summary_text = "üìã –ö–õ–Æ–ß–ï–í–´–ï –ú–ï–¢–†–ò–ö–ò –ü–û –°–ï–ì–ú–ï–ù–¢–ê–ú\n\n"
    for segment in df['rfm_segment'].unique():
        seg_data = df[df['rfm_segment'] == segment]
        if len(seg_data) > 0:
            summary_text += f"{segment}:\n"
            summary_text += f"  üë• –ö–ª–∏–µ–Ω—Ç–æ–≤: {len(seg_data)}\n"
            summary_text += f"  üí∞ –°—Ä. —Ç—Ä–∞—Ç–∞: {seg_data['monetary'].mean():.0f} —Ä—É–±.\n"
            summary_text += f"  üì¶ –°—Ä. –∑–∞–∫–∞–∑–æ–≤: {seg_data['frequency'].mean():.1f}\n"
            summary_text += f"  ‚è∞ –î–Ω–µ–π —Å –∑–∞–∫–∞–∑–∞: {seg_data['recency_days'].mean():.0f}\n\n"
    
    plt.text(0.1, 0.9, summary_text, fontsize=10, verticalalignment='top', 
             transform=plt.gca().transAxes,
             bbox=dict(boxstyle="round,pad=0.3", facecolor="lightblue", alpha=0.7))
    
    plt.tight_layout()
    plt.savefig('customer_segmentation.png', dpi=300, bbox_inches='tight')
    plt.show()
    
    return df, segment_analysis

def complex_join_analysis(conn):
    """–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö JOIN"""
    query = """
    WITH product_performance AS (
        SELECT 
            p.product_id,
            p.product_name,
            c.category_name,
            p.brand,
            COUNT(DISTINCT od.order_id) as times_ordered,
            SUM(od.quantity) as total_quantity_sold,
            SUM(od.quantity * od.unit_price * (1 - od.discount/100)) as total_revenue,
            AVG(od.unit_price) as avg_selling_price,
            p.price as catalog_price,
            p.stock_quantity
        FROM products p
        LEFT JOIN categories c ON p.category_id = c.category_id
        LEFT JOIN order_details od ON p.product_id = od.product_id
        LEFT JOIN orders o ON od.order_id = o.order_id
        WHERE o.status = '–í—ã–ø–æ–ª–Ω–µ–Ω' OR o.status IS NULL
        GROUP BY p.product_id, p.product_name, c.category_name, p.brand, p.price, p.stock_quantity
    ),
    category_totals AS (
        SELECT 
            category_name,
            SUM(total_revenue) as category_revenue
        FROM product_performance
        WHERE total_revenue > 0
        GROUP BY category_name
    )
    SELECT 
        pp.product_name,
        pp.category_name,
        pp.brand,
        COALESCE(pp.times_ordered, 0) as times_ordered,
        COALESCE(pp.total_quantity_sold, 0) as total_quantity_sold,
        COALESCE(pp.total_revenue, 0) as total_revenue,
        COALESCE(pp.avg_selling_price, pp.catalog_price) as avg_selling_price,
        pp.catalog_price,
        pp.stock_quantity,
        -- –î–æ–ª—è –≤ –≤—ã—Ä—É—á–∫–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        CASE 
            WHEN pp.total_revenue > 0 AND ct.category_revenue > 0 
            THEN ROUND(pp.total_revenue * 100.0 / ct.category_revenue, 2)
            ELSE 0
        END as category_share_percent,
        -- –°—Ç–∞—Ç—É—Å —Ç–æ–≤–∞—Ä–∞
        CASE 
            WHEN pp.total_revenue = 0 THEN '–ù–µ –ø—Ä–æ–¥–∞–≤–∞–ª—Å—è'
            WHEN pp.total_revenue >= (
                SELECT AVG(total_revenue) * 1.5 
                FROM product_performance 
                WHERE total_revenue > 0
            ) THEN '–•–∏—Ç –ø—Ä–æ–¥–∞–∂'
            WHEN pp.total_revenue >= (
                SELECT AVG(total_revenue) 
                FROM product_performance 
                WHERE total_revenue > 0
            ) THEN '–ü–æ–ø—É–ª—è—Ä–Ω—ã–π'
            ELSE '–û–±—ã—á–Ω—ã–π'
        END as product_status
    FROM product_performance pp
    LEFT JOIN category_totals ct ON pp.category_name = ct.category_name
    ORDER BY pp.total_revenue DESC;
    """
    
    df = execute_sql_query(conn, query)
    
    # –ê–Ω–∞–ª–∏–∑ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    category_analysis = df.groupby('category_name').agg({
        'product_name': 'count',
        'total_revenue': 'sum',
        'total_quantity_sold': 'sum',
        'times_ordered': 'sum'
    }).round(2)
    
    print("\nüìä –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ç–æ–≤–∞—Ä–æ–≤:")
    print("="*60)
    print(f"–í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(df)}")
    print(f"–¢–æ–≤–∞—Ä–æ–≤ —Å –ø—Ä–æ–¥–∞–∂–∞–º–∏: {len(df[df['total_revenue'] > 0])}")
    print(f"–¢–æ–≤–∞—Ä–æ–≤ –±–µ–∑ –ø—Ä–æ–¥–∞–∂: {len(df[df['total_revenue'] == 0])}")
    
    print("\nüèÜ –¢–æ–ø-5 —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –≤—ã—Ä—É—á–∫–µ:")
    top_products = df[df['total_revenue'] > 0].head(5)
    for idx, row in top_products.iterrows():
        print(f"  {row['product_name']} ({row['category_name']}) - {row['total_revenue']:.2f} —Ä—É–±.")
    
    return df, category_analysis

def demonstrate_advanced_sql_techniques(conn):
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö SQL —Ç–µ—Ö–Ω–∏–∫"""
    
    # 1. –ö–æ—Ä—Ä–µ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–¥–∑–∞–ø—Ä–æ—Å—ã
    correlated_query = """
    SELECT 
        c.customer_name,
        c.city,
        o.order_date,
        o.amount,
        -- –ü–æ–¥–∑–∞–ø—Ä–æ—Å: —Å—Ä–µ–¥–Ω–∏–π —á–µ–∫ –∫–ª–∏–µ–Ω—Ç–∞
        (SELECT AVG(o2.amount) 
         FROM orders o2 
         WHERE o2.customer_id = c.customer_id 
           AND o2.status = '–í—ã–ø–æ–ª–Ω–µ–Ω') as customer_avg_order,
        -- –ü–æ–¥–∑–∞–ø—Ä–æ—Å: —Ä–∞–Ω–≥ –∑–∞–∫–∞–∑–∞ —Å—Ä–µ–¥–∏ –∑–∞–∫–∞–∑–æ–≤ –∫–ª–∏–µ–Ω—Ç–∞
        (SELECT COUNT(*) + 1 
         FROM orders o3 
         WHERE o3.customer_id = c.customer_id 
           AND o3.amount > o.amount 
           AND o3.status = '–í—ã–ø–æ–ª–Ω–µ–Ω') as order_rank_for_customer
    FROM customers c
    JOIN orders o ON c.customer_id = o.customer_id
    WHERE o.status = '–í—ã–ø–æ–ª–Ω–µ–Ω'
      AND o.amount > (
          SELECT AVG(o4.amount) 
          FROM orders o4 
          WHERE o4.customer_id = c.customer_id 
            AND o4.status = '–í—ã–ø–æ–ª–Ω–µ–Ω'
      )
    ORDER BY c.customer_name, o.order_date;
    """
    
    correlated_df = execute_sql_query(conn, correlated_query)
    
    # 2. –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π CTE –¥–ª—è –∏–µ—Ä–∞—Ä—Ö–∏–∏ (–∏–º–∏—Ç–∞—Ü–∏—è)
    hierarchy_query = """
    WITH RECURSIVE date_series AS (
        -- –ë–∞–∑–æ–≤—ã–π —Å–ª—É—á–∞–π: –Ω–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞
        SELECT DATE('2023-01-01') as analysis_date, 0 as days_offset
        
        UNION ALL
        
        -- –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π —Å–ª—É—á–∞–π: –¥–æ–±–∞–≤–ª—è–µ–º –¥–Ω–∏
        SELECT 
            DATE(analysis_date, '+7 day'),
            days_offset + 7
        FROM date_series
        WHERE days_offset < 365
    ),
    weekly_sales AS (
        SELECT 
            ds.analysis_date,
            ds.days_offset,
            COALESCE(SUM(o.amount), 0) as weekly_sales,
            COUNT(o.order_id) as weekly_orders
        FROM date_series ds
        LEFT JOIN orders o ON DATE(o.order_date) = ds.analysis_date
                           AND o.status = '–í—ã–ø–æ–ª–Ω–µ–Ω'
        GROUP BY ds.analysis_date, ds.days_offset
    )
    SELECT 
        analysis_date,
        weekly_sales,
        weekly_orders,
        SUM(weekly_sales) OVER (ORDER BY analysis_date) as cumulative_sales,
        AVG(weekly_sales) OVER (
            ORDER BY analysis_date 
            ROWS BETWEEN 3 PRECEDING AND CURRENT ROW
        ) as moving_avg_4weeks
    FROM weekly_sales
    ORDER BY analysis_date;
    """
    
    hierarchy_df = execute_sql_query(conn, hierarchy_query)
    
    # 3. –°–ª–æ–∂–Ω—ã–π CTE —Å EXISTS
    complex_cte_query = """
    WITH high_value_customers AS (
        SELECT customer_id, SUM(amount) as total_spent
        FROM orders
        WHERE status = '–í—ã–ø–æ–ª–Ω–µ–Ω'
        GROUP BY customer_id
        HAVING SUM(amount) >= 5000
    ),
    multi_category_customers AS (
        SELECT DISTINCT o.customer_id
        FROM orders o
        JOIN order_details od ON o.order_id = od.order_id
        JOIN products p ON od.product_id = p.product_id
        WHERE o.status = '–í—ã–ø–æ–ª–Ω–µ–Ω'
        GROUP BY o.customer_id
        HAVING COUNT(DISTINCT p.category_id) >= 3
    ),
    customer_analytics AS (
        SELECT 
            c.customer_name,
            c.city,
            hvc.total_spent,
            CASE WHEN mcc.customer_id IS NOT NULL THEN '–î–∞' ELSE '–ù–µ—Ç' END as multi_category_buyer,
            -- –ü–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–∫–∞–∑
            (SELECT MAX(order_date) 
             FROM orders 
             WHERE customer_id = c.customer_id 
               AND status = '–í—ã–ø–æ–ª–Ω–µ–Ω') as last_order_date,
            -- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
            (SELECT COUNT(DISTINCT p.category_id)
             FROM orders o
             JOIN order_details od ON o.order_id = od.order_id  
             JOIN products p ON od.product_id = p.product_id
             WHERE o.customer_id = c.customer_id 
               AND o.status = '–í—ã–ø–æ–ª–Ω–µ–Ω') as categories_purchased
        FROM customers c
        JOIN high_value_customers hvc ON c.customer_id = hvc.customer_id
        LEFT JOIN multi_category_customers mcc ON c.customer_id = mcc.customer_id
        WHERE EXISTS (
            SELECT 1 FROM orders 
            WHERE customer_id = c.customer_id 
              AND order_date >= DATE('now', '-6 months')
              AND status = '–í—ã–ø–æ–ª–Ω–µ–Ω'
        )
    )
    SELECT * FROM customer_analytics
    ORDER BY total_spent DESC;
    """
    
    complex_df = execute_sql_query(conn, complex_cte_query)
    
    print("\nüîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö SQL —Ç–µ—Ö–Ω–∏–∫:")
    print("="*50)
    print(f"1. –ö–æ—Ä—Ä–µ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–¥–∑–∞–ø—Ä–æ—Å—ã: {len(correlated_df)} –∑–∞–ø–∏—Å–µ–π")
    print(f"2. –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π CTE (–≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ä—è–¥): {len(hierarchy_df)} –Ω–µ–¥–µ–ª—å")
    print(f"3. –°–ª–æ–∂–Ω—ã–π CTE —Å EXISTS: {len(complex_df)} VIP –∫–ª–∏–µ–Ω—Ç–æ–≤")
    
    return correlated_df, hierarchy_df, complex_df

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö –∞–Ω–∞–ª–∏–∑–æ–≤"""
    print("üöÄ –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ SQL + Python")
    print("="*60)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    conn = create_database_from_csv()
    
    try:
        # 1. –ê–Ω–∞–ª–∏–∑ –º–µ—Å—è—á–Ω—ã—Ö –ø—Ä–æ–¥–∞–∂
        print("\nüìà 1. –ê–Ω–∞–ª–∏–∑ –º–µ—Å—è—á–Ω—ã—Ö –ø—Ä–æ–¥–∞–∂...")
        monthly_df = monthly_sales_analysis(conn)
        print(f"   ‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(monthly_df)} –º–µ—Å—è—Ü–µ–≤")
        
        # 2. RFM —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤
        print("\nüéØ 2. RFM —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤...")
        rfm_df, segment_stats = customer_segmentation_analysis(conn)
        print(f"   ‚úÖ –°–µ–≥–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ {len(rfm_df)} –∫–ª–∏–µ–Ω—Ç–æ–≤")
        print(f"   üìä –ù–∞–π–¥–µ–Ω–æ {rfm_df['rfm_segment'].nunique()} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–µ–≥–º–µ–Ω—Ç–æ–≤")
        
        # 3. –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ç–æ–≤–∞—Ä–æ–≤
        print("\nüõçÔ∏è 3. –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ç–æ–≤–∞—Ä–æ–≤...")
        products_df, category_stats = complex_join_analysis(conn)
        print(f"   ‚úÖ –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {len(products_df)} —Ç–æ–≤–∞—Ä–æ–≤")
        
        # 4. –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö —Ç–µ—Ö–Ω–∏–∫
        print("\nüéì 4. –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö SQL —Ç–µ—Ö–Ω–∏–∫...")
        corr_df, hier_df, complex_df = demonstrate_advanced_sql_techniques(conn)
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        monthly_df.to_csv('monthly_sales_results.csv', index=False, sep=';')
        rfm_df.to_csv('customer_rfm_segments.csv', index=False, sep=';')
        products_df.to_csv('product_performance_analysis.csv', index=False, sep=';')
        
        print(f"\nüìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ CSV —Ñ–∞–π–ª—ã:")
        print(f"   ‚Ä¢ monthly_sales_results.csv")
        print(f"   ‚Ä¢ customer_rfm_segments.csv")  
        print(f"   ‚Ä¢ product_performance_analysis.csv")
        print(f"   ‚Ä¢ monthly_sales_analysis.png")
        print(f"   ‚Ä¢ customer_segmentation.png")
        
        print(f"\nüéâ –ê–Ω–∞–ª–∏–∑ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à—ë–Ω!")
        print(f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ:")
        print(f"   ‚Ä¢ {len(monthly_df)} –º–µ—Å—è—Ü–µ–≤ –ø—Ä–æ–¥–∞–∂")
        print(f"   ‚Ä¢ {len(rfm_df)} –∫–ª–∏–µ–Ω—Ç–æ–≤")
        print(f"   ‚Ä¢ {len(products_df)} —Ç–æ–≤–∞—Ä–æ–≤")
        print(f"   ‚Ä¢ –°–æ–∑–¥–∞–Ω–æ 2 –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞—à–±–æ—Ä–¥–∞")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∞–Ω–∞–ª–∏–∑–∞: {e}")
    
    finally:
        conn.close()

if __name__ == "__main__":
    main()