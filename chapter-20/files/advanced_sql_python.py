import sqlite3
import pandas as pd
import numpy as np
from datetime import datetime, timedelta

def create_sample_database():
    """–°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–º–∏ –ø—Ä–∏–º–µ—Ä–∞–º–∏"""
    conn = sqlite3.connect('advanced_sales_data.db')
    cursor = conn.cursor()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü
    cursor.execute("""
    CREATE TABLE IF NOT EXISTS customers (
        customer_id INTEGER PRIMARY KEY,
        customer_name TEXT NOT NULL,
        city TEXT NOT NULL,
        registration_date DATE,
        customer_segment TEXT,
        lifetime_value DECIMAL(10,2) DEFAULT 0
    );
    """)
    
    cursor.execute("""
    CREATE TABLE IF NOT EXISTS orders (
        order_id INTEGER PRIMARY KEY,
        customer_id INTEGER,
        order_date DATE NOT NULL,
        amount DECIMAL(10,2) NOT NULL,
        status TEXT DEFAULT '–í—ã–ø–æ–ª–Ω–µ–Ω',
        channel TEXT DEFAULT 'Online',
        FOREIGN KEY (customer_id) REFERENCES customers (customer_id)
    );
    """)
    
    cursor.execute("""
    CREATE TABLE IF NOT EXISTS products (
        product_id INTEGER PRIMARY KEY,
        product_name TEXT NOT NULL,
        category_id INTEGER,
        price DECIMAL(10,2) NOT NULL,
        cost DECIMAL(10,2) NOT NULL,
        margin_percent DECIMAL(5,2),
        stock_quantity INTEGER DEFAULT 0
    );
    """)
    
    # –í—Å—Ç–∞–≤–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö –¥–µ–º–æ-–¥–∞–Ω–Ω—ã—Ö
    cursor.execute("SELECT COUNT(*) FROM customers")
    if cursor.fetchone()[0] == 0:
        print("üìù –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
        
        # –ö–ª–∏–µ–Ω—Ç—ã —Å —Ä–∞–∑–Ω—ã–º–∏ —Å–µ–≥–º–µ–Ω—Ç–∞–º–∏
        customers_data = [
            (1, '–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤', '–ú–æ—Å–∫–≤–∞', '2023-01-15', 'VIP', 50000.00),
            (2, '–ú–∞—Ä–∏—è –°–∏–¥–æ—Ä–æ–≤–∞', '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥', '2023-02-20', 'Premium', 25000.00),
            (3, '–ê–ª–µ–∫—Å–µ–π –ö–æ–∑–ª–æ–≤', '–ú–æ—Å–∫–≤–∞', '2023-03-10', 'Regular', 15000.00),
            (4, '–ï–ª–µ–Ω–∞ –ú–æ—Ä–æ–∑–æ–≤–∞', '–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥', '2023-04-05', 'VIP', 45000.00),
            (5, '–î–º–∏—Ç—Ä–∏–π –í–æ–ª–∫–æ–≤', '–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫', '2023-05-12', 'New', 5000.00),
            (6, '–ê–Ω–Ω–∞ –õ–µ–±–µ–¥–µ–≤–∞', '–ú–æ—Å–∫–≤–∞', '2023-06-18', 'Premium', 30000.00),
            (7, '–°–µ—Ä–≥–µ–π –ù–æ–≤–∏–∫–æ–≤', '–ö–∞–∑–∞–Ω—å', '2023-07-22', 'Regular', 12000.00),
            (8, '–û–ª—å–≥–∞ –§–µ–¥–æ—Ä–æ–≤–∞', '–°–∞–º–∞—Ä–∞', '2023-08-30', 'At Risk', 8000.00)
        ]
        cursor.executemany(
            "INSERT INTO customers VALUES (?, ?, ?, ?, ?, ?)",
            customers_data
        )
        
        # –ó–∞–∫–∞–∑—ã —Å —Ä–∞–∑–Ω—ã–º–∏ –∫–∞–Ω–∞–ª–∞–º–∏ –∏ —Å—Ç–∞—Ç—É—Å–∞–º–∏
        orders_data = [
            (1, 1, '2023-02-01', 1500.50, '–í—ã–ø–æ–ª–Ω–µ–Ω', 'Online'),
            (2, 1, '2023-03-15', 2300.75, '–í—ã–ø–æ–ª–Ω–µ–Ω', 'Mobile'),
            (3, 2, '2023-03-01', 980.25, '–í—ã–ø–æ–ª–Ω–µ–Ω', 'Online'),
            (4, 3, '2023-04-10', 3200.00, '–í—ã–ø–æ–ª–Ω–µ–Ω', 'Store'),
            (5, 1, '2023-04-20', 1800.30, '–í –æ–±—Ä–∞–±–æ—Ç–∫–µ', 'Online'),
            (6, 4, '2023-05-05', 4500.80, '–í—ã–ø–æ–ª–Ω–µ–Ω', 'Online'),
            (7, 2, '2023-05-15', 1200.90, '–û—Ç–º–µ–Ω—ë–Ω', 'Mobile'),
            (8, 5, '2023-06-01', 2800.45, '–í—ã–ø–æ–ª–Ω–µ–Ω', 'Store'),
            (9, 6, '2023-06-15', 5200.00, '–í—ã–ø–æ–ª–Ω–µ–Ω', 'Online'),
            (10, 3, '2023-07-01', 1750.25, '–í—ã–ø–æ–ª–Ω–µ–Ω', 'Mobile'),
            (11, 7, '2023-07-20', 890.50, '–í—ã–ø–æ–ª–Ω–µ–Ω', 'Store'),
            (12, 4, '2023-08-10', 3800.75, '–í—ã–ø–æ–ª–Ω–µ–Ω', 'Online'),
            (13, 8, '2023-09-05', 650.30, '–í—ã–ø–æ–ª–Ω–µ–Ω', 'Mobile'),
            (14, 1, '2023-09-20', 2100.00, '–í—ã–ø–æ–ª–Ω–µ–Ω', 'Online'),
            (15, 6, '2023-10-15', 4200.80, '–í—ã–ø–æ–ª–Ω–µ–Ω', 'Store')
        ]
        cursor.executemany(
            "INSERT INTO orders VALUES (?, ?, ?, ?, ?, ?)",
            orders_data
        )
        
        # –¢–æ–≤–∞—Ä—ã —Å –º–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é
        products_data = [
            (1, 'iPhone 14 Pro', 1, 79990.00, 65000.00, 18.75, 25),
            (2, 'MacBook Air M2', 1, 109990.00, 88000.00, 19.99, 15),
            (3, 'AirPods Pro', 1, 24990.00, 18000.00, 27.99, 50),
            (4, 'Nike Air Max', 2, 8990.00, 6500.00, 27.70, 30),
            (5, 'Adidas Ultraboost', 2, 12990.00, 9200.00, 29.18, 25),
            (6, 'Dyson V15', 3, 45990.00, 32000.00, 30.41, 10),
            (7, 'KitchenAid Mixer', 3, 35990.00, 25000.00, 30.53, 8)
        ]
        cursor.executemany(
            "INSERT INTO products VALUES (?, ?, ?, ?, ?, ?, ?)",
            products_data
        )
    
    conn.commit()
    return conn

def demonstrate_advanced_cte_techniques(conn):
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö CTE —Ç–µ—Ö–Ω–∏–∫"""
    
    print("üèóÔ∏è –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö CTE —Ç–µ—Ö–Ω–∏–∫")
    print("="*50)
    
    # 1. –ö–∞—Å–∫–∞–¥–Ω—ã–µ CTE —Å –æ–∫–æ–Ω–Ω—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏
    cascade_query = """
    WITH customer_base AS (
        -- –ë–∞–∑–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤
        SELECT 
            c.customer_id,
            c.customer_name,
            c.city,
            c.customer_segment,
            COUNT(o.order_id) as total_orders,
            COALESCE(SUM(o.amount), 0) as total_spent,
            COALESCE(AVG(o.amount), 0) as avg_order_value,
            MAX(o.order_date) as last_order_date
        FROM customers c
        LEFT JOIN orders o ON c.customer_id = o.customer_id
        WHERE o.status = '–í—ã–ø–æ–ª–Ω–µ–Ω' OR o.status IS NULL
        GROUP BY c.customer_id, c.customer_name, c.city, c.customer_segment
    ),
    customer_rankings AS (
        -- –†–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–æ–≤
        SELECT 
            *,
            ROW_NUMBER() OVER (ORDER BY total_spent DESC) as spending_rank,
            ROW_NUMBER() OVER (PARTITION BY city ORDER BY total_spent DESC) as city_rank,
            NTILE(4) OVER (ORDER BY total_spent) as spending_quartile,
            PERCENT_RANK() OVER (ORDER BY total_spent) as spending_percentile
        FROM customer_base
    ),
    customer_analytics AS (
        -- –ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è
        SELECT 
            *,
            -- –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å–æ —Å—Ä–µ–¥–Ω–∏–º–∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è–º–∏
            total_spent - AVG(total_spent) OVER () as vs_avg_spending,
            total_orders - AVG(total_orders) OVER () as vs_avg_orders,
            -- –°–∫–æ–ª—å–∑—è—â–∏–µ –æ–∫–Ω–∞ –ø–æ —Ä–∞–Ω–≥—É
            AVG(total_spent) OVER (
                ORDER BY spending_rank 
                ROWS BETWEEN 2 PRECEDING AND 2 FOLLOWING
            ) as peer_avg_spending,
            -- –ö—É–º—É–ª—è—Ç–∏–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
            SUM(total_spent) OVER (ORDER BY spending_rank) as cumulative_revenue_contribution,
            SUM(total_spent) OVER (ORDER BY spending_rank) * 100.0 / 
            SUM(total_spent) OVER () as cumulative_revenue_percent
        FROM customer_rankings
    )
    SELECT 
        customer_name,
        city,
        customer_segment,
        total_spent,
        spending_rank,
        city_rank,
        spending_quartile,
        ROUND(spending_percentile * 100, 1) as percentile,
        ROUND(vs_avg_spending, 2) as vs_avg,
        ROUND(peer_avg_spending, 2) as peer_avg,
        ROUND(cumulative_revenue_percent, 2) as cum_revenue_pct
    FROM customer_analytics
    ORDER BY spending_rank;
    """
    
    cascade_df = pd.read_sql_query(cascade_query, conn)
    print(f"‚úÖ –ö–∞—Å–∫–∞–¥–Ω—ã–µ CTE: –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(cascade_df)} –∫–ª–∏–µ–Ω—Ç–æ–≤")
    
    # 2. –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π CTE –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    recursive_query = """
    WITH RECURSIVE monthly_sequence AS (
        -- –ë–∞–∑–æ–≤—ã–π —Å–ª—É—á–∞–π: –ø–µ—Ä–≤—ã–π –º–µ—Å—è—Ü —Å –¥–∞–Ω–Ω—ã–º–∏
        SELECT 
            DATE('2023-01-01') as month_start,
            DATE('2023-01-31') as month_end,
            1 as month_number
        
        UNION ALL
        
        -- –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π —Å–ª—É—á–∞–π: —Å–ª–µ–¥—É—é—â–∏–µ –º–µ—Å—è—Ü—ã
        SELECT 
            DATE(month_start, '+1 month'),
            DATE(DATE(month_start, '+1 month'), '+1 month', '-1 day'),
            month_number + 1
        FROM monthly_sequence
        WHERE month_number < 12
    ),
    monthly_metrics AS (
        SELECT 
            ms.month_start,
            ms.month_number,
            COUNT(o.order_id) as orders_count,
            COALESCE(SUM(o.amount), 0) as monthly_revenue,
            COUNT(DISTINCT o.customer_id) as active_customers
        FROM monthly_sequence ms
        LEFT JOIN orders o ON DATE(o.order_date, 'start of month') = ms.month_start
                            AND o.status = '–í—ã–ø–æ–ª–Ω–µ–Ω'
        GROUP BY ms.month_start, ms.month_number
    ),
    cumulative_metrics AS (
        SELECT 
            *,
            SUM(monthly_revenue) OVER (ORDER BY month_number) as ytd_revenue,
            AVG(monthly_revenue) OVER (
                ORDER BY month_number 
                ROWS BETWEEN 2 PRECEDING AND CURRENT ROW
            ) as ma_3_months,
            monthly_revenue - LAG(monthly_revenue) OVER (ORDER BY month_number) as mom_change,
            CASE 
                WHEN LAG(monthly_revenue) OVER (ORDER BY month_number) > 0 
                THEN (monthly_revenue - LAG(monthly_revenue) OVER (ORDER BY month_number)) * 100.0 / 
                     LAG(monthly_revenue) OVER (ORDER BY month_number)
                ELSE NULL
            END as mom_growth_percent
        FROM monthly_metrics
    )
    SELECT 
        strftime('%Y-%m', month_start) as month,
        orders_count,
        ROUND(monthly_revenue, 2) as revenue,
        active_customers,
        ROUND(ytd_revenue, 2) as ytd_revenue,
        ROUND(ma_3_months, 2) as ma_3_months,
        ROUND(mom_change, 2) as mom_change,
        ROUND(mom_growth_percent, 2) as mom_growth_pct
    FROM cumulative_metrics
    ORDER BY month_number;
    """
    
    recursive_df = pd.read_sql_query(recursive_query, conn)
    print(f"‚úÖ –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π CTE: —Å–æ–∑–¥–∞–Ω–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏–∑ {len(recursive_df)} –º–µ—Å—è—Ü–µ–≤")
    
    return cascade_df, recursive_df

def demonstrate_complex_subqueries(conn):
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–ª–æ–∂–Ω—ã—Ö –ø–æ–¥–∑–∞–ø—Ä–æ—Å–æ–≤"""
    
    print("\nüîç –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–ª–æ–∂–Ω—ã—Ö –ø–æ–¥–∑–∞–ø—Ä–æ—Å–æ–≤")
    print("="*50)
    
    # 1. –ú–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤—ã–µ –∫–æ—Ä—Ä–µ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–¥–∑–∞–ø—Ä–æ—Å—ã
    complex_subquery = """
    SELECT 
        o1.order_id,
        o1.customer_id,
        c.customer_name,
        o1.order_date,
        o1.amount,
        
        -- –ü–æ–¥–∑–∞–ø—Ä–æ—Å: –ø–æ–∑–∏—Ü–∏—è –∑–∞–∫–∞–∑–∞ —Å—Ä–µ–¥–∏ –∑–∞–∫–∞–∑–æ–≤ –∫–ª–∏–µ–Ω—Ç–∞
        (SELECT COUNT(*) + 1 
         FROM orders o2 
         WHERE o2.customer_id = o1.customer_id 
           AND o2.amount > o1.amount 
           AND o2.status = '–í—ã–ø–æ–ª–Ω–µ–Ω') as order_rank_for_customer,
        
        -- –ü–æ–¥–∑–∞–ø—Ä–æ—Å: –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–æ–≤ –∫–ª–∏–µ–Ω—Ç–∞ –Ω–∞ –¥–∞—Ç—É
        (SELECT SUM(o3.amount) 
         FROM orders o3 
         WHERE o3.customer_id = o1.customer_id 
           AND o3.order_date <= o1.order_date 
           AND o3.status = '–í—ã–ø–æ–ª–Ω–µ–Ω') as cumulative_spent_to_date,
        
        -- –ü–æ–¥–∑–∞–ø—Ä–æ—Å: —Å—Ä–µ–¥–Ω–∏–π —á–µ–∫ –∫–ª–∏–µ–Ω—Ç–∞ –¥–æ —ç—Ç–æ–≥–æ –∑–∞–∫–∞–∑–∞
        (SELECT AVG(o4.amount) 
         FROM orders o4 
         WHERE o4.customer_id = o1.customer_id 
           AND o4.order_date < o1.order_date 
           AND o4.status = '–í—ã–ø–æ–ª–Ω–µ–Ω') as avg_previous_orders,
        
        -- –ü–æ–¥–∑–∞–ø—Ä–æ—Å: –¥–Ω–µ–π —Å –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∑–∞–∫–∞–∑–∞
        (SELECT MIN(julianday(o1.order_date) - julianday(o5.order_date))
         FROM orders o5 
         WHERE o5.customer_id = o1.customer_id 
           AND o5.order_date < o1.order_date 
           AND o5.status = '–í—ã–ø–æ–ª–Ω–µ–Ω') as days_since_previous_order,
        
        -- –ü–æ–¥–∑–∞–ø—Ä–æ—Å: —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –≥–æ—Ä–æ–¥—Å–∫–∏–º —Å—Ä–µ–¥–Ω–∏–º
        CASE 
            WHEN o1.amount > (
                SELECT AVG(ord.amount) 
                FROM orders ord 
                JOIN customers cust ON ord.customer_id = cust.customer_id 
                WHERE cust.city = c.city 
                  AND ord.status = '–í—ã–ø–æ–ª–Ω–µ–Ω'
            ) THEN '–í—ã—à–µ —Å—Ä–µ–¥–Ω–µ–≥–æ –ø–æ –≥–æ—Ä–æ–¥—É'
            ELSE '–ù–∏–∂–µ —Å—Ä–µ–¥–Ω–µ–≥–æ –ø–æ –≥–æ—Ä–æ–¥—É'
        END as vs_city_average
    FROM orders o1
    JOIN customers c ON o1.customer_id = c.customer_id
    WHERE o1.status = '–í—ã–ø–æ–ª–Ω–µ–Ω'
      AND EXISTS (
          -- –ü–æ–¥–∑–∞–ø—Ä–æ—Å: —Ç–æ–ª—å–∫–æ –∫–ª–∏–µ–Ω—Ç—ã —Å –±–æ–ª–µ–µ —á–µ–º –æ–¥–Ω–∏–º –∑–∞–∫–∞–∑–æ–º
          SELECT 1 
          FROM orders o_check 
          WHERE o_check.customer_id = o1.customer_id 
            AND o_check.status = '–í—ã–ø–æ–ª–Ω–µ–Ω' 
          GROUP BY o_check.customer_id 
          HAVING COUNT(*) > 1
      )
    ORDER BY o1.customer_id, o1.order_date;
    """
    
    subquery_df = pd.read_sql_query(complex_subquery, conn)
    print(f"‚úÖ –°–ª–æ–∂–Ω—ã–µ –ø–æ–¥–∑–∞–ø—Ä–æ—Å—ã: –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {len(subquery_df)} –∑–∞–∫–∞–∑–æ–≤")
    
    # 2. –ü–æ–¥–∑–∞–ø—Ä–æ—Å—ã —Å ANY/ALL
    any_all_query = """
    SELECT 
        c.customer_name,
        c.city,
        c.customer_segment,
        -- –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –∑–∞–∫–∞–∑ –∫–ª–∏–µ–Ω—Ç–∞
        (SELECT MAX(amount) FROM orders WHERE customer_id = c.customer_id AND status = '–í—ã–ø–æ–ª–Ω–µ–Ω') as max_order,
        
        -- –ü—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å—Ç—å –ª–∏ –∑–∞–∫–∞–∑ –±–æ–ª—å—à–µ —á–µ–º ANY –∑–∞–∫–∞–∑ VIP –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏–∑ –¥—Ä—É–≥–∏—Ö –≥–æ—Ä–æ–¥–æ–≤
        CASE 
            WHEN (SELECT MAX(amount) FROM orders WHERE customer_id = c.customer_id AND status = '–í—ã–ø–æ–ª–Ω–µ–Ω') > ANY (
                SELECT o.amount 
                FROM orders o 
                JOIN customers c2 ON o.customer_id = c2.customer_id 
                WHERE c2.customer_segment = 'VIP' 
                  AND c2.city != c.city 
                  AND o.status = '–í—ã–ø–æ–ª–Ω–µ–Ω'
            ) THEN '–ü—Ä–µ–≤—ã—à–∞–µ—Ç –∑–∞–∫–∞–∑—ã –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö VIP'
            ELSE '–ù–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –∑–∞–∫–∞–∑—ã VIP'
        END as vs_vip_any,
        
        -- –ü—Ä–æ–≤–µ—Ä–∫–∞: –±–æ–ª—å—à–µ –ª–∏ —Å—Ä–µ–¥–Ω–∏–π —á–µ–∫ —á–µ–º ALL –∑–∞–∫–∞–∑—ã New —Å–µ–≥–º–µ–Ω—Ç–∞
        CASE 
            WHEN (SELECT AVG(amount) FROM orders WHERE customer_id = c.customer_id AND status = '–í—ã–ø–æ–ª–Ω–µ–Ω') > ALL (
                SELECT o.amount 
                FROM orders o 
                JOIN customers c2 ON o.customer_id = c2.customer_id 
                WHERE c2.customer_segment = 'New' 
                  AND o.status = '–í—ã–ø–æ–ª–Ω–µ–Ω'
            ) THEN '–°—Ä–µ–¥–Ω–∏–π —á–µ–∫ –≤—ã—à–µ –≤—Å–µ—Ö New –∫–ª–∏–µ–Ω—Ç–æ–≤'
            ELSE '–°—Ä–µ–¥–Ω–∏–π —á–µ–∫ –Ω–µ –≤—ã—à–µ –≤—Å–µ—Ö New –∫–ª–∏–µ–Ω—Ç–æ–≤'
        END as vs_new_all
    FROM customers c
    WHERE EXISTS (
        SELECT 1 FROM orders WHERE customer_id = c.customer_id AND status = '–í—ã–ø–æ–ª–Ω–µ–Ω'
    )
    ORDER BY c.customer_segment, c.customer_name;
    """
    
    any_all_df = pd.read_sql_query(any_all_query, conn)
    print(f"‚úÖ ANY/ALL –ø–æ–¥–∑–∞–ø—Ä–æ—Å—ã: –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {len(any_all_df)} –∫–ª–∏–µ–Ω—Ç–æ–≤")
    
    return subquery_df, any_all_df

def demonstrate_advanced_joins(conn):
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö JOIN —Ç–µ—Ö–Ω–∏–∫"""
    
    print("\nüîó –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö JOIN —Ç–µ—Ö–Ω–∏–∫")  
    print("="*50)
    
    # 1. Self JOIN –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å—Ä–∞–≤–Ω–µ–Ω–∏–π
    self_join_query = """
    SELECT 
        o1.order_id as current_order,
        o1.customer_id,
        c.customer_name,
        o1.order_date as current_date,
        o1.amount as current_amount,
        o2.order_id as previous_order,
        o2.order_date as previous_date,
        o2.amount as previous_amount,
        o1.amount - o2.amount as amount_change,
        julianday(o1.order_date) - julianday(o2.order_date) as days_between_orders,
        CASE 
            WHEN o1.amount > o2.amount THEN '–£–≤–µ–ª–∏—á–µ–Ω–∏–µ'
            WHEN o1.amount < o2.amount THEN '–£–º–µ–Ω—å—à–µ–Ω–∏–µ'
            ELSE '–ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π'
        END as trend
    FROM orders o1
    JOIN customers c ON o1.customer_id = c.customer_id
    LEFT JOIN orders o2 ON o1.customer_id = o2.customer_id 
                        AND o2.order_date = (
                            SELECT MAX(order_date) 
                            FROM orders o3 
                            WHERE o3.customer_id = o1.customer_id 
                              AND o3.order_date < o1.order_date
                              AND o3.status = '–í—ã–ø–æ–ª–Ω–µ–Ω'
                        )
    WHERE o1.status = '–í—ã–ø–æ–ª–Ω–µ–Ω'
    ORDER BY o1.customer_id, o1.order_date;
    """
    
    self_join_df = pd.read_sql_query(self_join_query, conn)
    print(f"‚úÖ Self JOIN: –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —Ç—Ä–µ–Ω–¥—ã –¥–ª—è {len(self_join_df)} –∑–∞–∫–∞–∑–æ–≤")
    
    # 2. –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ LEFT JOIN —Å –∞–≥—Ä–µ–≥–∞—Ü–∏–µ–π
    multiple_join_query = """
    SELECT 
        c.customer_id,
        c.customer_name,
        c.city,
        c.customer_segment,
        
        -- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–∫–∞–∑–æ–≤
        COUNT(DISTINCT o.order_id) as total_orders,
        COALESCE(SUM(CASE WHEN o.status = '–í—ã–ø–æ–ª–Ω–µ–Ω' THEN o.amount END), 0) as completed_revenue,
        COALESCE(SUM(CASE WHEN o.status = '–í –æ–±—Ä–∞–±–æ—Ç–∫–µ' THEN o.amount END), 0) as pending_revenue,
        COALESCE(SUM(CASE WHEN o.status = '–û—Ç–º–µ–Ω—ë–Ω' THEN o.amount END), 0) as cancelled_revenue,
        
        -- –ö–∞–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        COUNT(CASE WHEN o.channel = 'Online' THEN 1 END) as online_orders,
        COUNT(CASE WHEN o.channel = 'Mobile' THEN 1 END) as mobile_orders,
        COUNT(CASE WHEN o.channel = 'Store' THEN 1 END) as store_orders,
        
        -- –í—Ä–µ–º–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        MIN(o.order_date) as first_order_date,
        MAX(o.order_date) as last_order_date,
        
        -- –†–∞—Å—á–µ—Ç–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
        CASE 
            WHEN COUNT(DISTINCT o.order_id) > 0 
            THEN ROUND(SUM(CASE WHEN o.status = '–í—ã–ø–æ–ª–Ω–µ–Ω' THEN o.amount ELSE 0 END) / 
                      NULLIF(COUNT(CASE WHEN o.status = '–í—ã–ø–æ–ª–Ω–µ–Ω' THEN 1 END), 0), 2)
            ELSE 0
        END as avg_completed_order_value,
        
        -- –°—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        CASE 
            WHEN MAX(o.order_date) >= DATE('now', '-30 days') THEN '–ê–∫—Ç–∏–≤–Ω—ã–π'
            WHEN MAX(o.order_date) >= DATE('now', '-90 days') THEN '–£–º–µ—Ä–µ–Ω–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã–π'
            WHEN MAX(o.order_date) IS NOT NULL THEN '–ù–µ–∞–∫—Ç–∏–≤–Ω—ã–π'
            ELSE '–ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤'
        END as activity_status
        
    FROM customers c
    LEFT JOIN orders o ON c.customer_id = o.customer_id
    GROUP BY c.customer_id, c.customer_name, c.city, c.customer_segment
    ORDER BY completed_revenue DESC;
    """
    
    multiple_join_df = pd.read_sql_query(multiple_join_query, conn)
    print(f"‚úÖ –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ JOIN: —Å–æ–∑–¥–∞–Ω –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è {len(multiple_join_df)} –∫–ª–∏–µ–Ω—Ç–æ–≤")
    
    return self_join_df, multiple_join_df

def create_comprehensive_business_report(conn):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –±–∏–∑–Ω–µ—Å-–æ—Ç—á–µ—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –≤—Å–µ—Ö —Ç–µ—Ö–Ω–∏–∫"""
    
    print("\nüìä –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –±–∏–∑–Ω–µ—Å-–æ—Ç—á–µ—Ç–∞")
    print("="*50)
    
    comprehensive_query = """
    WITH 
    -- CTE 1: –ë–∞–∑–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤
    customer_base AS (
        SELECT 
            c.customer_id,
            c.customer_name,
            c.city,
            c.customer_segment,
            c.registration_date,
            COUNT(o.order_id) as total_orders,
            SUM(CASE WHEN o.status = '–í—ã–ø–æ–ª–Ω–µ–Ω' THEN o.amount ELSE 0 END) as lifetime_value,
            AVG(CASE WHEN o.status = '–í—ã–ø–æ–ª–Ω–µ–Ω' THEN o.amount END) as avg_order_value,
            MAX(CASE WHEN o.status = '–í—ã–ø–æ–ª–Ω–µ–Ω' THEN o.order_date END) as last_order_date,
            COUNT(DISTINCT o.channel) as channels_used
        FROM customers c
        LEFT JOIN orders o ON c.customer_id = o.customer_id
        GROUP BY c.customer_id, c.customer_name, c.city, c.customer_segment, c.registration_date
    ),
    
    -- CTE 2: –°–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è –∏ —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ
    customer_segments AS (
        SELECT 
            *,
            -- –†–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ
            ROW_NUMBER() OVER (ORDER BY lifetime_value DESC) as value_rank,
            ROW_NUMBER() OVER (PARTITION BY city ORDER BY lifetime_value DESC) as city_rank,
            NTILE(3) OVER (ORDER BY lifetime_value) as value_tercile,
            
            -- –ê–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å
            CASE 
                WHEN last_order_date >= DATE('now', '-30 days') THEN 'Recent'
                WHEN last_order_date >= DATE('now', '-90 days') THEN 'Moderate'
                WHEN last_order_date IS NOT NULL THEN 'Old'
                ELSE 'Never Ordered'
            END as recency_segment,
            
            -- –û–º–Ω–∏–∫–∞–Ω–∞–ª—å–Ω–æ—Å—Ç—å
            CASE 
                WHEN channels_used >= 3 THEN 'Omnichannel'
                WHEN channels_used = 2 THEN 'Multichannel'
                WHEN channels_used = 1 THEN 'Single Channel'
                ELSE 'No Orders'
            END as channel_behavior
        FROM customer_base
    ),
    
    -- CTE 3: –ì–æ—Ä–æ–¥—Å–∫–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
    city_analytics AS (
        SELECT 
            city,
            COUNT(*) as total_customers,
            COUNT(CASE WHEN lifetime_value > 0 THEN 1 END) as active_customers,
            AVG(lifetime_value) as avg_city_ltv,
            SUM(lifetime_value) as city_total_revenue,
            -- –ü–æ–¥–∑–∞–ø—Ä–æ—Å: —Ç–æ–ø –∫–ª–∏–µ–Ω—Ç –≥–æ—Ä–æ–¥–∞
            (SELECT customer_name 
             FROM customer_segments cs2 
             WHERE cs2.city = cs.city 
             ORDER BY cs2.lifetime_value DESC 
             LIMIT 1) as top_customer
        FROM customer_segments cs
        GROUP BY city
    ),
    
    -- CTE 4: –§–∏–Ω–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
    final_analytics AS (
        SELECT 
            cs.*,
            ca.avg_city_ltv,
            ca.city_total_revenue,
            ca.top_customer as city_top_customer,
            
            -- –°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
            ROUND(cs.lifetime_value / NULLIF(ca.avg_city_ltv, 0), 2) as vs_city_avg_ratio,
            ROUND(cs.lifetime_value * 100.0 / ca.city_total_revenue, 2) as city_revenue_share,
            
            -- –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è
            CASE 
                WHEN cs.customer_segment = 'VIP' AND cs.recency_segment = 'Recent' THEN 'Champion'
                WHEN cs.customer_segment = 'VIP' AND cs.recency_segment != 'Recent' THEN 'At Risk VIP'
                WHEN cs.lifetime_value > ca.avg_city_ltv AND cs.recency_segment = 'Recent' THEN 'Rising Star'
                WHEN cs.lifetime_value > 0 AND cs.recency_segment = 'Recent' THEN 'Active Regular'
                WHEN cs.lifetime_value > 0 AND cs.recency_segment != 'Recent' THEN 'Dormant'
                ELSE 'Prospect'
            END as business_segment
        FROM customer_segments cs
        LEFT JOIN city_analytics ca ON cs.city = ca.city
    )
    
    -- –§–∏–Ω–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å —Å –ø–æ–¥–∑–∞–ø—Ä–æ—Å–∞–º–∏ –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    SELECT 
        customer_name,
        city,
        customer_segment,
        business_segment,
        recency_segment,
        channel_behavior,
        total_orders,
        ROUND(lifetime_value, 0) as lifetime_value,
        value_rank,
        city_rank,
        vs_city_avg_ratio,
        city_revenue_share,
        
        -- –ü–æ–¥–∑–∞–ø—Ä–æ—Å: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ —Ç–æ–º –∂–µ –±–∏–∑–Ω–µ—Å-—Å–µ–≥–º–µ–Ω—Ç–µ
        (SELECT COUNT(*) 
         FROM final_analytics fa2 
         WHERE fa2.business_segment = fa.business_segment) as segment_peers,
        
        -- –ü–æ–¥–∑–∞–ø—Ä–æ—Å: –ø—Ä–æ—Ü–µ–Ω—Ç–∏–ª—å –ø–æ lifetime value
        ROUND((SELECT COUNT(*) * 100.0 / (SELECT COUNT(*) FROM final_analytics)
         FROM final_analytics fa3 
         WHERE fa3.lifetime_value < fa.lifetime_value), 1) as ltv_percentile
        
    FROM final_analytics fa
    ORDER BY lifetime_value DESC;
    """
    
    comprehensive_df = pd.read_sql_query(comprehensive_query, conn)
    print(f"‚úÖ –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –æ—Ç—á–µ—Ç: —Å–æ–∑–¥–∞–Ω –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è {len(comprehensive_df)} –∫–ª–∏–µ–Ω—Ç–æ–≤")
    
    # –°–≤–æ–¥–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –±–∏–∑–Ω–µ—Å-—Å–µ–≥–º–µ–Ω—Ç–∞–º
    segment_summary = comprehensive_df.groupby('business_segment').agg({
        'customer_name': 'count',
        'lifetime_value': ['sum', 'mean'],
        'total_orders': 'mean',
        'city_revenue_share': 'mean'
    }).round(2)
    
    print(f"\nüìà –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –±–∏–∑–Ω–µ—Å-—Å–µ–≥–º–µ–Ω—Ç–∞–º:")
    for segment in comprehensive_df['business_segment'].unique():
        count = len(comprehensive_df[comprehensive_df['business_segment'] == segment])
        avg_ltv = comprehensive_df[comprehensive_df['business_segment'] == segment]['lifetime_value'].mean()
        print(f"   ‚Ä¢ {segment}: {count} –∫–ª–∏–µ–Ω—Ç–æ–≤, —Å—Ä–µ–¥–Ω–∏–π LTV: {avg_ltv:.0f} —Ä—É–±.")
    
    return comprehensive_df, segment_summary

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö SQL —Ç–µ—Ö–Ω–∏–∫"""
    print("üéì –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö SQL —Ç–µ—Ö–Ω–∏–∫ –≤ Python")
    print("="*60)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    conn = create_sample_database()
    
    try:
        # 1. –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ CTE —Ç–µ—Ö–Ω–∏–∫–∏
        cascade_df, recursive_df = demonstrate_advanced_cte_techniques(conn)
        
        # 2. –°–ª–æ–∂–Ω—ã–µ –ø–æ–¥–∑–∞–ø—Ä–æ—Å—ã
        subquery_df, any_all_df = demonstrate_complex_subqueries(conn)
        
        # 3. –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ JOIN —Ç–µ—Ö–Ω–∏–∫–∏
        self_join_df, multiple_join_df = demonstrate_advanced_joins(conn)
        
        # 4. –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –±–∏–∑–Ω–µ—Å-–æ—Ç—á–µ—Ç
        comprehensive_df, segment_summary = create_comprehensive_business_report(conn)
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        results = {
            'cascade_cte': cascade_df,
            'recursive_cte': recursive_df,
            'complex_subqueries': subquery_df,
            'any_all_subqueries': any_all_df,
            'self_join_analysis': self_join_df,
            'multiple_join_profiles': multiple_join_df,
            'comprehensive_report': comprehensive_df
        }
        
        for name, df in results.items():
            filename = f"{name}_results.csv"
            df.to_csv(filename, index=False, sep=';')
            print(f"üíæ –°–æ—Ö—Ä–∞–Ω—ë–Ω —Ñ–∞–π–ª: {filename}")
        
        print(f"\nüéâ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        print(f"üìä –°–æ–∑–¥–∞–Ω–æ {len(results)} –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—Ç—á—ë—Ç–æ–≤")
        print(f"üóÉÔ∏è –í—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ CSV —Ñ–∞–π–ª—ã")
        
        # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        print(f"\nüìà –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏:")
        print(f"   ‚Ä¢ –ö–∞—Å–∫–∞–¥–Ω—ã–µ CTE: {len(cascade_df)} –∑–∞–ø–∏—Å–µ–π")
        print(f"   ‚Ä¢ –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–µ CTE: {len(recursive_df)} –∑–∞–ø–∏—Å–µ–π")
        print(f"   ‚Ä¢ –°–ª–æ–∂–Ω—ã–µ –ø–æ–¥–∑–∞–ø—Ä–æ—Å—ã: {len(subquery_df)} –∑–∞–ø–∏—Å–µ–π")
        print(f"   ‚Ä¢ ANY/ALL –∑–∞–ø—Ä–æ—Å—ã: {len(any_all_df)} –∑–∞–ø–∏—Å–µ–π")
        print(f"   ‚Ä¢ Self JOIN –∞–Ω–∞–ª–∏–∑: {len(self_join_df)} –∑–∞–ø–∏—Å–µ–π")
        print(f"   ‚Ä¢ –ü—Ä–æ—Ñ–∏–ª–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤: {len(multiple_join_df)} –∑–∞–ø–∏—Å–µ–π")
        print(f"   ‚Ä¢ –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –æ—Ç—á—ë—Ç: {len(comprehensive_df)} –∑–∞–ø–∏—Å–µ–π")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
        import traceback
        traceback.print_exc()
    
    finally:
        conn.close()

if __name__ == "__main__":
    main()