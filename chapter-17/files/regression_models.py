"""
üìà –†–µ–≥—Ä–µ—Å—Å–∏–æ–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏ –≤ –º–∞—à–∏–Ω–Ω–æ–º –æ–±—É—á–µ–Ω–∏–∏

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç:
- –õ–∏–Ω–µ–π–Ω—É—é —Ä–µ–≥—Ä–µ—Å—Å–∏—é —Å –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–µ–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤
- –ü–æ–ª–∏–Ω–æ–º–∏–∞–ª—å–Ω—É—é —Ä–µ–≥—Ä–µ—Å—Å–∏—é –¥–ª—è –Ω–µ–ª–∏–Ω–µ–π–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
- –†–µ–≥—É–ª—è—Ä–∏–∑–∞—Ü–∏—é (Ridge, Lasso) –¥–ª—è –±–æ—Ä—å–±—ã —Å –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ–º
- Random Forest –¥–ª—è —Ä–µ–≥—Ä–µ—Å—Å–∏–∏
- –ê–Ω–∞–ª–∏–∑ –æ—Å—Ç–∞—Ç–∫–æ–≤ –∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –º–æ–¥–µ–ª–µ–π
- –ë–∏–∑–Ω–µ—Å-–ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è —Ü–µ–Ω
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split, cross_val_score
from sklearn.linear_model import LinearRegression, Ridge, Lasso, ElasticNet
from sklearn.preprocessing import StandardScaler, PolynomialFeatures
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score
from sklearn.pipeline import Pipeline
import warnings

warnings.filterwarnings('ignore')

print("üìà –ò–∑—É—á–∞–µ–º —Ä–µ–≥—Ä–µ—Å—Å–∏–æ–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏ –≤ –º–∞—à–∏–Ω–Ω–æ–º –æ–±—É—á–µ–Ω–∏–∏!")
print("=" * 55)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
plt.rcParams['figure.figsize'] = (12, 8)
plt.rcParams['font.size'] = 10
sns.set_style("whitegrid")

def generate_real_estate_data():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–µ–≥—Ä–µ—Å—Å–∏–∏"""
    np.random.seed(42)
    n_properties = 1000
    
    print("üè† –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Ä—ã–Ω–∫–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏...")
    
    # –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–º–∏ –∑–∞–∫–æ–Ω–æ–º–µ—Ä–Ω–æ—Å—Ç—è–º–∏
    data = {}
    
    # –ë–∞–∑–æ–≤—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
    data['total_area'] = np.random.gamma(3, 20)  # –ø–ª–æ—â–∞–¥—å –≤ –∫–≤.–º
    data['total_area'] = np.clip(data['total_area'], 30, 250)
    
    # –ö–æ–º–Ω–∞—Ç—ã –∑–∞–≤–∏—Å—è—Ç –æ—Ç –ø–ª–æ—â–∞–¥–∏
    data['rooms'] = np.where(
        data['total_area'] < 40, 1,
        np.where(data['total_area'] < 60, 2,
                np.where(data['total_area'] < 100, 3, 4))
    )
    
    # –≠—Ç–∞–∂
    data['floor'] = np.random.randint(1, 26, n_properties)
    data['total_floors'] = data['floor'] + np.random.randint(0, 15)
    data['total_floors'] = np.clip(data['total_floors'], data['floor'], 30)
    
    # –ì–æ–¥ –ø–æ—Å—Ç—Ä–æ–π–∫–∏
    data['year_built'] = np.random.randint(1960, 2024, n_properties)
    
    # –†–∞–π–æ–Ω –≤–ª–∏—è–µ—Ç –Ω–∞ —Ü–µ–Ω—É
    districts = ['–¶–µ–Ω—Ç—Ä', '–°–ø–∞–ª—å–Ω—ã–π —Ä–∞–π–æ–Ω', '–ù–æ–≤–æ—Å—Ç—Ä–æ–π–∫–∏', '–û–∫—Ä–∞–∏–Ω–∞']
    district_multipliers = [2.0, 1.0, 1.3, 0.7]
    data['district'] = np.random.choice(districts, n_properties)
    
    # –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ —Ü–µ–Ω—Ç—Ä–∞
    district_distances = {'–¶–µ–Ω—Ç—Ä': 3, '–°–ø–∞–ª—å–Ω—ã–π —Ä–∞–π–æ–Ω': 15, '–ù–æ–≤–æ—Å—Ç—Ä–æ–π–∫–∏': 25, '–û–∫—Ä–∞–∏–Ω–∞': 35}
    data['center_distance'] = [district_distances[d] + np.random.normal(0, 5) for d in data['district']]
    data['center_distance'] = np.clip(data['center_distance'], 1, 50)
    
    # –ú–µ—Ç—Ä–æ (–Ω–µ –≤–µ–∑–¥–µ –µ—Å—Ç—å)
    data['has_metro'] = np.random.choice([True, False], n_properties, p=[0.6, 0.4])
    data['metro_distance'] = np.where(
        data['has_metro'],
        np.random.gamma(2, 0.5),  # –∫–º –¥–æ –º–µ—Ç—Ä–æ
        np.nan
    )
    
    # –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏ —É–¥–æ–±—Å—Ç–≤–∞
    data['renovation_quality'] = np.random.choice(['–ë–µ–∑ —Ä–µ–º–æ–Ω—Ç–∞', '–ö–æ—Å–º–µ—Ç–∏—á–µ—Å–∫–∏–π', '–ï–≤—Ä–æ—Ä–µ–º–æ–Ω—Ç'], 
                                                 n_properties, p=[0.3, 0.5, 0.2])
    renovation_multipliers = {'–ë–µ–∑ —Ä–µ–º–æ–Ω—Ç–∞': 0.85, '–ö–æ—Å–º–µ—Ç–∏—á–µ—Å–∫–∏–π': 1.0, '–ï–≤—Ä–æ—Ä–µ–º–æ–Ω—Ç': 1.2}
    
    data['has_balcony'] = np.random.choice([True, False], n_properties, p=[0.7, 0.3])
    data['has_parking'] = np.random.choice([True, False], n_properties, p=[0.4, 0.6])
    
    # –≠–∫–æ–ª–æ–≥–∏—è –∏ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞
    data['school_rating'] = np.random.gamma(2, 2)
    data['school_rating'] = np.clip(data['school_rating'], 1, 10)
    
    data['park_distance'] = np.random.exponential(2)  # –∫–º –¥–æ –ø–∞—Ä–∫–∞
    data['noise_level'] = np.random.gamma(2, 2)  # —É—Ä–æ–≤–µ–Ω—å —à—É–º–∞
    data['noise_level'] = np.clip(data['noise_level'], 1, 10)
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ü–µ–Ω—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Å–µ—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤
    base_price_per_sqm = 100000  # –±–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞ –∑–∞ –∫–≤.–º
    
    price_per_sqm = base_price_per_sqm
    
    # –í–ª–∏—è–Ω–∏–µ —Ä–∞–π–æ–Ω–∞
    for i in range(n_properties):
        district = data['district'][i]
        district_idx = districts.index(district)
        price_per_sqm_i = base_price_per_sqm * district_multipliers[district_idx]
        
        # –í–ª–∏—è–Ω–∏–µ –ø–ª–æ—â–∞–¥–∏ (–±–æ–ª—å—à–µ –ø–ª–æ—â–∞–¥—å -> –¥–µ—à–µ–≤–ª–µ –∑–∞ –∫–≤.–º)
        area_factor = max(0.7, 1 - (data['total_area'][i] - 60) / 500)
        price_per_sqm_i *= area_factor
        
        # –í–ª–∏—è–Ω–∏–µ —ç—Ç–∞–∂–∞ (–ø–µ—Ä–≤—ã–π –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ—à–µ–≤–ª–µ)
        floor = data['floor'][i]
        total_floors = data['total_floors'][i]
        if floor == 1 or floor == total_floors:
            floor_factor = 0.95
        else:
            floor_factor = 1.0
        price_per_sqm_i *= floor_factor
        
        # –í–ª–∏—è–Ω–∏–µ –≥–æ–¥–∞ –ø–æ—Å—Ç—Ä–æ–π–∫–∏
        age = 2024 - data['year_built'][i]
        age_factor = max(0.6, 1 - age / 200)  # —Å—Ç–∞—Ä—ã–µ –¥–æ–º–∞ –¥–µ—à–µ–≤–ª–µ
        price_per_sqm_i *= age_factor
        
        # –í–ª–∏—è–Ω–∏–µ —Ä–µ–º–æ–Ω—Ç–∞
        renovation = data['renovation_quality'][i]
        price_per_sqm_i *= renovation_multipliers[renovation]
        
        # –í–ª–∏—è–Ω–∏–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –¥–æ —Ü–µ–Ω—Ç—Ä–∞
        distance_factor = max(0.5, 1 - data['center_distance'][i] / 100)
        price_per_sqm_i *= distance_factor
        
        # –í–ª–∏—è–Ω–∏–µ –º–µ—Ç—Ä–æ
        if data['has_metro'][i] and not np.isnan(data['metro_distance'][i]):
            metro_factor = max(0.8, 1 - data['metro_distance'][i] / 10)
            price_per_sqm_i *= metro_factor
        elif not data['has_metro'][i]:
            price_per_sqm_i *= 0.85  # –Ω–µ—Ç –º–µ—Ç—Ä–æ –≤–æ–æ–±—â–µ
        
        # –í–ª–∏—è–Ω–∏–µ —É–¥–æ–±—Å—Ç–≤
        if data['has_balcony'][i]:
            price_per_sqm_i *= 1.05
        if data['has_parking'][i]:
            price_per_sqm_i *= 1.1
        
        # –í–ª–∏—è–Ω–∏–µ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã
        school_factor = 0.9 + data['school_rating'][i] / 50
        price_per_sqm_i *= school_factor
        
        park_factor = max(0.9, 1 - data['park_distance'][i] / 20)
        price_per_sqm_i *= park_factor
        
        noise_factor = max(0.8, 1 - (data['noise_level'][i] - 5) / 20)
        price_per_sqm_i *= noise_factor
        
        # –ò—Ç–æ–≥–æ–≤–∞—è —Ü–µ–Ω–∞
        total_price = price_per_sqm_i * data['total_area'][i]
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω–æ—Å—Ç—å
        total_price *= np.random.normal(1, 0.15)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º
        if i == 0:
            data['price'] = [max(1000000, total_price)]
        else:
            data['price'].append(max(1000000, total_price))
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ DataFrame
    df = pd.DataFrame(data)
    
    # –û–∫—Ä—É–≥–ª—è–µ–º —Ü–µ–Ω—ã
    df['price'] = df['price'].round(-3)  # –æ–∫—Ä—É–≥–ª—è–µ–º –¥–æ —Ç—ã—Å—è—á
    
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(df)} –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏")
    print(f"üìä –¶–µ–Ω—ã –æ—Ç {df['price'].min():,.0f} –¥–æ {df['price'].max():,.0f} —Ä—É–±.")
    print(f"üìà –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: {df['price'].mean():,.0f} —Ä—É–±.")
    print(f"üìè –°—Ä–µ–¥–Ω—è—è –ø–ª–æ—â–∞–¥—å: {df['total_area'].mean():.1f} –∫–≤.–º")
    
    return df

def explore_real_estate_data(data):
    """–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏"""
    print("\nüîç –ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏:")
    print("=" * 50)
    
    # –ë–∞–∑–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print("üìä –û–ø–∏—Å–∞—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    print(data[['total_area', 'rooms', 'year_built', 'center_distance', 'price']].describe())
    
    # –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è —Å —Ü–µ–Ω–æ–π
    numeric_columns = data.select_dtypes(include=[np.number]).columns
    correlations = data[numeric_columns].corr()['price'].abs().sort_values(ascending=False)
    
    print(f"\nüéØ –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è —Å —Ü–µ–Ω–æ–π:")
    for col, corr in correlations.items():
        if col != 'price':
            print(f"  {col}: {corr:.3f}")
    
    # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
    fig, axes = plt.subplots(2, 3, figsize=(18, 12))
    fig.suptitle('üè† –ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏', fontsize=16)
    
    # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–µ–Ω
    axes[0,0].hist(data['price'] / 1e6, bins=30, alpha=0.7, edgecolor='black')
    axes[0,0].set_title('üìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–µ–Ω')
    axes[0,0].set_xlabel('–¶–µ–Ω–∞ (–º–ª–Ω —Ä—É–±.)')
    axes[0,0].set_ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ')
    
    # –¶–µ–Ω–∞ vs –ø–ª–æ—â–∞–¥—å
    axes[0,1].scatter(data['total_area'], data['price'] / 1e6, alpha=0.6)
    axes[0,1].set_title('üìà –ü–ª–æ—â–∞–¥—å vs –¶–µ–Ω–∞')
    axes[0,1].set_xlabel('–ü–ª–æ—â–∞–¥—å (–∫–≤.–º)')
    axes[0,1].set_ylabel('–¶–µ–Ω–∞ (–º–ª–Ω —Ä—É–±.)')
    
    # –¶–µ–Ω—ã –ø–æ —Ä–∞–π–æ–Ω–∞–º
    district_prices = data.groupby('district')['price'].mean() / 1e6
    district_prices.plot(kind='bar', ax=axes[0,2])
    axes[0,2].set_title('üèôÔ∏è –°—Ä–µ–¥–Ω–∏–µ —Ü–µ–Ω—ã –ø–æ —Ä–∞–π–æ–Ω–∞–º')
    axes[0,2].set_ylabel('–¶–µ–Ω–∞ (–º–ª–Ω —Ä—É–±.)')
    axes[0,2].tick_params(axis='x', rotation=45)
    
    # –í–ª–∏—è–Ω–∏–µ –≥–æ–¥–∞ –ø–æ—Å—Ç—Ä–æ–π–∫–∏
    data['age'] = 2024 - data['year_built']
    axes[1,0].scatter(data['age'], data['price'] / 1e6, alpha=0.6)
    axes[1,0].set_title('üèóÔ∏è –í–æ–∑—Ä–∞—Å—Ç vs –¶–µ–Ω–∞')
    axes[1,0].set_xlabel('–í–æ–∑—Ä–∞—Å—Ç –¥–æ–º–∞ (–ª–µ—Ç)')
    axes[1,0].set_ylabel('–¶–µ–Ω–∞ (–º–ª–Ω —Ä—É–±.)')
    
    # –í–ª–∏—è–Ω–∏–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –¥–æ —Ü–µ–Ω—Ç—Ä–∞
    axes[1,1].scatter(data['center_distance'], data['price'] / 1e6, alpha=0.6)
    axes[1,1].set_title('üéØ –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ —Ü–µ–Ω—Ç—Ä–∞ vs –¶–µ–Ω–∞')
    axes[1,1].set_xlabel('–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ —Ü–µ–Ω—Ç—Ä–∞ (–∫–º)')
    axes[1,1].set_ylabel('–¶–µ–Ω–∞ (–º–ª–Ω —Ä—É–±.)')
    
    # –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞
    important_features = ['total_area', 'rooms', 'floor', 'year_built', 
                         'center_distance', 'school_rating', 'price']
    correlation_matrix = data[important_features].corr()
    
    sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', center=0, ax=axes[1,2])
    axes[1,2].set_title('üî• –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞')
    
    plt.tight_layout()
    plt.show()

def prepare_regression_data(data):
    """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–µ–≥—Ä–µ—Å—Å–∏–æ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
    print("\nüîß –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–µ–≥—Ä–µ—Å—Å–∏–æ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞:")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é
    df = data.copy()
    
    # Feature engineering
    print("‚ú® –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤...")
    df['age'] = 2024 - df['year_built']
    df['price_per_sqm'] = df['price'] / df['total_area']
    df['floor_ratio'] = df['floor'] / df['total_floors']
    
    # –õ–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–∏–µ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏
    df['log_total_area'] = np.log(df['total_area'])
    df['log_center_distance'] = np.log(df['center_distance'] + 1)
    
    # –ö–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
    df['is_new_building'] = (df['age'] <= 5).astype(int)
    df['is_center'] = (df['district'] == '–¶–µ–Ω—Ç—Ä').astype(int)
    df['is_first_or_last_floor'] = ((df['floor'] == 1) | 
                                   (df['floor'] == df['total_floors'])).astype(int)
    
    # One-hot encoding –¥–ª—è —Ä–∞–π–æ–Ω–∞
    district_dummies = pd.get_dummies(df['district'], prefix='district')
    df = pd.concat([df, district_dummies], axis=1)
    
    # One-hot encoding –¥–ª—è —Ä–µ–º–æ–Ω—Ç–∞
    renovation_dummies = pd.get_dummies(df['renovation_quality'], prefix='renovation')
    df = pd.concat([df, renovation_dummies], axis=1)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–ø—É—Å–∫–æ–≤ –≤ metro_distance
    df['metro_distance'] = df['metro_distance'].fillna(df['metro_distance'].median())
    df['has_metro_numeric'] = df['has_metro'].astype(int)
    
    # –í—ã–±–∏—Ä–∞–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏ –¥–ª—è –º–æ–¥–µ–ª–∏
    feature_columns = [
        'total_area', 'rooms', 'floor', 'total_floors', 'age',
        'center_distance', 'metro_distance', 'school_rating',
        'park_distance', 'noise_level', 'floor_ratio',
        'has_balcony', 'has_parking', 'has_metro_numeric',
        'is_new_building', 'is_center', 'is_first_or_last_floor'
    ] + list(district_dummies.columns) + list(renovation_dummies.columns)
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –±—É–ª–µ–≤—ã –ø—Ä–∏–∑–Ω–∞–∫–∏ –≤ —á–∏—Å–ª–æ–≤—ã–µ
    boolean_columns = ['has_balcony', 'has_parking']
    for col in boolean_columns:
        df[col] = df[col].astype(int)
    
    X = df[feature_columns]
    y = df['price']
    
    print(f"üìä –ò—Ç–æ–≥–æ–≤—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –¥–ª—è –º–æ–¥–µ–ª–∏: {len(X.columns)}")
    print(f"   –ß–∏—Å–ª–æ–≤—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏: {len([col for col in X.columns if not col.startswith(('district_', 'renovation_'))])}")
    print(f"   –ö–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã–µ (—Ä–∞–π–æ–Ω): {len([col for col in X.columns if col.startswith('district_')])}")
    print(f"   –ö–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã–µ (—Ä–µ–º–æ–Ω—Ç): {len([col for col in X.columns if col.startswith('renovation_')])}")
    
    return X, y, feature_columns

def train_regression_models(X, y, feature_names):
    """–û–±—É—á–µ–Ω–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ä–µ–≥—Ä–µ—Å—Å–∏–æ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π"""
    print("\nüìà –û–±—É—á–µ–Ω–∏–µ —Ä–µ–≥—Ä–µ—Å—Å–∏–æ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π:")
    print("=" * 35)
    
    # –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    X_train, X_test, y_train, y_test = train_test_split(
        X, y, test_size=0.2, random_state=42
    )
    
    print(f"üìä –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö:")
    print(f"  –û–±—É—á–∞—é—â–∞—è –≤—ã–±–æ—Ä–∫–∞: {len(X_train)} –æ–±—ä–µ–∫—Ç–æ–≤")
    print(f"  –¢–µ—Å—Ç–æ–≤–∞—è –≤—ã–±–æ—Ä–∫–∞: {len(X_test)} –æ–±—ä–µ–∫—Ç–æ–≤")
    print(f"  –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –≤ train: {y_train.mean():,.0f} —Ä—É–±.")
    print(f"  –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –≤ test: {y_test.mean():,.0f} —Ä—É–±.")
    
    # –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –º–æ–¥–µ–ª–µ–π
    scaler = StandardScaler()
    X_train_scaled = scaler.fit_transform(X_train)
    X_test_scaled = scaler.transform(X_test)
    
    models = {}
    results = {}
    
    # 1. –õ–∏–Ω–µ–π–Ω–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è
    print(f"\nüìè –û–±—É—á–µ–Ω–∏–µ –ª–∏–Ω–µ–π–Ω–æ–π —Ä–µ–≥—Ä–µ—Å—Å–∏–∏...")
    linear_reg = LinearRegression()
    linear_reg.fit(X_train, y_train)
    models['–õ–∏–Ω–µ–π–Ω–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è'] = (linear_reg, X_train, X_test)
    
    # 2. –ü–æ–ª–∏–Ω–æ–º–∏–∞–ª—å–Ω–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è (—Å—Ç–µ–ø–µ–Ω—å 2)
    print(f"üåä –û–±—É—á–µ–Ω–∏–µ –ø–æ–ª–∏–Ω–æ–º–∏–∞–ª—å–Ω–æ–π —Ä–µ–≥—Ä–µ—Å—Å–∏–∏...")
    poly_pipeline = Pipeline([
        ('poly', PolynomialFeatures(degree=2, interaction_only=True, include_bias=False)),
        ('scaler', StandardScaler()),
        ('linear', LinearRegression())
    ])
    poly_pipeline.fit(X_train, y_train)
    models['–ü–æ–ª–∏–Ω–æ–º–∏–∞–ª—å–Ω–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è'] = (poly_pipeline, X_train, X_test)
    
    # 3. Ridge —Ä–µ–≥—Ä–µ—Å—Å–∏—è (L2 —Ä–µ–≥—É–ª—è—Ä–∏–∑–∞—Ü–∏—è)
    print(f"üèîÔ∏è –û–±—É—á–µ–Ω–∏–µ Ridge —Ä–µ–≥—Ä–µ—Å—Å–∏–∏...")
    ridge = Ridge(alpha=1000.0)
    ridge.fit(X_train_scaled, y_train)
    models['Ridge —Ä–µ–≥—Ä–µ—Å—Å–∏—è'] = (ridge, X_train_scaled, X_test_scaled)
    
    # 4. Lasso —Ä–µ–≥—Ä–µ—Å—Å–∏—è (L1 —Ä–µ–≥—É–ª—è—Ä–∏–∑–∞—Ü–∏—è)
    print(f"üéØ –û–±—É—á–µ–Ω–∏–µ Lasso —Ä–µ–≥—Ä–µ—Å—Å–∏–∏...")
    lasso = Lasso(alpha=10000.0)
    lasso.fit(X_train_scaled, y_train)
    models['Lasso —Ä–µ–≥—Ä–µ—Å—Å–∏—è'] = (lasso, X_train_scaled, X_test_scaled)
    
    # 5. Random Forest
    print(f"üå≤ –û–±—É—á–µ–Ω–∏–µ Random Forest...")
    rf_reg = RandomForestRegressor(
        n_estimators=100,
        max_depth=15,
        min_samples_split=5,
        random_state=42,
        n_jobs=-1
    )
    rf_reg.fit(X_train, y_train)
    models['Random Forest'] = (rf_reg, X_train, X_test)
    
    # –û—Ü–µ–Ω–∫–∞ –º–æ–¥–µ–ª–µ–π
    print(f"\nüìä –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –º–æ–¥–µ–ª–µ–π:")
    print("-" * 90)
    print(f"{'–ú–æ–¥–µ–ª—å':<25} {'R¬≤':<8} {'RMSE':<15} {'MAE':<15} {'MAPE (%)':<10}")
    print("-" * 90)
    
    for name, (model, X_tr, X_te) in models.items():
        # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
        y_pred = model.predict(X_te)
        
        # –ú–µ—Ç—Ä–∏–∫–∏
        r2 = r2_score(y_test, y_pred)
        mse = mean_squared_error(y_test, y_pred)
        rmse = np.sqrt(mse)
        mae = mean_absolute_error(y_test, y_pred)
        mape = np.mean(np.abs((y_test - y_pred) / y_test)) * 100
        
        results[name] = {
            'model': model,
            'y_pred': y_pred,
            'r2': r2,
            'rmse': rmse,
            'mae': mae,
            'mape': mape
        }
        
        print(f"{name:<25} {r2:<8.3f} {rmse:<15,.0f} {mae:<15,.0f} {mape:<10.1f}")
    
    return models, results, X_train, X_test, y_train, y_test, scaler, feature_names

def visualize_regression_results(models, results, X_test, y_test, feature_names):
    """–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ä–µ–≥—Ä–µ—Å—Å–∏–æ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π"""
    print(f"\nüé® –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ä–µ–≥—Ä–µ—Å—Å–∏–∏:")
    
    fig, axes = plt.subplots(2, 3, figsize=(18, 12))
    fig.suptitle('üìà –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–µ–≥—Ä–µ—Å—Å–∏–æ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π', fontsize=16)
    
    # 1. –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫
    metrics_df = pd.DataFrame({
        name: [res['r2'], res['rmse']/1e6, res['mae']/1e6, res['mape']]
        for name, res in results.items()
    }, index=['R¬≤', 'RMSE (–º–ª–Ω)', 'MAE (–º–ª–Ω)', 'MAPE (%)'])
    
    metrics_df.plot(kind='bar', ax=axes[0,0])
    axes[0,0].set_title('üìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫')
    axes[0,0].set_ylabel('–ó–Ω–∞—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫–∏')
    axes[0,0].legend(bbox_to_anchor=(1.05, 1), loc='upper left')
    axes[0,0].tick_params(axis='x', rotation=45)
    
    # 2-4. –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è vs —Ä–µ–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —Ç–æ–ø-3 –º–æ–¥–µ–ª–µ–π
    best_models = sorted(results.keys(), key=lambda x: results[x]['r2'], reverse=True)[:3]
    
    for i, model_name in enumerate(best_models):
        ax = axes[0, i+1] if i < 2 else axes[1, 0]
        
        y_pred = results[model_name]['y_pred']
        r2 = results[model_name]['r2']
        
        ax.scatter(y_test/1e6, y_pred/1e6, alpha=0.6)
        
        # –õ–∏–Ω–∏—è –∏–¥–µ–∞–ª—å–Ω–æ–≥–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
        min_val, max_val = min(y_test.min(), y_pred.min())/1e6, max(y_test.max(), y_pred.max())/1e6
        ax.plot([min_val, max_val], [min_val, max_val], 'r--', lw=2)
        
        ax.set_xlabel('–†–µ–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ (–º–ª–Ω —Ä—É–±.)')
        ax.set_ylabel('–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω–∞—è —Ü–µ–Ω–∞ (–º–ª–Ω —Ä—É–±.)')
        ax.set_title(f'{model_name}\nR¬≤ = {r2:.3f}')
        ax.grid(True, alpha=0.3)
    
    # 5. –û—Å—Ç–∞—Ç–∫–∏ –¥–ª—è –ª—É—á—à–µ–π –º–æ–¥–µ–ª–∏
    best_model_name = best_models[0]
    best_pred = results[best_model_name]['y_pred']
    residuals = y_test - best_pred
    
    axes[1,1].scatter(best_pred/1e6, residuals/1e6, alpha=0.6)
    axes[1,1].axhline(y=0, color='r', linestyle='--')
    axes[1,1].set_xlabel('–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω–∞—è —Ü–µ–Ω–∞ (–º–ª–Ω —Ä—É–±.)')
    axes[1,1].set_ylabel('–û—Å—Ç–∞—Ç–∫–∏ (–º–ª–Ω —Ä—É–±.)')
    axes[1,1].set_title(f'üìä –û—Å—Ç–∞—Ç–∫–∏ ({best_model_name})')
    axes[1,1].grid(True, alpha=0.3)
    
    # 6. Q-Q plot –æ—Å—Ç–∞—Ç–∫–æ–≤
    from scipy import stats
    stats.probplot(residuals, dist="norm", plot=axes[1,2])
    axes[1,2].set_title(f'üìà Q-Q plot –æ—Å—Ç–∞—Ç–∫–æ–≤\n({best_model_name})')
    
    plt.tight_layout()
    plt.show()

def analyze_feature_importance_regression(models, feature_names):
    """–ê–Ω–∞–ª–∏–∑ –≤–∞–∂–Ω–æ—Å—Ç–∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è —Ä–µ–≥—Ä–µ—Å—Å–∏–æ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π"""
    print(f"\nüéØ –ê–Ω–∞–ª–∏–∑ –≤–∞–∂–Ω–æ—Å—Ç–∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –≤ —Ä–µ–≥—Ä–µ—Å—Å–∏–∏:")
    print("=" * 45)
    
    fig, axes = plt.subplots(1, 3, figsize=(18, 6))
    
    # –õ–∏–Ω–µ–π–Ω–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è - –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã
    linear_model = models['–õ–∏–Ω–µ–π–Ω–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è'][0]
    linear_coef = pd.DataFrame({
        'feature': feature_names,
        'coefficient': linear_model.coef_,
        'abs_coefficient': np.abs(linear_model.coef_)
    }).sort_values('abs_coefficient', ascending=True)
    
    # –¢–æ–ø-10 –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ –ø–æ –º–æ–¥—É–ª—é
    top_coef = linear_coef.tail(10)
    bars = axes[0].barh(range(len(top_coef)), top_coef['coefficient'])
    
    # –†–∞—Å–∫—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ –∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã
    for i, bar in enumerate(bars):
        if top_coef.iloc[i]['coefficient'] > 0:
            bar.set_color('green')
        else:
            bar.set_color('red')
    
    axes[0].set_yticks(range(len(top_coef)))
    axes[0].set_yticklabels(top_coef['feature'])
    axes[0].set_title('üìä –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –ª–∏–Ω–µ–π–Ω–æ–π —Ä–µ–≥—Ä–µ—Å—Å–∏–∏\n(—Ç–æ–ø-10 –ø–æ –º–æ–¥—É–ª—é)')
    axes[0].set_xlabel('–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç')
    
    # Lasso —Ä–µ–≥—Ä–µ—Å—Å–∏—è - –æ—Ç–æ–±—Ä–∞–Ω–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
    lasso_model = models['Lasso —Ä–µ–≥—Ä–µ—Å—Å–∏—è'][0]
    lasso_coef = pd.DataFrame({
        'feature': feature_names,
        'coefficient': lasso_model.coef_
    })
    # –£–±–∏—Ä–∞–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏ —Å –Ω—É–ª–µ–≤—ã–º–∏ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞–º–∏
    lasso_selected = lasso_coef[lasso_coef['coefficient'] != 0].copy()
    lasso_selected['abs_coefficient'] = np.abs(lasso_selected['coefficient'])
    lasso_selected = lasso_selected.sort_values('abs_coefficient', ascending=True)
    
    if len(lasso_selected) > 0:
        top_lasso = lasso_selected.tail(10)
        bars = axes[1].barh(range(len(top_lasso)), top_lasso['coefficient'])
        
        for i, bar in enumerate(bars):
            if top_lasso.iloc[i]['coefficient'] > 0:
                bar.set_color('green')
            else:
                bar.set_color('red')
        
        axes[1].set_yticks(range(len(top_lasso)))
        axes[1].set_yticklabels(top_lasso['feature'])
        axes[1].set_title(f'üéØ Lasso: –æ—Ç–æ–±—Ä–∞–Ω–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏\n({len(lasso_selected)} –∏–∑ {len(feature_names)})')
        axes[1].set_xlabel('–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç')
    
    # Random Forest - –≤–∞–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
    rf_model = models['Random Forest'][0]
    rf_importance = pd.DataFrame({
        'feature': feature_names,
        'importance': rf_model.feature_importances_
    }).sort_values('importance', ascending=True)
    
    rf_importance.tail(10).plot(x='feature', y='importance', kind='barh', 
                               ax=axes[2], color='darkgreen')
    axes[2].set_title('üå≤ Random Forest\n–≤–∞–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–æ–≤')
    axes[2].set_xlabel('–í–∞–∂–Ω–æ—Å—Ç—å')
    
    plt.tight_layout()
    plt.show()
    
    # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é
    print(f"üí° –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è –≤–∞–∂–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤:")
    print(f"\nüìä –õ–∏–Ω–µ–π–Ω–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è (—Ç–æ–ø-5):")
    for _, row in linear_coef.tail(5).iterrows():
        effect = "—É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç" if row['coefficient'] > 0 else "—É–º–µ–Ω—å—à–∞–µ—Ç"
        print(f"  {row['feature']}: {effect} —Ü–µ–Ω—É –Ω–∞ {abs(row['coefficient']):,.0f} —Ä—É–±.")
    
    if len(lasso_selected) > 0:
        print(f"\nüéØ Lasso –æ—Ç–æ–±—Ä–∞–ª {len(lasso_selected)} –∏–∑ {len(feature_names)} –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")
        print(f"   –≠—Ç–æ –ø–æ–º–æ–≥–∞–µ—Ç –∏–∑–±–µ–∂–∞—Ç—å –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è –∏ —É–ª—É—á—à–∏—Ç—å –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ–º–æ—Å—Ç—å")
    
    print(f"\nüå≤ Random Forest (—Ç–æ–ø-3):")
    for _, row in rf_importance.tail(3).iterrows():
        print(f"  {row['feature']}: –≤–∞–∂–Ω–æ—Å—Ç—å {row['importance']:.3f}")

def cross_validation_regression(models, X, y):
    """–ö—Ä–æ—Å—Å-–≤–∞–ª–∏–¥–∞—Ü–∏—è —Ä–µ–≥—Ä–µ—Å—Å–∏–æ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π"""
    print(f"\nüîÑ –ö—Ä–æ—Å—Å-–≤–∞–ª–∏–¥–∞—Ü–∏—è —Ä–µ–≥—Ä–µ—Å—Å–∏–æ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π:")
    print("=" * 45)
    
    cv_results = {}
    scaler = StandardScaler()
    
    for name, (model, _, _) in models.items():
        print(f"–¢–µ—Å—Ç–∏—Ä—É–µ–º {name}...")
        
        if name in ['Ridge —Ä–µ–≥—Ä–µ—Å—Å–∏—è', 'Lasso —Ä–µ–≥—Ä–µ—Å—Å–∏—è']:
            # –î–ª—è —Ä–µ–≥—É–ª—è—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –Ω—É–∂–Ω–æ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ
            # –°–æ–∑–¥–∞–µ–º –ø–∞–π–ø–ª–∞–π–Ω –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫—Ä–æ—Å—Å-–≤–∞–ª–∏–¥–∞—Ü–∏–∏
            pipeline = Pipeline([
                ('scaler', StandardScaler()),
                ('model', model)
            ])
            cv_scores = cross_val_score(pipeline, X, y, cv=5, scoring='r2')
        else:
            cv_scores = cross_val_score(model, X, y, cv=5, scoring='r2')
        
        cv_results[name] = cv_scores
        
        print(f"  R¬≤ –ø–æ —Ñ–æ–ª–¥–∞–º: {cv_scores}")
        print(f"  –°—Ä–µ–¥–Ω–µ–µ R¬≤: {cv_scores.mean():.3f} ¬± {cv_scores.std():.3f}")
        print(f"  –î–∏–∞–ø–∞–∑–æ–Ω: [{cv_scores.min():.3f}, {cv_scores.max():.3f}]")
        print()
    
    # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
    plt.figure(figsize=(12, 6))
    cv_data = [scores for scores in cv_results.values()]
    box_plot = plt.boxplot(cv_data, labels=list(cv_results.keys()), patch_artist=True)
    
    # –†–∞—Å–∫—Ä–∞—à–∏–≤–∞–µ–º –±–æ–∫—Å—ã
    colors = plt.cm.Set3(np.linspace(0, 1, len(cv_data)))
    for patch, color in zip(box_plot['boxes'], colors):
        patch.set_facecolor(color)
    
    plt.title('üìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ R¬≤ –ø–æ –∫—Ä–æ—Å—Å-–≤–∞–ª–∏–¥–∞—Ü–∏–∏')
    plt.ylabel('R¬≤')
    plt.xticks(rotation=45)
    plt.grid(True, alpha=0.3)
    plt.tight_layout()
    plt.show()

def business_case_real_estate(results, models, feature_names):
    """–ë–∏–∑–Ω–µ—Å-–ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏"""
    print(f"\nüíº –ë–∏–∑–Ω–µ—Å-–∫–µ–π—Å: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ü–µ–Ω–∫–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏")
    print("=" * 55)
    
    # –í—ã–±–∏—Ä–∞–µ–º –ª—É—á—à—É—é –º–æ–¥–µ–ª—å
    best_model_name = max(results.keys(), key=lambda x: results[x]['r2'])
    best_result = results[best_model_name]
    best_model = best_result['model']
    
    print(f"üèÜ –õ—É—á—à–∞—è –º–æ–¥–µ–ª—å: {best_model_name}")
    print(f"   R¬≤ = {best_result['r2']:.3f}")
    print(f"   RMSE = {best_result['rmse']:,.0f} —Ä—É–±.")
    print(f"   MAE = {best_result['mae']:,.0f} —Ä—É–±.")
    print(f"   MAPE = {best_result['mape']:.1f}%")
    
    print(f"\nüí° –ë–∏–∑–Ω–µ—Å-–∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è:")
    print(f"   ‚Ä¢ –ú–æ–¥–µ–ª—å –æ–±—ä—è—Å–Ω—è–µ—Ç {best_result['r2']*100:.0f}% –¥–∏—Å–ø–µ—Ä—Å–∏–∏ —Ü–µ–Ω")
    print(f"   ‚Ä¢ –°—Ä–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞ –æ—Ü–µ–Ω–∫–∏: ¬±{best_result['mae']:,.0f} —Ä—É–±.")
    print(f"   ‚Ä¢ –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: ¬±{best_result['mape']:.1f}%")
    
    if best_result['mape'] < 15:
        quality = "–û—Ç–ª–∏—á–Ω–æ–µ"
    elif best_result['mape'] < 25:
        quality = "–•–æ—Ä–æ—à–µ–µ"
    else:
        quality = "–¢—Ä–µ–±—É–µ—Ç —É–ª—É—á—à–µ–Ω–∏—è"
    
    print(f"   ‚Ä¢ –ö–∞—á–µ—Å—Ç–≤–æ –º–æ–¥–µ–ª–∏: {quality}")
    
    print(f"\nüéØ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –≤ –±–∏–∑–Ω–µ—Å–µ:")
    
    # –û—Ü–µ–Ω–∫–∞ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞
    avg_price = 8_000_000  # —Å—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –∫–≤–∞—Ä—Ç–∏—Ä—ã
    manual_evaluation_cost = 5000  # —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ä—É—á–Ω–æ–π –æ—Ü–µ–Ω–∫–∏
    model_evaluation_cost = 100   # —Å—Ç–æ–∏–º–æ—Å—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Ü–µ–Ω–∫–∏
    
    accuracy_threshold = 0.15  # –ø—Ä–∏–µ–º–ª–µ–º–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å ¬±15%
    
    if best_result['mape'] <= accuracy_threshold * 100:
        automation_potential = 80  # –º–æ–∂–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å 80% –æ—Ü–µ–Ω–æ–∫
        print(f"   ‚Ä¢ –ú–æ–∂–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å {automation_potential}% –æ—Ü–µ–Ω–æ–∫")
        print(f"   ‚Ä¢ –≠–∫–æ–Ω–æ–º–∏—è –Ω–∞ –∫–∞–∂–¥–æ–π –æ—Ü–µ–Ω–∫–µ: {manual_evaluation_cost - model_evaluation_cost:,} —Ä—É–±.")
        
        monthly_evaluations = 1000
        monthly_savings = monthly_evaluations * automation_potential/100 * (manual_evaluation_cost - model_evaluation_cost)
        annual_savings = monthly_savings * 12
        
        print(f"   ‚Ä¢ –ü—Ä–∏ {monthly_evaluations:,} –æ—Ü–µ–Ω–æ–∫ –≤ –º–µ—Å—è—Ü:")
        print(f"     - –ú–µ—Å—è—á–Ω–∞—è —ç–∫–æ–Ω–æ–º–∏—è: {monthly_savings:,.0f} —Ä—É–±.")
        print(f"     - –ì–æ–¥–æ–≤–∞—è —ç–∫–æ–Ω–æ–º–∏—è: {annual_savings:,.0f} —Ä—É–±.")
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é
    print(f"\nüîß –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –º–æ–¥–µ–ª–∏:")
    
    if best_result['r2'] < 0.8:
        print(f"   ‚Ä¢ –°–æ–±—Ä–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–∞—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å, –∫—Ä–∏–º–∏–Ω–æ–≥–µ–Ω–Ω–æ—Å—Ç—å")
        print(f"   ‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Ä–µ–º–æ–Ω—Ç–µ –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∫–µ")
        print(f"   ‚Ä¢ –£—á–µ—Å—Ç—å —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç—å —Ä—ã–Ω–∫–∞")
    
    if best_result['mape'] > 20:
        print(f"   ‚Ä¢ –°–µ–≥–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä—ã–Ω–æ–∫ –ø–æ —Ü–µ–Ω–æ–≤—ã–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º")
        print(f"   ‚Ä¢ –°–æ–∑–¥–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–µ –º–æ–¥–µ–ª–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ä–∞–π–æ–Ω–æ–≤")
        print(f"   ‚Ä¢ –ü—Ä–∏–º–µ–Ω–∏—Ç—å –∞–Ω—Å–∞–º–±–ª–µ–≤—ã–µ –º–µ—Ç–æ–¥—ã")
    
    print(f"   ‚Ä¢ –†–µ–≥—É–ª—è—Ä–Ω–æ –ø–µ—Ä–µ–æ–±—É—á–∞—Ç—å –º–æ–¥–µ–ª—å (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∫–∞–∂–¥—ã–µ 3 –º–µ—Å—è—Ü–∞)")
    print(f"   ‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å drift –≤ –¥–∞–Ω–Ω—ã—Ö")

def create_price_prediction_system(best_model, scaler, feature_names):
    """–°–æ–∑–¥–∞–µ—Ç —Å–∏—Å—Ç–µ–º—É –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è —Ü–µ–Ω"""
    print(f"\nüîÆ –°–∏—Å—Ç–µ–º–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è —Ü–µ–Ω –Ω–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å:")
    print("=" * 50)
    
    def predict_apartment_price(apartment_data):
        """
        –ü—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞–µ—Ç —Ü–µ–Ω—É –∫–≤–∞—Ä—Ç–∏—Ä—ã
        
        apartment_data: dict —Å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏ –∫–≤–∞—Ä—Ç–∏—Ä—ã
        """
        # –°–æ–∑–¥–∞–µ–º DataFrame
        df = pd.DataFrame([apartment_data])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
        all_features = set(feature_names)
        current_features = set(df.columns)
        missing_features = all_features - current_features
        
        # –ó–∞–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –Ω—É–ª—è–º–∏ (–¥–ª—è one-hot encoded)
        for feature in missing_features:
            df[feature] = 0
        
        # –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –ø–æ—Ä—è–¥–æ–∫ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π
        X_new = df[feature_names]
        
        # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
        if scaler is not None:
            X_new_scaled = scaler.transform(X_new)
            predicted_price = best_model.predict(X_new_scaled)[0]
        else:
            predicted_price = best_model.predict(X_new)[0]
        
        return max(0, predicted_price)
    
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã
    print(f"üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è:")
    
    test_apartments = [
        {
            "total_area": 65, "rooms": 2, "floor": 5, "total_floors": 16,
            "age": 10, "center_distance": 12, "metro_distance": 0.8,
            "school_rating": 7, "park_distance": 1.5, "noise_level": 4,
            "floor_ratio": 5/16, "has_balcony": 1, "has_parking": 0,
            "has_metro_numeric": 1, "is_new_building": 0, "is_center": 0,
            "is_first_or_last_floor": 0,
            "district_–°–ø–∞–ª—å–Ω—ã–π —Ä–∞–π–æ–Ω": 1, "district_–¶–µ–Ω—Ç—Ä": 0, "district_–ù–æ–≤–æ—Å—Ç—Ä–æ–π–∫–∏": 0, "district_–û–∫—Ä–∞–∏–Ω–∞": 0,
            "renovation_–ö–æ—Å–º–µ—Ç–∏—á–µ—Å–∫–∏–π": 1, "renovation_–ë–µ–∑ —Ä–µ–º–æ–Ω—Ç–∞": 0, "renovation_–ï–≤—Ä–æ—Ä–µ–º–æ–Ω—Ç": 0
        },
        {
            "total_area": 85, "rooms": 3, "floor": 3, "total_floors": 5,
            "age": 25, "center_distance": 5, "metro_distance": 0.3,
            "school_rating": 9, "park_distance": 0.5, "noise_level": 6,
            "floor_ratio": 3/5, "has_balcony": 1, "has_parking": 1,
            "has_metro_numeric": 1, "is_new_building": 0, "is_center": 1,
            "is_first_or_last_floor": 0,
            "district_–¶–µ–Ω—Ç—Ä": 1, "district_–°–ø–∞–ª—å–Ω—ã–π —Ä–∞–π–æ–Ω": 0, "district_–ù–æ–≤–æ—Å—Ç—Ä–æ–π–∫–∏": 0, "district_–û–∫—Ä–∞–∏–Ω–∞": 0,
            "renovation_–ï–≤—Ä–æ—Ä–µ–º–æ–Ω—Ç": 1, "renovation_–ö–æ—Å–º–µ—Ç–∏—á–µ—Å–∫–∏–π": 0, "renovation_–ë–µ–∑ —Ä–µ–º–æ–Ω—Ç–∞": 0
        }
    ]
    
    for i, apartment in enumerate(test_apartments, 1):
        predicted_price = predict_apartment_price(apartment)
        print(f"\n   –ö–≤–∞—Ä—Ç–∏—Ä–∞ {i}:")
        print(f"     ‚Ä¢ {apartment['rooms']}-–∫–æ–º–Ω, {apartment['total_area']} –∫–≤.–º, {apartment['floor']}/{apartment['total_floors']} —ç—Ç–∞–∂")
        print(f"     ‚Ä¢ –í–æ–∑—Ä–∞—Å—Ç: {apartment['age']} –ª–µ—Ç, –¥–æ —Ü–µ–Ω—Ç—Ä–∞: {apartment['center_distance']} –∫–º")
        print(f"     ‚Ä¢ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω–∞—è —Ü–µ–Ω–∞: {predicted_price:,.0f} —Ä—É–±.")
        print(f"     ‚Ä¢ –¶–µ–Ω–∞ –∑–∞ –∫–≤.–º: {predicted_price/apartment['total_area']:,.0f} —Ä—É–±/–∫–≤.–º")
    
    return predict_apartment_price

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–µ–≥—Ä–µ—Å—Å–∏–∏"""
    print("üöÄ –ó–∞–ø—É—Å–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–µ–≥—Ä–µ—Å—Å–∏–æ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π!")
    
    # 1. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏ –∏—Å—Å–ª–µ–¥—É–µ–º –¥–∞–Ω–Ω—ã–µ
    data = generate_real_estate_data()
    explore_real_estate_data(data)
    
    # 2. –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    X, y, feature_names = prepare_regression_data(data)
    
    # 3. –û–±—É—á–∞–µ–º –º–æ–¥–µ–ª–∏
    models, results, X_train, X_test, y_train, y_test, scaler, _ = train_regression_models(X, y, feature_names)
    
    # 4. –í–∏–∑—É–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    visualize_regression_results(models, results, X_test, y_test, feature_names)
    
    # 5. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–∞–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
    analyze_feature_importance_regression(models, feature_names)
    
    # 6. –ö—Ä–æ—Å—Å-–≤–∞–ª–∏–¥–∞—Ü–∏—è
    cross_validation_regression(models, X, y)
    
    # 7. –ë–∏–∑–Ω–µ—Å-–ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ
    business_case_real_estate(results, models, feature_names)
    
    # 8. –°–æ–∑–¥–∞–µ–º —Å–∏—Å—Ç–µ–º—É –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
    best_model_name = max(results.keys(), key=lambda x: results[x]['r2'])
    best_model = results[best_model_name]['model']
    best_scaler = scaler if 'Ridge' in best_model_name or 'Lasso' in best_model_name else None
    
    predict_func = create_price_prediction_system(best_model, best_scaler, feature_names)
    
    print(f"\nüéâ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–µ–≥—Ä–µ—Å—Å–∏–æ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print("üìö –°–ª–µ–¥—É—é—â–∏–π —à–∞–≥: –∏–∑—É—á–∏—Ç–µ model_evaluation.py")
    print("üí° –°–æ–≤–µ—Ç: —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ —Å feature engineering –∏ —Ä–µ–≥—É–ª—è—Ä–∏–∑–∞—Ü–∏–µ–π!")
    
    return models, results, predict_func

if __name__ == "__main__":
    models, results, predict_function = main()