"""
üéõÔ∏è –®–∞–±–ª–æ–Ω –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞—à–±–æ—Ä–¥–æ–≤ - –≤–∞—à–∞ —Å—Ç—É–¥–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏!

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ:
- –ú–Ω–æ–≥–æ–ø–∞–Ω–µ–ª—å–Ω—ã—Ö –¥–∞—à–±–æ—Ä–¥–æ–≤
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö KPI —Ä–∞—Å—á–µ—Ç–æ–≤
- –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ —Å—Ç–∏–ª—è
- –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
"""

import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd
import numpy as np
from datetime import datetime, timedelta
import matplotlib.patches as patches

print("üéõÔ∏è –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞—à–±–æ—Ä–¥—ã!")
print("=" * 50)

def setup_corporate_style():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ —Å—Ç–∏–ª—è"""
    # –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ —Ü–≤–µ—Ç–∞
    corporate_colors = ['#2E86AB', '#A23B72', '#F18F01', '#C73E1D', '#592E83']
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ matplotlib
    plt.rcParams.update({
        'font.size': 10,
        'font.family': 'DejaVu Sans',
        'axes.titlesize': 12,
        'axes.labelsize': 10,
        'xtick.labelsize': 9,
        'ytick.labelsize': 9,
        'legend.fontsize': 9,
        'figure.titlesize': 16,
        'axes.grid': True,
        'grid.alpha': 0.3,
        'axes.axisbelow': True
    })
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–∞–ª–∏—Ç—Ä—É
    sns.set_palette(corporate_colors)
    sns.set_style("whitegrid")
    
    return corporate_colors

def load_sample_data():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∏–ª–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–∏–º–µ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞"""
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        sales_df = pd.read_csv('sales_trends.csv')
        customers_df = pd.read_csv('customer_analytics.csv')
        print("‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ —Ñ–∞–π–ª–æ–≤")
        return sales_df, customers_df
    except FileNotFoundError:
        print("üìÅ –§–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö...")
        return generate_dashboard_data()

def generate_dashboard_data():
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–∏–º–µ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞"""
    np.random.seed(42)
    
    # –î–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥–∞–∂ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 12 –º–µ—Å—è—Ü–µ–≤
    months = pd.date_range('2024-01-01', '2024-12-01', freq='MS')
    sales_data = []
    
    for month in months:
        base_sales = 1000000 + np.random.normal(0, 200000)
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç—å
        if month.month in [11, 12]:  # –í—ã—Å–æ–∫–∏–π —Å–µ–∑–æ–Ω
            base_sales *= 1.3
        elif month.month in [6, 7, 8]:  # –°—Ä–µ–¥–Ω–∏–π —Å–µ–∑–æ–Ω
            base_sales *= 1.1
        
        sales_data.append({
            '–º–µ—Å—è—Ü': month.strftime('%Y-%m'),
            '–¥–∞—Ç–∞': month,
            '–≤—ã—Ä—É—á–∫–∞': max(base_sales, 500000),
            '–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–∑–∞–∫–∞–∑–æ–≤': int(base_sales / np.random.normal(2000, 300)),
            '–∫–∞–Ω–∞–ª': np.random.choice(['–û–Ω–ª–∞–π–Ω', '–û—Ñ–ª–∞–π–Ω', '–ú–æ–±–∞–π–ª'])
        })
    
    sales_df = pd.DataFrame(sales_data)
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–æ–≤
    customers_data = []
    segments = ['VIP', '–û–±—ã—á–Ω—ã–π', '–ù–æ–≤—ã–π']
    cities = ['–ú–æ—Å–∫–≤–∞', '–°–ü–±', '–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥', '–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫']
    
    for i in range(200):
        segment = np.random.choice(segments, p=[0.1, 0.6, 0.3])
        city = np.random.choice(cities)
        
        customers_data.append({
            '—Å–µ–≥–º–µ–Ω—Ç': segment,
            '–≥–æ—Ä–æ–¥': city,
            '–¥–æ—Ö–æ–¥': np.random.normal(80000 if segment == 'VIP' else 45000, 15000),
            '—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç—å': np.random.normal(8 if segment == 'VIP' else 7, 1)
        })
    
    customers_df = pd.DataFrame(customers_data)
    
    return sales_df, customers_df

def calculate_kpis(sales_df, customers_df):
    """–†–∞—Å—á–µ—Ç –∫–ª—é—á–µ–≤—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
    kpis = {}
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ KPI –ø—Ä–æ–¥–∞–∂
    kpis['total_revenue'] = sales_df['–≤—ã—Ä—É—á–∫–∞'].sum()
    kpis['avg_monthly_revenue'] = sales_df['–≤—ã—Ä—É—á–∫–∞'].mean()
    kpis['total_orders'] = sales_df['–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–∑–∞–∫–∞–∑–æ–≤'].sum()
    kpis['avg_order_value'] = kpis['total_revenue'] / kpis['total_orders']
    
    # –†–æ—Å—Ç –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É –ø–µ—Ä–∏–æ–¥—É (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 6 vs –ø—Ä–µ–¥—ã–¥—É—â–∏–µ 6 –º–µ—Å—è—Ü–µ–≤)
    if len(sales_df) >= 12:
        recent_6 = sales_df.tail(6)['–≤—ã—Ä—É—á–∫–∞'].sum()
        previous_6 = sales_df.iloc[-12:-6]['–≤—ã—Ä—É—á–∫–∞'].sum()
        kpis['revenue_growth'] = ((recent_6 / previous_6) - 1) * 100
    else:
        kpis['revenue_growth'] = 0
    
    # KPI –∫–ª–∏–µ–Ω—Ç–æ–≤
    if not customers_df.empty:
        kpis['total_customers'] = len(customers_df)
        kpis['avg_satisfaction'] = customers_df['—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç—å'].mean()
        kpis['vip_customers'] = len(customers_df[customers_df['—Å–µ–≥–º–µ–Ω—Ç'] == 'VIP'])
        kpis['vip_percentage'] = (kpis['vip_customers'] / kpis['total_customers']) * 100
    
    return kpis

def create_sales_dashboard(sales_df, customers_df=None):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –¥–∞—à–±–æ—Ä–¥–∞ –ø—Ä–æ–¥–∞–∂"""
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ —Å—Ç–∏–ª—è
    colors = setup_corporate_style()
    
    # –†–∞—Å—á–µ—Ç KPI
    kpis = calculate_kpis(sales_df, customers_df if customers_df is not None else pd.DataFrame())
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∏–≥—É—Ä—ã —Å –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º–æ–π —Å–µ—Ç–∫–æ–π
    fig = plt.figure(figsize=(20, 14))
    fig.suptitle('üìä –î–∞—à–±–æ—Ä–¥ –ø—Ä–æ–¥–∞–∂ –∫–æ–º–ø–∞–Ω–∏–∏', fontsize=20, y=0.96, fontweight='bold')
    
    # 1. –î–∏–Ω–∞–º–∏–∫–∞ –ø—Ä–æ–¥–∞–∂ (–≥–ª–∞–≤–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫)
    ax1 = plt.subplot2grid((4, 6), (0, 0), colspan=4, rowspan=2)
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ä—è–¥–∞
    if '–¥–∞—Ç–∞' not in sales_df.columns:
        sales_df['–¥–∞—Ç–∞'] = pd.to_datetime(sales_df['–º–µ—Å—è—Ü'])
    
    monthly_sales = sales_df.groupby('–º–µ—Å—è—Ü')['–≤—ã—Ä—É—á–∫–∞'].sum().reset_index()
    monthly_sales['–¥–∞—Ç–∞'] = pd.to_datetime(monthly_sales['–º–µ—Å—è—Ü'])
    
    # –°—Ç—Ä–æ–∏–º –æ—Å–Ω–æ–≤–Ω–æ–π –≥—Ä–∞—Ñ–∏–∫ –¥–∏–Ω–∞–º–∏–∫–∏
    ax1.plot(monthly_sales['–¥–∞—Ç–∞'], monthly_sales['–≤—ã—Ä—É—á–∫–∞'], 
             marker='o', linewidth=3, markersize=8, color=colors[0])
    ax1.fill_between(monthly_sales['–¥–∞—Ç–∞'], monthly_sales['–≤—ã—Ä—É—á–∫–∞'], 
                     alpha=0.3, color=colors[0])
    
    ax1.set_title('üìà –î–∏–Ω–∞–º–∏–∫–∞ –≤—ã—Ä—É—á–∫–∏ –ø–æ –º–µ—Å—è—Ü–∞–º', fontsize=14, pad=20)
    ax1.set_ylabel('–í—ã—Ä—É—á–∫–∞, –º–ª–Ω —Ä—É–±.')
    ax1.tick_params(axis='x', rotation=45)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏ –¥–ª—è –º–∞–∫—Å–∏–º—É–º–æ–≤
    max_revenue = monthly_sales['–≤—ã—Ä—É—á–∫–∞'].max()
    max_month = monthly_sales[monthly_sales['–≤—ã—Ä—É—á–∫–∞'] == max_revenue]['–¥–∞—Ç–∞'].iloc[0]
    ax1.annotate(f'–ü–∏–∫: {max_revenue/1e6:.1f}–ú —Ä—É–±', 
                xy=(max_month, max_revenue),
                xytext=(10, 20), textcoords='offset points',
                bbox=dict(boxstyle='round,pad=0.3', facecolor='yellow', alpha=0.7),
                arrowprops=dict(arrowstyle='->', connectionstyle='arc3,rad=0'))
    
    # 2. KPI –±–ª–æ–∫
    ax2 = plt.subplot2grid((4, 6), (0, 4), colspan=2, rowspan=2)
    ax2.axis('off')
    
    # –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Å–∏–≤—ã–µ KPI –∫–∞—Ä—Ç–æ—á–∫–∏
    kpi_text = f"""
    üí∞ –ö–õ–Æ–ß–ï–í–´–ï –ü–û–ö–ê–ó–ê–¢–ï–õ–ò
    
    üìä –û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞:
        {kpis['total_revenue']/1e6:.1f} –º–ª–Ω —Ä—É–±.
    
    üìà –†–æ—Å—Ç –≤—ã—Ä—É—á–∫–∏:
        {kpis['revenue_growth']:+.1f}%
    
    üõí –°—Ä–µ–¥–Ω–∏–π —á–µ–∫:
        {kpis['avg_order_value']:,.0f} —Ä—É–±.
    
    üì¶ –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤:
        {kpis['total_orders']:,}
    
    üéØ –°—Ä–µ–¥–Ω–µ–º–µ—Å—è—á–Ω–∞—è –≤—ã—Ä—É—á–∫–∞:
        {kpis['avg_monthly_revenue']/1e6:.1f} –º–ª–Ω —Ä—É–±.
    """
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç –¥–ª—è —Ä–æ—Å—Ç–∞
    growth_color = 'green' if kpis['revenue_growth'] > 0 else 'red'
    
    ax2.text(0.05, 0.95, kpi_text, transform=ax2.transAxes, 
             fontsize=11, verticalalignment='top', fontweight='normal',
             bbox=dict(boxstyle="round,pad=1", facecolor='lightblue', alpha=0.8))
    
    # 3. –¢–æ–ø –∫–∞–Ω–∞–ª–æ–≤ –ø—Ä–æ–¥–∞–∂
    ax3 = plt.subplot2grid((4, 6), (2, 0), colspan=2)
    
    if '–∫–∞–Ω–∞–ª' in sales_df.columns:
        channel_sales = sales_df.groupby('–∫–∞–Ω–∞–ª')['–≤—ã—Ä—É—á–∫–∞'].sum().sort_values(ascending=True)
        bars = ax3.barh(range(len(channel_sales)), channel_sales.values, 
                        color=colors[:len(channel_sales)])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ —Å—Ç–æ–ª–±—Ü—ã
        for i, (channel, value) in enumerate(channel_sales.items()):
            ax3.text(value + max(channel_sales) * 0.01, i, f'{value/1e6:.1f}–ú',
                     va='center', fontweight='bold')
        
        ax3.set_yticks(range(len(channel_sales)))
        ax3.set_yticklabels(channel_sales.index)
        ax3.set_title('üõí –ü—Ä–æ–¥–∞–∂–∏ –ø–æ –∫–∞–Ω–∞–ª–∞–º')
        ax3.set_xlabel('–í—ã—Ä—É—á–∫–∞, –º–ª–Ω —Ä—É–±.')
    
    # 4. –†–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø—Ä–æ–¥–∞–∂–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –∫–ª–∏–µ–Ω—Ç–∞—Ö)
    ax4 = plt.subplot2grid((4, 6), (2, 2), colspan=2)
    
    if customers_df is not None and not customers_df.empty and '–≥–æ—Ä–æ–¥' in customers_df.columns:
        city_distribution = customers_df['–≥–æ—Ä–æ–¥'].value_counts()
        
        # –°–æ–∑–¥–∞–µ–º –∫—Ä—É–≥–æ–≤—É—é –¥–∏–∞–≥—Ä–∞–º–º—É
        wedges, texts, autotexts = ax4.pie(city_distribution.values, 
                                           labels=city_distribution.index,
                                           autopct='%1.1f%%',
                                           colors=colors[:len(city_distribution)])
        
        ax4.set_title('üèôÔ∏è –ì–µ–æ–≥—Ä–∞—Ñ–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤')
        
        # –£–ª—É—á—à–∞–µ–º —á–∏—Ç–∞–µ–º–æ—Å—Ç—å –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤
        for autotext in autotexts:
            autotext.set_color('white')
            autotext.set_fontweight('bold')
    else:
        # –ó–∞–≥–ª—É—à–∫–∞, –µ—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö
        ax4.text(0.5, 0.5, 'üìç –ì–µ–æ–≥—Ä–∞—Ñ–∏—è\n–¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç', 
                 ha='center', va='center', transform=ax4.transAxes,
                 bbox=dict(boxstyle="round,pad=0.3", facecolor='lightgray', alpha=0.7))
        ax4.set_xlim(0, 1)
        ax4.set_ylim(0, 1)
        ax4.axis('off')
    
    # 5. –°–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤
    ax5 = plt.subplot2grid((4, 6), (2, 4), colspan=2)
    
    if customers_df is not None and not customers_df.empty and '—Å–µ–≥–º–µ–Ω—Ç' in customers_df.columns:
        segment_counts = customers_df['—Å–µ–≥–º–µ–Ω—Ç'].value_counts()
        colors_segments = [colors[0], colors[1], colors[2]]
        
        bars = ax5.bar(segment_counts.index, segment_counts.values, 
                       color=colors_segments[:len(segment_counts)])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ —Å—Ç–æ–ª–±—Ü—ã
        for bar, value in zip(bars, segment_counts.values):
            height = bar.get_height()
            ax5.text(bar.get_x() + bar.get_width()/2., height + max(segment_counts) * 0.01,
                     f'{value}', ha='center', va='bottom', fontweight='bold')
        
        ax5.set_title('üë• –°–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤')
        ax5.set_ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∏–µ–Ω—Ç–æ–≤')
    else:
        ax5.text(0.5, 0.5, 'üë• –°–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è\n–¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç', 
                 ha='center', va='center', transform=ax5.transAxes,
                 bbox=dict(boxstyle="round,pad=0.3", facecolor='lightgray', alpha=0.7))
        ax5.set_xlim(0, 1)
        ax5.set_ylim(0, 1)
        ax5.axis('off')
    
    # 6. –ê–Ω–∞–ª–∏–∑ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ)
    ax6 = plt.subplot2grid((4, 6), (3, 0), colspan=3)
    
    if customers_df is not None and not customers_df.empty and '—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç—å' in customers_df.columns:
        # –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
        ax6.hist(customers_df['—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç—å'], bins=10, 
                 color=colors[1], alpha=0.7, edgecolor='black')
        ax6.axvline(customers_df['—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç—å'].mean(), 
                    color='red', linestyle='--', linewidth=2,
                    label=f'–°—Ä–µ–¥–Ω–µ–µ: {customers_df["—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç—å"].mean():.1f}')
        ax6.set_title('üìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤')
        ax6.set_xlabel('–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç—å (1-10)')
        ax6.set_ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∏–µ–Ω—Ç–æ–≤')
        ax6.legend()
    else:
        ax6.text(0.5, 0.5, 'üòä –£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç—å\n–¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç', 
                 ha='center', va='center', transform=ax6.transAxes,
                 bbox=dict(boxstyle="round,pad=0.3", facecolor='lightgray', alpha=0.7))
        ax6.set_xlim(0, 1)
        ax6.set_ylim(0, 1)
        ax6.axis('off')
    
    # 7. –ò–Ω—Å–∞–π—Ç—ã –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    ax7 = plt.subplot2grid((4, 6), (3, 3), colspan=3)
    ax7.axis('off')
    
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∏–Ω—Å–∞–π—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö
    insights = generate_insights(sales_df, customers_df, kpis)
    
    insights_text = "üí° –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ï –ò–ù–°–ê–ô–¢–´:\n\n" + "\n".join([f"‚Ä¢ {insight}" for insight in insights])
    
    ax7.text(0.05, 0.95, insights_text, transform=ax7.transAxes, 
             fontsize=10, verticalalignment='top',
             bbox=dict(boxstyle="round,pad=1", facecolor='lightyellow', alpha=0.8))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞—Ç—É —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞
    fig.text(0.99, 0.01, f'–°–æ–∑–¥–∞–Ω–æ: {datetime.now().strftime("%Y-%m-%d %H:%M")}', 
             ha='right', va='bottom', fontsize=8, alpha=0.7)
    
    plt.tight_layout()
    plt.subplots_adjust(top=0.93, bottom=0.05)
    
    return fig

def generate_insights(sales_df, customers_df, kpis):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∏–Ω—Å–∞–π—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö"""
    insights = []
    
    # –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–∞ –ø—Ä–æ–¥–∞–∂
    if kpis['revenue_growth'] > 10:
        insights.append("–û—Ç–ª–∏—á–Ω—ã–π —Ä–æ—Å—Ç –≤—ã—Ä—É—á–∫–∏! –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–π—Ç–µ —É—Å–ø–µ—à–Ω—ã–µ –∫–∞–Ω–∞–ª—ã")
    elif kpis['revenue_growth'] > 0:
        insights.append("–ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π —Ä–æ—Å—Ç, –Ω–æ –µ—Å—Ç—å –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è")
    else:
        insights.append("–°–Ω–∏–∂–µ–Ω–∏–µ –≤—ã—Ä—É—á–∫–∏ —Ç—Ä–µ–±—É–µ—Ç –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –≤–Ω–∏–º–∞–Ω–∏—è")
    
    # –ê–Ω–∞–ª–∏–∑ —Å—Ä–µ–¥–Ω–µ–≥–æ —á–µ–∫–∞
    if kpis['avg_order_value'] > 3000:
        insights.append("–í—ã—Å–æ–∫–∏–π —Å—Ä–µ–¥–Ω–∏–π —á–µ–∫ - —Ñ–æ–∫—É—Å –Ω–∞ —É–¥–µ—Ä–∂–∞–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤")
    elif kpis['avg_order_value'] < 1500:
        insights.append("–ù–∏–∑–∫–∏–π —Å—Ä–µ–¥–Ω–∏–π —á–µ–∫ - —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ upsell —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏")
    
    # –ê–Ω–∞–ª–∏–∑ —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç–∏
    if '–º–µ—Å—è—Ü' in sales_df.columns:
        monthly_revenue = sales_df.groupby('–º–µ—Å—è—Ü')['–≤—ã—Ä—É—á–∫–∞'].sum()
        if len(monthly_revenue) >= 3:
            max_month = monthly_revenue.idxmax()
            insights.append(f"–ü–∏–∫–æ–≤—ã–π –º–µ—Å—è—Ü: {max_month} - –ø–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ—Å—å –∫ —Å–µ–∑–æ–Ω—É")
    
    # –ê–Ω–∞–ª–∏–∑ –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–π –±–∞–∑—ã
    if customers_df is not None and not customers_df.empty:
        if 'vip_percentage' in kpis and kpis['vip_percentage'] < 15:
            insights.append("–ú–∞–ª–æ VIP –∫–ª–∏–µ–Ω—Ç–æ–≤ - —Ä–∞–∑–≤–∏–≤–∞–π—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏")
        
        if 'avg_satisfaction' in kpis:
            if kpis['avg_satisfaction'] > 8:
                insights.append("–í—ã—Å–æ–∫–∞—è —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç—å - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–ª—è —Ä–µ—Ñ–µ—Ä—Ä–∞–ª–æ–≤")
            elif kpis['avg_satisfaction'] < 6:
                insights.append("–ù–∏–∑–∫–∞—è —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç—å - —Å—Ä–æ—á–Ω–æ —É–ª—É—á—à–∞–π—Ç–µ —Å–µ—Ä–≤–∏—Å")
    
    # –ï—Å–ª–∏ –∏–Ω—Å–∞–π—Ç–æ–≤ –º–∞–ª–æ, –¥–æ–±–∞–≤–ª—è–µ–º –æ–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    if len(insights) < 3:
        insights.extend([
            "–†–µ–≥—É–ª—è—Ä–Ω–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ –∫–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏",
            "–ü—Ä–æ–≤–æ–¥–∏—Ç–µ A/B —Ç–µ—Å—Ç—ã –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏",
            "–ê–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –ª—É—á—à–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤"
        ])
    
    return insights[:5]  # –ú–∞–∫—Å–∏–º—É–º 5 –∏–Ω—Å–∞–π—Ç–æ–≤

def save_dashboard(fig, filename='dashboard'):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞—à–±–æ—Ä–¥–∞ –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö"""
    formats = ['png', 'pdf', 'svg']
    
    for fmt in formats:
        full_filename = f'{filename}.{fmt}'
        fig.savefig(full_filename, dpi=300, bbox_inches='tight', 
                   facecolor='white', edgecolor='none')
        print(f"‚úÖ –î–∞—à–±–æ—Ä–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {full_filename}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–∞—à–±–æ—Ä–¥–∞ —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
def create_interactive_dashboard():
    """–°–æ–∑–¥–∞–Ω–∏–µ –¥–∞—à–±–æ—Ä–¥–∞ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏"""
    print("\nüéõÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–∞—à–±–æ—Ä–¥–∞...")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    sales_df, customers_df = load_sample_data()
    
    # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –¥–∞—à–±–æ—Ä–¥
    fig = create_sales_dashboard(sales_df, customers_df)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∞—à–±–æ—Ä–¥
    plt.show()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö
    save_dashboard(fig, 'professional_dashboard')
    
    return fig

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å—Ç–∏–ª–µ–π –¥–∞—à–±–æ—Ä–¥–æ–≤
def create_dashboard_variants():
    """–°–æ–∑–¥–∞–Ω–∏–µ –¥–∞—à–±–æ—Ä–¥–æ–≤ –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å—Ç–∏–ª—è—Ö"""
    print("\nüé® –°–æ–∑–¥–∞–Ω–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –¥–∞—à–±–æ—Ä–¥–æ–≤...")
    
    sales_df, customers_df = load_sample_data()
    
    styles = [
        ('corporate', ['#2E86AB', '#A23B72', '#F18F01', '#C73E1D']),
        ('modern', ['#FF6B35', '#004E89', '#1A936F', '#88D498']),
        ('classic', ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728'])
    ]
    
    for style_name, colors in styles:
        plt.style.use('default')
        sns.set_palette(colors)
        
        fig = create_sales_dashboard(sales_df, customers_df)
        save_dashboard(fig, f'dashboard_{style_name}')
        plt.close(fig)
        
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω –¥–∞—à–±–æ—Ä–¥ –≤ —Å—Ç–∏–ª–µ: {style_name}")

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –¥–∞—à–±–æ—Ä–¥–æ–≤"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞—à–±–æ—Ä–¥–æ–≤!")
    
    # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –¥–∞—à–±–æ—Ä–¥
    dashboard = create_interactive_dashboard()
    
    print("\nüéâ –î–∞—à–±–æ—Ä–¥ —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!")
    print("üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:")
    print("  ‚Ä¢ –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ CSV —Ñ–∞–π–ª–∞—Ö")
    print("  ‚Ä¢ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ —Ü–≤–µ—Ç–∞")
    print("  ‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ KPI –º–µ—Ç—Ä–∏–∫–∏")

if __name__ == "__main__":
    main()