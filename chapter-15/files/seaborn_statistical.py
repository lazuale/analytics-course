"""
üé® –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ —Å Seaborn - –¥–µ–ª–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫—Ä–∞—Å–∏–≤—ã–º–∏!

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ Seaborn:
- –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏ –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—ã
- –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω—ã–µ –º–∞—Ç—Ä–∏—Ü—ã
- –ö–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
- –ü–∞—Ä–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏
- –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è –∏ —Ü–≤–µ—Ç–æ–≤—ã–µ –ø–∞–ª–∏—Ç—Ä—ã
"""

import seaborn as sns
import matplotlib.pyplot as plt
import pandas as pd
import numpy as np

print("üåà –ò–∑—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –≥—Ä–∞—Ñ–∏–∫–∏ —Å Seaborn!")
print("=" * 55)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Seaborn –¥–ª—è –∫—Ä–∞—Å–∏–≤—ã—Ö –≥—Ä–∞—Ñ–∏–∫–æ–≤
sns.set_style("whitegrid")
sns.set_palette("husl")
plt.rcParams['figure.figsize'] = (10, 6)

def generate_sample_data():
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–∏–º–µ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    np.random.seed(42)
    
    n_samples = 500
    data = {
        '–≤–æ–∑—Ä–∞—Å—Ç': np.random.normal(35, 12, n_samples).astype(int),
        '–¥–æ—Ö–æ–¥': np.random.lognormal(10.5, 0.5, n_samples),
        '—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç—å': np.random.normal(7, 1.5, n_samples),
        '–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–ø–æ–∫—É–ø–æ–∫': np.random.poisson(8, n_samples),
    }
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    data['–ø–æ–ª'] = np.random.choice(['–ú', '–ñ'], n_samples)
    data['—Å–µ–≥–º–µ–Ω—Ç'] = np.random.choice(['VIP', '–û–±—ã—á–Ω—ã–π', '–ù–æ–≤—ã–π'], n_samples, p=[0.2, 0.6, 0.2])
    data['–≥–æ—Ä–æ–¥'] = np.random.choice(['–ú–æ—Å–∫–≤–∞', '–°–ü–±', '–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥', '–ö–∞–∑–∞–Ω—å'], n_samples)
    
    # –°–æ–∑–¥–∞–µ–º –≤–∑–∞–∏–º–æ—Å–≤—è–∑–∏ –≤ –¥–∞–Ω–Ω—ã—Ö
    data['–¥–æ—Ö–æ–¥'] = data['–¥–æ—Ö–æ–¥'] + (data['–≤–æ–∑—Ä–∞—Å—Ç'] - 25) * 500
    data['–¥–æ—Ö–æ–¥'] = np.where(data['–ø–æ–ª'] == '–ú', data['–¥–æ—Ö–æ–¥'] * 1.2, data['–¥–æ—Ö–æ–¥'])
    data['—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç—å'] = np.clip(data['—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç—å'], 1, 10)
    data['–≤–æ–∑—Ä–∞—Å—Ç'] = np.clip(data['–≤–æ–∑—Ä–∞—Å—Ç'], 18, 75)
    
    return pd.DataFrame(data)

def demo_distributions(data):
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π"""
    print("\nüìä 1. –ò—Å—Å–ª–µ–¥—É–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö")
    
    fig, axes = plt.subplots(2, 2, figsize=(15, 10))
    fig.suptitle('üìä –ê–Ω–∞–ª–∏–∑ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π –∫–ª–∏–µ–Ω—Ç–æ–≤', fontsize=16, y=0.98)
    
    # –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ —Å –ø–ª–æ—Ç–Ω–æ—Å—Ç—å—é
    sns.histplot(data=data, x='–≤–æ–∑—Ä–∞—Å—Ç', kde=True, bins=25, ax=axes[0,0])
    axes[0,0].set_title('üìà –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–æ–∑—Ä–∞—Å—Ç–∞')
    axes[0,0].set_xlabel('–í–æ–∑—Ä–∞—Å—Ç, –ª–µ—Ç')
    
    # –Ø—â–∏–∫–∏ —Å —É—Å–∞–º–∏ –ø–æ —Å–µ–≥–º–µ–Ω—Ç–∞–º
    sns.boxplot(data=data, x='—Å–µ–≥–º–µ–Ω—Ç', y='–¥–æ—Ö–æ–¥', ax=axes[0,1])
    axes[0,1].set_title('üì¶ –î–æ—Ö–æ–¥—ã –ø–æ —Å–µ–≥–º–µ–Ω—Ç–∞–º –∫–ª–∏–µ–Ω—Ç–æ–≤')
    axes[0,1].set_ylabel('–î–æ—Ö–æ–¥, —Ç—ã—Å. —Ä—É–±.')
    
    # Violin plot - –∫—Ä–∞—Å–∏–≤–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
    sns.violinplot(data=data, x='–ø–æ–ª', y='—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç—å', ax=axes[1,0])
    axes[1,0].set_title('üéª –£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç—å –ø–æ –ø–æ–ª—É')
    axes[1,0].set_ylabel('–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç—å (1-10)')
    
    # –°–æ–≤–æ–∫—É–ø–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
    sns.ecdfplot(data=data, x='–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–ø–æ–∫—É–ø–æ–∫', ax=axes[1,1])
    axes[1,1].set_title('üìà –ö—É–º—É–ª—è—Ç–∏–≤–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–∫—É–ø–æ–∫')
    axes[1,1].set_xlabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∫—É–ø–æ–∫')
    
    plt.tight_layout()
    plt.show()
    
    print("‚úÖ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏–∑—É—á–µ–Ω—ã!")

def demo_correlations(data):
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω—ã—Ö –≥—Ä–∞—Ñ–∏–∫–æ–≤"""
    print("\nüîó 2. –ò—â–µ–º —Å–≤—è–∑–∏ –≤ –¥–∞–Ω–Ω—ã—Ö")
    
    # –í—ã–±–∏—Ä–∞–µ–º —á–∏—Å–ª–æ–≤—ã–µ —Å—Ç–æ–ª–±—Ü—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    numeric_cols = ['–≤–æ–∑—Ä–∞—Å—Ç', '–¥–æ—Ö–æ–¥', '—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç—å', '–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–ø–æ–∫—É–ø–æ–∫']
    correlation_data = data[numeric_cols]
    
    fig, axes = plt.subplots(1, 2, figsize=(16, 6))
    fig.suptitle('üîç –ü–æ–∏—Å–∫ –≤–∑–∞–∏–º–æ—Å–≤—è–∑–µ–π –≤ –¥–∞–Ω–Ω—ã—Ö', fontsize=16)
    
    # –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞
    correlation_matrix = correlation_data.corr()
    sns.heatmap(correlation_matrix, 
                annot=True,           # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è
                cmap='RdYlBu_r',     # –ö—Ä–∞—Å–∏–≤–æ-—Å–∏–Ω—è—è –ø–∞–ª–∏—Ç—Ä–∞
                center=0,            # –¶–µ–Ω—Ç—Ä –Ω–∞ –Ω—É–ª–µ
                square=True,         # –ö–≤–∞–¥—Ä–∞—Ç–Ω—ã–µ —è—á–µ–π–∫–∏
                fmt='.2f',           # –§–æ—Ä–º–∞—Ç —á–∏—Å–µ–ª
                ax=axes[0])
    axes[0].set_title('üî• –¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π')
    
    # –î–∏–∞–≥—Ä–∞–º–º–∞ —Ä–∞—Å—Å–µ–∏–≤–∞–Ω–∏—è —Å –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–æ–π
    sns.scatterplot(data=data, x='–≤–æ–∑—Ä–∞—Å—Ç', y='–¥–æ—Ö–æ–¥', 
                    hue='—Å–µ–≥–º–µ–Ω—Ç', size='—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç—å',
                    sizes=(50, 200), alpha=0.7, ax=axes[1])
    axes[1].set_title('üí´ –í–æ–∑—Ä–∞—Å—Ç vs –î–æ—Ö–æ–¥ (–ø–æ —Å–µ–≥–º–µ–Ω—Ç–∞–º)')
    axes[1].set_xlabel('–í–æ–∑—Ä–∞—Å—Ç, –ª–µ—Ç')
    axes[1].set_ylabel('–î–æ—Ö–æ–¥, —Ç—ã—Å. —Ä—É–±.')
    
    plt.tight_layout()
    plt.show()
    
    print("‚úÖ –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –Ω–∞–π–¥–µ–Ω—ã!")

def demo_categorical_data(data):
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã —Å –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
    print("\nüìã 3. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
    
    fig, axes = plt.subplots(2, 2, figsize=(15, 10))
    fig.suptitle('üìã –ê–Ω–∞–ª–∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö', fontsize=16, y=0.98)
    
    # –ü–æ–¥—Å—á–µ—Ç –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    sns.countplot(data=data, x='–≥–æ—Ä–æ–¥', ax=axes[0,0])
    axes[0,0].set_title('üèôÔ∏è –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ –≥–æ—Ä–æ–¥–∞–º')
    axes[0,0].tick_params(axis='x', rotation=45)
    
    # –°—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    sns.barplot(data=data, x='—Å–µ–≥–º–µ–Ω—Ç', y='–¥–æ—Ö–æ–¥', ax=axes[0,1])
    axes[0,1].set_title('üí∞ –°—Ä–µ–¥–Ω–∏–π –¥–æ—Ö–æ–¥ –ø–æ —Å–µ–≥–º–µ–Ω—Ç–∞–º')
    axes[0,1].set_ylabel('–°—Ä–µ–¥–Ω–∏–π –¥–æ—Ö–æ–¥, —Ç—ã—Å. —Ä—É–±.')
    
    # Point plot –¥–ª—è —Ç—Ä–µ–Ω–¥–æ–≤
    sns.pointplot(data=data, x='–≥–æ—Ä–æ–¥', y='—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç—å', 
                  hue='—Å–µ–≥–º–µ–Ω—Ç', ax=axes[1,0])
    axes[1,0].set_title('üìà –£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç—å: –≥–æ—Ä–æ–¥ √ó —Å–µ–≥–º–µ–Ω—Ç')
    axes[1,0].tick_params(axis='x', rotation=45)
    axes[1,0].legend(title='–°–µ–≥–º–µ–Ω—Ç', bbox_to_anchor=(1.05, 1), loc='upper left')
    
    # Swarm plot –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
    sns.swarmplot(data=data.sample(100), x='–ø–æ–ª', y='–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–ø–æ–∫—É–ø–æ–∫', 
                  hue='—Å–µ–≥–º–µ–Ω—Ç', ax=axes[1,1])
    axes[1,1].set_title('üêù –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ–∫—É–ø–æ–∫')
    axes[1,1].set_ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∫—É–ø–æ–∫')
    
    plt.tight_layout()
    plt.show()
    
    print("‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã!")

def demo_pairplot(data):
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–∞—Ä–Ω—ã—Ö –≥—Ä–∞—Ñ–∏–∫–æ–≤"""
    print("\nüîç 4. –ò—Å—Å–ª–µ–¥—É–µ–º –≤—Å–µ —Å–≤—è–∑–∏ —Å—Ä–∞–∑—É")
    
    # –í—ã–±–∏—Ä–∞–µ–º –ø–æ–¥–º–Ω–æ–∂–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–∞—Ä–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
    sample_data = data.sample(200)  # –ú–µ–Ω—å—à–µ —Ç–æ—á–µ–∫ –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
    numeric_cols = ['–≤–æ–∑—Ä–∞—Å—Ç', '–¥–æ—Ö–æ–¥', '—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç—å', '–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–ø–æ–∫—É–ø–æ–∫']
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞—Ä–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏
    g = sns.pairplot(sample_data[numeric_cols + ['—Å–µ–≥–º–µ–Ω—Ç']], 
                     hue='—Å–µ–≥–º–µ–Ω—Ç',
                     diag_kind='kde',      # –ü–ª–æ—Ç–Ω–æ—Å—Ç–∏ –Ω–∞ –¥–∏–∞–≥–æ–Ω–∞–ª–∏
                     corner=True)          # –¢–æ–ª—å–∫–æ –Ω–∏–∂–Ω–∏–π —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫
    
    g.fig.suptitle('üîç –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Å–≤—è–∑–µ–π –º–µ–∂–¥—É –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏', 
                   y=1.02, fontsize=14)
    
    plt.show()
    
    print("‚úÖ –í—Å–µ —Å–≤—è–∑–∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω—ã!")

def demo_style_gallery():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å—Ç–∏–ª–µ–π Seaborn"""
    print("\nüé® 5. –ì–∞–ª–µ—Ä–µ—è —Å—Ç–∏–ª–µ–π Seaborn")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    tips = sns.load_dataset("tips")
    
    # –†–∞–∑–ª–∏—á–Ω—ã–µ —Å—Ç–∏–ª–∏ Seaborn
    styles = ['darkgrid', 'whitegrid', 'dark', 'white', 'ticks']
    
    fig, axes = plt.subplots(2, 3, figsize=(18, 12))
    fig.suptitle('üé® –ì–∞–ª–µ—Ä–µ—è —Å—Ç–∏–ª–µ–π Seaborn', fontsize=16)
    
    for i, style in enumerate(styles):
        row, col = i // 3, i % 3
        ax = axes[row, col]
        
        with sns.axes_style(style):
            sns.scatterplot(data=tips, x="total_bill", y="tip", 
                           hue="time", ax=ax)
            ax.set_title(f'–°—Ç–∏–ª—å: {style}')
    
    # –ü–æ—Å–ª–µ–¥–Ω–∏–π –≥—Ä–∞—Ñ–∏–∫ - —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–∞–ª–∏—Ç—Ä
    ax = axes[1, 2]
    palettes = ['husl', 'Set2', 'viridis']
    for i, palette in enumerate(palettes):
        with sns.color_palette(palette):
            sns.scatterplot(data=tips.sample(50), x="total_bill", y="tip", 
                           label=f'–ü–∞–ª–∏—Ç—Ä–∞ {palette}', ax=ax)
    ax.set_title('–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–∞–ª–∏—Ç—Ä')
    ax.legend()
    
    plt.tight_layout()
    plt.show()
    
    print("‚úÖ –ì–∞–ª–µ—Ä–µ—è —Å—Ç–∏–ª–µ–π –≥–æ—Ç–æ–≤–∞!")

def demo_advanced_plots(data):
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö –≥—Ä–∞—Ñ–∏–∫–æ–≤"""
    print("\nüöÄ 6. –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ —Ç–µ—Ö–Ω–∏–∫–∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏")
    
    fig, axes = plt.subplots(2, 2, figsize=(15, 10))
    fig.suptitle('üöÄ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –≥—Ä–∞—Ñ–∏–∫–∏', fontsize=16, y=0.98)
    
    # –†–µ–≥—Ä–µ—Å—Å–∏–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑
    sns.regplot(data=data, x='–≤–æ–∑—Ä–∞—Å—Ç', y='–¥–æ—Ö–æ–¥', 
                scatter_kws={'alpha': 0.6}, ax=axes[0,0])
    axes[0,0].set_title('üìà –†–µ–≥—Ä–µ—Å—Å–∏–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑')
    axes[0,0].set_xlabel('–í–æ–∑—Ä–∞—Å—Ç, –ª–µ—Ç')
    axes[0,0].set_ylabel('–î–æ—Ö–æ–¥, —Ç—ã—Å. —Ä—É–±.')
    
    # –°–æ–≤–º–µ—Å—Ç–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
    sns.jointplot(data=data.sample(300), x='–≤–æ–∑—Ä–∞—Å—Ç', y='–¥–æ—Ö–æ–¥', 
                  kind='hex', height=6)
    plt.suptitle('üîç –°–æ–≤–º–µ—Å—Ç–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ')
    
    # FacetGrid –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
    sample_data = data.sample(200)
    g = sns.FacetGrid(sample_data, col='—Å–µ–≥–º–µ–Ω—Ç', hue='–ø–æ–ª', height=4)
    g.map(sns.scatterplot, '–≤–æ–∑—Ä–∞—Å—Ç', '–¥–æ—Ö–æ–¥', alpha=0.7)
    g.add_legend(title='–ü–æ–ª')
    g.fig.suptitle('üìä –ê–Ω–∞–ª–∏–∑ –ø–æ –≥—Ä—É–ø–ø–∞–º', y=1.02)
    
    plt.show()
    
    print("‚úÖ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏ –æ—Å–≤–æ–µ–Ω—ã!")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞
def create_statistical_report(data):
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
    print("\nüìã 7. –°–æ–∑–¥–∞–µ–º –∏—Ç–æ–≥–æ–≤—ã–π —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç—á–µ—Ç")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Å—Ç–∏–ª—è
    sns.set_style("whitegrid")
    sns.set_palette("Set2")
    
    # –°–æ–∑–¥–∞–µ–º –±–æ–ª—å—à—É—é —Ñ–∏–≥—É—Ä—É –¥–ª—è –æ—Ç—á–µ—Ç–∞
    fig = plt.figure(figsize=(20, 16))
    fig.suptitle('üìä –ü–æ–ª–Ω—ã–π —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç—á–µ—Ç –ø–æ –∫–ª–∏–µ–Ω—Ç–∞–º', 
                 fontsize=20, y=0.98)
    
    # 1. –û—Å–Ω–æ–≤–Ω—ã–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
    ax1 = plt.subplot(4, 3, 1)
    sns.histplot(data=data, x='–≤–æ–∑—Ä–∞—Å—Ç', kde=True, bins=20)
    plt.title('–í–æ–∑—Ä–∞—Å—Ç–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ')
    
    ax2 = plt.subplot(4, 3, 2)
    sns.boxplot(data=data, x='—Å–µ–≥–º–µ–Ω—Ç', y='–¥–æ—Ö–æ–¥')
    plt.title('–î–æ—Ö–æ–¥—ã –ø–æ —Å–µ–≥–º–µ–Ω—Ç–∞–º')
    
    ax3 = plt.subplot(4, 3, 3)
    sns.countplot(data=data, x='–≥–æ—Ä–æ–¥')
    plt.title('–ì–µ–æ–≥—Ä–∞—Ñ–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤')
    plt.xticks(rotation=45)
    
    # 2. –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑
    ax4 = plt.subplot(4, 3, (4, 6))  # –ó–∞–Ω–∏–º–∞–µ—Ç 3 –ø–æ–∑–∏—Ü–∏–∏
    numeric_cols = ['–≤–æ–∑—Ä–∞—Å—Ç', '–¥–æ—Ö–æ–¥', '—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç—å', '–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–ø–æ–∫—É–ø–æ–∫']
    correlation_matrix = data[numeric_cols].corr()
    sns.heatmap(correlation_matrix, annot=True, cmap='RdYlBu_r', 
                center=0, square=True, fmt='.2f')
    plt.title('–ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞')
    
    # 3. –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ —Å–µ–≥–º–µ–Ω—Ç–∞–º
    ax7 = plt.subplot(4, 3, 7)
    sns.violinplot(data=data, x='—Å–µ–≥–º–µ–Ω—Ç', y='—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç—å')
    plt.title('–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç—å –ø–æ —Å–µ–≥–º–µ–Ω—Ç–∞–º')
    
    ax8 = plt.subplot(4, 3, 8)
    sns.barplot(data=data, x='–ø–æ–ª', y='–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–ø–æ–∫—É–ø–æ–∫', hue='—Å–µ–≥–º–µ–Ω—Ç')
    plt.title('–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–∫—É–ø–æ–∫')
    
    ax9 = plt.subplot(4, 3, 9)
    pivot_data = data.pivot_table(values='–¥–æ—Ö–æ–¥', 
                                  index='–≥–æ—Ä–æ–¥', 
                                  columns='—Å–µ–≥–º–µ–Ω—Ç', 
                                  aggfunc='mean')
    sns.heatmap(pivot_data, annot=True, fmt='.0f', cmap='YlOrRd')
    plt.title('–°—Ä–µ–¥–Ω–∏–µ –¥–æ—Ö–æ–¥—ã: –≥–æ—Ä–æ–¥ √ó —Å–µ–≥–º–µ–Ω—Ç')
    
    # 4. –ö–ª—é—á–µ–≤—ã–µ –∏–Ω—Å–∞–π—Ç—ã
    ax10 = plt.subplot(4, 3, (10, 12))
    ax10.axis('off')
    
    # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –∏–Ω—Å–∞–π—Ç–æ–≤
    avg_age = data['–≤–æ–∑—Ä–∞—Å—Ç'].mean()
    avg_income = data['–¥–æ—Ö–æ–¥'].mean()
    vip_income = data[data['—Å–µ–≥–º–µ–Ω—Ç'] == 'VIP']['–¥–æ—Ö–æ–¥'].mean()
    regular_income = data[data['—Å–µ–≥–º–µ–Ω—Ç'] == '–û–±—ã—á–Ω—ã–π']['–¥–æ—Ö–æ–¥'].mean()
    top_city = data['–≥–æ—Ä–æ–¥'].value_counts().index[0]
    
    insights_text = f"""
    üìä –ö–õ–Æ–ß–ï–í–´–ï –ò–ù–°–ê–ô–¢–´:
    
    üë• –ü—Ä–æ—Ñ–∏–ª—å –∫–ª–∏–µ–Ω—Ç–æ–≤:
    ‚Ä¢ –°—Ä–µ–¥–Ω–∏–π –≤–æ–∑—Ä–∞—Å—Ç: {avg_age:.0f} –ª–µ—Ç
    ‚Ä¢ –°—Ä–µ–¥–Ω–∏–π –¥–æ—Ö–æ–¥: {avg_income:,.0f} —Ç—ã—Å. —Ä—É–±.
    ‚Ä¢ –°–∞–º—ã–π –ø–æ–ø—É–ª—è—Ä–Ω—ã–π –≥–æ—Ä–æ–¥: {top_city}
    
    üí∞ –°–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è:
    ‚Ä¢ VIP –∫–ª–∏–µ–Ω—Ç—ã: {vip_income:,.0f} —Ç—ã—Å. —Ä—É–±. (—Å—Ä–µ–¥–Ω–∏–π –¥–æ—Ö–æ–¥)
    ‚Ä¢ –û–±—ã—á–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã: {regular_income:,.0f} —Ç—ã—Å. —Ä—É–±.
    ‚Ä¢ –†–∞–∑–Ω–∏—Ü–∞ –≤ –¥–æ—Ö–æ–¥–∞—Ö: {((vip_income/regular_income - 1)*100):.0f}%
    
    üîç –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–∏:
    ‚Ä¢ –í–æ–∑—Ä–∞—Å—Ç ‚Üî –î–æ—Ö–æ–¥: {data['–≤–æ–∑—Ä–∞—Å—Ç'].corr(data['–¥–æ—Ö–æ–¥']):.2f}
    ‚Ä¢ –î–æ—Ö–æ–¥ ‚Üî –ü–æ–∫—É–ø–∫–∏: {data['–¥–æ—Ö–æ–¥'].corr(data['–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–ø–æ–∫—É–ø–æ–∫']):.2f}
    ‚Ä¢ –ü–æ–∫—É–ø–∫–∏ ‚Üî –£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {data['–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–ø–æ–∫—É–ø–æ–∫'].corr(data['—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç—å']):.2f}
    
    üìà –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:
    ‚Ä¢ –§–æ–∫—É—Å –Ω–∞ VIP —Å–µ–≥–º–µ–Ω—Ç –≤ {top_city}
    ‚Ä¢ –ü—Ä–æ–≥—Ä–∞–º–º—ã –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è –º–æ–ª–æ–¥—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
    ‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ –¥–æ—Ö–æ–¥–∞–º
    """
    
    ax10.text(0.05, 0.95, insights_text, transform=ax10.transAxes, 
              fontsize=11, verticalalignment='top',
              bbox=dict(boxstyle="round,pad=1", facecolor='lightblue', alpha=0.7))
    
    plt.tight_layout()
    plt.show()
    
    print("‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç—á–µ—Ç –≥–æ—Ç–æ–≤!")

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–π
def main():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–π Seaborn"""
    print("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∏–∑—É—á–µ–Ω–∏–µ Seaborn!")
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    data = generate_sample_data()
    print(f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(data)} –∑–∞–ø–∏—Å–µ–π –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    demo_distributions(data)
    demo_correlations(data)
    demo_categorical_data(data)
    demo_pairplot(data)
    demo_style_gallery()
    demo_advanced_plots(data)
    create_statistical_report(data)
    
    print("\nüéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –æ—Å–≤–æ–∏–ª–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫—É—é –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é!")
    print("üìö –°–ª–µ–¥—É—é—â–∏–π —à–∞–≥: –∏–∑—É—á–∏—Ç–µ dashboard_template.py")
    print("üí° –°–æ–≤–µ—Ç: –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ Seaborn –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö!")

if __name__ == "__main__":
    main()