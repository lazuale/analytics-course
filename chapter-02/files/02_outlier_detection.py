#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ì–ª–∞–≤–∞ 2: –û–ø–∏—Å–∞—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
–°–∫—Ä–∏–ø—Ç: –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –º–µ—Ç–æ–¥—ã –≤—ã—è–≤–ª–µ–Ω–∏—è –≤—ã–±—Ä–æ—Å–æ–≤ –≤ –∑–∞—Ä–ø–ª–∞—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã –ø–æ–∏—Å–∫–∞ –∞–Ω–æ–º–∞–ª–∏–π:
- –ú–µ—Ç–æ–¥ –º–µ–∂–∫–≤–∞—Ä—Ç–∏–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–∞—Ö–∞ (IQR)
- Z-score –º–µ—Ç–æ–¥
- –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π Z-score –º–µ—Ç–æ–¥
- –ú–µ—Ç–æ–¥ Isolation Forest (–ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π)

–ê–≤—Ç–æ—Ä: Analytics Course
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy import stats
from sklearn.ensemble import IsolationForest
import warnings
warnings.filterwarnings('ignore')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
plt.rcParams['figure.figsize'] = (14, 10)
plt.rcParams['font.size'] = 10
sns.set_style("whitegrid")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä—É—Å—Å–∫–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤  
plt.rcParams['font.family'] = ['DejaVu Sans']

def load_data(file_path):
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç HR –¥–∞–Ω–Ω—ã–µ –∏–∑ CSV —Ñ–∞–π–ª–∞

    Args:
        file_path (str): –ü—É—Ç—å –∫ CSV —Ñ–∞–π–ª—É

    Returns:
        pandas.DataFrame: –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    """
    try:
        df = pd.read_csv(file_path, sep=';', decimal=',', encoding='utf-8-sig')
        print("‚úÖ HR –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤—ã–±—Ä–æ—Å–æ–≤!")
        return df
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return None

def iqr_method(data, column='salary', multiplier=1.5):
    """
    –í—ã—è–≤–ª—è–µ—Ç –≤—ã–±—Ä–æ—Å—ã –º–µ—Ç–æ–¥–æ–º –º–µ–∂–∫–≤–∞—Ä—Ç–∏–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–∞—Ö–∞ (IQR)

    Args:
        data (DataFrame): –î–∞–Ω–Ω—ã–µ
        column (str): –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        multiplier (float): –ú–Ω–æ–∂–∏—Ç–µ–ª—å –¥–ª—è IQR (–æ–±—ã—á–Ω–æ 1.5)

    Returns:
        dict: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
    """
    print("\n" + "="*60)
    print("üìä –ú–ï–¢–û–î –ú–ï–ñ–ö–í–ê–†–¢–ò–õ–¨–ù–û–ì–û –†–ê–ó–ú–ê–•–ê (IQR)")
    print("="*60)

    values = data[column]

    # –†–∞—Å—á–µ—Ç –∫–≤–∞—Ä—Ç–∏–ª–µ–π
    Q1 = values.quantile(0.25)
    Q3 = values.quantile(0.75)
    IQR = Q3 - Q1

    # –ì—Ä–∞–Ω–∏—Ü—ã –≤—ã–±—Ä–æ—Å–æ–≤
    lower_bound = Q1 - multiplier * IQR
    upper_bound = Q3 + multiplier * IQR

    print(f"\nüìè –°–¢–ê–¢–ò–°–¢–ò–ß–ï–°–ö–ò–ï –ì–†–ê–ù–ò–¶–´:")
    print(f"Q1 (25-–π –ø—Ä–æ—Ü–µ–Ω—Ç–∏–ª—å): {Q1:,.0f} —Ä—É–±.")
    print(f"Q3 (75-–π –ø—Ä–æ—Ü–µ–Ω—Ç–∏–ª—å): {Q3:,.0f} —Ä—É–±.")
    print(f"–ú–µ–∂–∫–≤–∞—Ä—Ç–∏–ª—å–Ω—ã–π —Ä–∞–∑–º–∞—Ö (IQR): {IQR:,.0f} —Ä—É–±.")
    print(f"–ù–∏–∂–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞: {lower_bound:,.0f} —Ä—É–±.")
    print(f"–í–µ—Ä—Ö–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞: {upper_bound:,.0f} —Ä—É–±.")

    # –ü–æ–∏—Å–∫ –≤—ã–±—Ä–æ—Å–æ–≤
    outliers_mask = (values < lower_bound) | (values > upper_bound)
    outliers = data[outliers_mask].copy()

    # –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –≤—ã–±—Ä–æ—Å–æ–≤
    mild_outliers = data[(values > upper_bound) & (values <= upper_bound + IQR)].copy()
    extreme_outliers = data[values > upper_bound + IQR].copy()

    print(f"\nüîç –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–û–ò–°–ö–ê:")
    print(f"–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–±—Ä–æ—Å–æ–≤: {len(outliers)} ({len(outliers)/len(data)*100:.1f}%)")
    print(f"–£–º–µ—Ä–µ–Ω–Ω—ã–µ –≤—ã–±—Ä–æ—Å—ã: {len(mild_outliers)}")
    print(f"–≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–µ –≤—ã–±—Ä–æ—Å—ã: {len(extreme_outliers)}")

    if len(outliers) > 0:
        print(f"\nüí∞ –î–ò–ê–ü–ê–ó–û–ù –í–´–ë–†–û–°–û–í:")
        print(f"–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤—ã–±—Ä–æ—Å: {outliers[column].min():,.0f} —Ä—É–±.")
        print(f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤—ã–±—Ä–æ—Å: {outliers[column].max():,.0f} —Ä—É–±.")

    return {
        'method': 'IQR',
        'outliers': outliers,
        'outliers_mask': outliers_mask,
        'bounds': (lower_bound, upper_bound),
        'mild_outliers': mild_outliers,
        'extreme_outliers': extreme_outliers
    }

def zscore_method(data, column='salary', threshold=3):
    """
    –í—ã—è–≤–ª—è–µ—Ç –≤—ã–±—Ä–æ—Å—ã –º–µ—Ç–æ–¥–æ–º Z-score

    Args:
        data (DataFrame): –î–∞–Ω–Ω—ã–µ
        column (str): –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞  
        threshold (float): –ü–æ—Ä–æ–≥–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ |Z| (–æ–±—ã—á–Ω–æ 2.5-3)

    Returns:
        dict: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
    """
    print("\n" + "="*60)
    print("üìà –ú–ï–¢–û–î Z-SCORE (–°–¢–ê–ù–î–ê–†–¢–ò–ó–û–í–ê–ù–ù–´–ï –û–¢–ö–õ–û–ù–ï–ù–ò–Ø)")
    print("="*60)

    values = data[column]

    # –†–∞—Å—á–µ—Ç Z-scores
    mean_val = values.mean()
    std_val = values.std()
    z_scores = np.abs((values - mean_val) / std_val)

    print(f"\nüìä –ü–ê–†–ê–ú–ï–¢–†–´ –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–Ø:")
    print(f"–°—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {mean_val:,.0f} —Ä—É–±.")
    print(f"–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: {std_val:,.0f} —Ä—É–±.")
    print(f"–ü–æ—Ä–æ–≥–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ |Z|: {threshold}")

    # –ü–æ–∏—Å–∫ –≤—ã–±—Ä–æ—Å–æ–≤
    outliers_mask = z_scores > threshold
    outliers = data[outliers_mask].copy()
    outliers['z_score'] = z_scores[outliers_mask]

    print(f"\nüîç –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–û–ò–°–ö–ê:")
    print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–±—Ä–æ—Å–æ–≤: {len(outliers)} ({len(outliers)/len(data)*100:.1f}%)")

    if len(outliers) > 0:
        print(f"\nüìä –•–ê–†–ê–ö–¢–ï–†–ò–°–¢–ò–ö–ò –í–´–ë–†–û–°–û–í:")
        print(f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π |Z-score|: {z_scores.max():.2f}")
        print(f"–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π Z-score –≤—ã–±—Ä–æ—Å–∞: {z_scores[outliers_mask].min():.2f}")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–∞–º—ã–µ —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–µ –≤—ã–±—Ä–æ—Å—ã
        top_outliers = outliers.nlargest(5, 'z_score')[['first_name', 'last_name', 'department', 
                                                        'position', column, 'z_score']]
        print(f"\nüéØ –¢–û–ü-5 –°–ê–ú–´–• –≠–ö–°–¢–†–ï–ú–ê–õ–¨–ù–´–• –í–´–ë–†–û–°–û–í:")
        print(top_outliers.to_string(index=False, float_format='%.2f'))

    return {
        'method': 'Z-Score',
        'outliers': outliers,
        'outliers_mask': outliers_mask,
        'z_scores': z_scores,
        'threshold': threshold
    }

def modified_zscore_method(data, column='salary', threshold=3.5):
    """
    –í—ã—è–≤–ª—è–µ—Ç –≤—ã–±—Ä–æ—Å—ã –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –º–µ—Ç–æ–¥–æ–º Z-score (–Ω–∞ –æ—Å–Ω–æ–≤–µ –º–µ–¥–∏–∞–Ω—ã)

    Args:
        data (DataFrame): –î–∞–Ω–Ω—ã–µ
        column (str): –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        threshold (float): –ü–æ—Ä–æ–≥–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (–æ–±—ã—á–Ω–æ 3.5)

    Returns:
        dict: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
    """
    print("\n" + "="*60)
    print("üìä –ú–û–î–ò–§–ò–¶–ò–†–û–í–ê–ù–ù–´–ô Z-SCORE –ú–ï–¢–û–î (–†–û–ë–ê–°–¢–ù–´–ô)")
    print("="*60)

    values = data[column]

    # –†–∞—Å—á–µ—Ç –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö Z-scores
    median_val = values.median()
    mad = np.median(np.abs(values - median_val))  # Median Absolute Deviation
    modified_z_scores = 0.6745 * (values - median_val) / mad

    print(f"\nüìä –†–û–ë–ê–°–¢–ù–´–ï –ü–ê–†–ê–ú–ï–¢–†–´:")
    print(f"–ú–µ–¥–∏–∞–Ω–∞: {median_val:,.0f} —Ä—É–±.")
    print(f"MAD (–º–µ–¥–∏–∞–Ω–Ω–æ–µ –∞–±—Å–æ–ª—é—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ): {mad:,.0f} —Ä—É–±.")
    print(f"–ü–æ—Ä–æ–≥–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {threshold}")

    # –ü–æ–∏—Å–∫ –≤—ã–±—Ä–æ—Å–æ–≤
    outliers_mask = np.abs(modified_z_scores) > threshold
    outliers = data[outliers_mask].copy()
    outliers['modified_z_score'] = modified_z_scores[outliers_mask]

    print(f"\nüîç –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–û–ò–°–ö–ê:")
    print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–±—Ä–æ—Å–æ–≤: {len(outliers)} ({len(outliers)/len(data)*100:.1f}%)")

    return {
        'method': 'Modified Z-Score',
        'outliers': outliers,
        'outliers_mask': outliers_mask,
        'modified_z_scores': modified_z_scores
    }

def isolation_forest_method(data, contamination=0.05):
    """
    –í—ã—è–≤–ª—è–µ—Ç –≤—ã–±—Ä–æ—Å—ã –º–µ—Ç–æ–¥–æ–º Isolation Forest (–º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ)

    Args:
        data (DataFrame): –î–∞–Ω–Ω—ã–µ
        contamination (float): –û–∂–∏–¥–∞–µ–º–∞—è –¥–æ–ª—è –≤—ã–±—Ä–æ—Å–æ–≤ (0.05 = 5%)

    Returns:
        dict: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
    """
    print("\n" + "="*60)
    print("ü§ñ ISOLATION FOREST (–ú–ê–®–ò–ù–ù–û–ï –û–ë–£–ß–ï–ù–ò–ï)")
    print("="*60)

    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    features = ['salary', 'years_experience', 'age', 'performance_rating']

    # –ö–æ–¥–∏—Ä—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    data_encoded = data.copy()
    education_encoding = {'Bachelor': 1, 'Master': 2, 'PhD': 3}
    data_encoded['education_encoded'] = data['education_level'].map(education_encoding)

    features_extended = features + ['education_encoded']
    X = data_encoded[features_extended].fillna(0)

    print(f"\nüéØ –ü–ê–†–ê–ú–ï–¢–†–´ –ú–û–î–ï–õ–ò:")
    print(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏: {', '.join(features_extended)}")
    print(f"–û–∂–∏–¥–∞–µ–º–∞—è –¥–æ–ª—è –≤—ã–±—Ä–æ—Å–æ–≤: {contamination*100:.1f}%")

    # –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
    iso_forest = IsolationForest(contamination=contamination, random_state=42)
    outliers_pred = iso_forest.fit_predict(X)

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–Ω–æ–º–∞–ª—å–Ω—ã—Ö –±–∞–ª–ª–æ–≤
    anomaly_scores = iso_forest.decision_function(X)

    # –ü–æ–∏—Å–∫ –≤—ã–±—Ä–æ—Å–æ–≤ (-1 –æ–∑–Ω–∞—á–∞–µ—Ç –≤—ã–±—Ä–æ—Å)
    outliers_mask = outliers_pred == -1
    outliers = data[outliers_mask].copy()
    outliers['anomaly_score'] = anomaly_scores[outliers_mask]

    print(f"\nüîç –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ê–ù–ê–õ–ò–ó–ê:")
    print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–±—Ä–æ—Å–æ–≤: {len(outliers)} ({len(outliers)/len(data)*100:.1f}%)")

    if len(outliers) > 0:
        print(f"\nüéØ –°–ê–ú–´–ï –ê–ù–û–ú–ê–õ–¨–ù–´–ï –°–û–¢–†–£–î–ù–ò–ö–ò:")
        top_anomalies = outliers.nsmallest(5, 'anomaly_score')[['first_name', 'last_name', 
                                                               'department', 'position', 
                                                               'salary', 'anomaly_score']]
        print(top_anomalies.to_string(index=False, float_format='%.3f'))

    return {
        'method': 'Isolation Forest',
        'outliers': outliers,
        'outliers_mask': outliers_mask,
        'anomaly_scores': anomaly_scores
    }

def compare_methods(data, results_list):
    """
    –°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞–∑–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ –ø–æ–∏—Å–∫–∞ –≤—ã–±—Ä–æ—Å–æ–≤

    Args:
        data (DataFrame): –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        results_list (list): –°–ø–∏—Å–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ—Ç —Ä–∞–∑–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤
    """
    print("\n" + "="*60)
    print("‚öñÔ∏è –°–†–ê–í–ù–ï–ù–ò–ï –ú–ï–¢–û–î–û–í –ü–û–ò–°–ö–ê –í–´–ë–†–û–°–û–í")
    print("="*60)

    print("\nüìä –°–í–û–î–ö–ê –ü–û –ú–ï–¢–û–î–ê–ú:")
    for result in results_list:
        method_name = result['method']
        outliers_count = len(result['outliers'])
        percentage = outliers_count / len(data) * 100
        print(f"{method_name:20s}: {outliers_count:3d} –≤—ã–±—Ä–æ—Å–æ–≤ ({percentage:4.1f}%)")

    # –ü–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è –º–µ–∂–¥—É –º–µ—Ç–æ–¥–∞–º–∏
    print("\nüîó –ü–ï–†–ï–°–ï–ß–ï–ù–ò–Ø –ú–ï–ñ–î–£ –ú–ï–¢–û–î–ê–ú–ò:")

    if len(results_list) >= 2:
        mask1 = results_list[0]['outliers_mask']
        mask2 = results_list[1]['outliers_mask']

        intersection = mask1 & mask2
        union = mask1 | mask2

        intersection_count = intersection.sum()
        union_count = union.sum()

        print(f"–ü–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ {results_list[0]['method']} –∏ {results_list[1]['method']}: {intersection_count}")
        print(f"–û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ: {union_count}")

        if intersection_count > 0:
            print("\nüéØ –°–û–¢–†–£–î–ù–ò–ö–ò, –í–´–Ø–í–õ–ï–ù–ù–´–ï –ù–ï–°–ö–û–õ–¨–ö–ò–ú–ò –ú–ï–¢–û–î–ê–ú–ò:")
            consensus_outliers = data[intersection][['first_name', 'last_name', 'department', 
                                                   'position', 'salary']]
            print(consensus_outliers.to_string(index=False))

def detailed_outlier_analysis(data, outliers_results):
    """
    –ü—Ä–æ–≤–æ–¥–∏—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –≤—ã–±—Ä–æ—Å–æ–≤

    Args:
        data (DataFrame): –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        outliers_results (dict): –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–¥–Ω–æ–≥–æ –∏–∑ –º–µ—Ç–æ–¥–æ–≤
    """
    print("\n" + "="*60)
    print("üîç –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –í–´–ë–†–û–°–û–í")
    print("="*60)

    outliers = outliers_results['outliers']

    if len(outliers) == 0:
        print("–í—ã–±—Ä–æ—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return

    print(f"\nüìä –•–ê–†–ê–ö–¢–ï–†–ò–°–¢–ò–ö–ò {len(outliers)} –í–´–ë–†–û–°–û–í:")

    # –ê–Ω–∞–ª–∏–∑ –ø–æ –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∞–º
    dept_outliers = outliers['department'].value_counts()
    print("\nüè¢ –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ü–û –î–ï–ü–ê–†–¢–ê–ú–ï–ù–¢–ê–ú:")
    for dept, count in dept_outliers.items():
        dept_total = len(data[data['department'] == dept])
        percentage = count / dept_total * 100
        print(f"{dept:15s}: {count} –∏–∑ {dept_total} ({percentage:.1f}%)")

    # –ê–Ω–∞–ª–∏–∑ –ø–æ –¥–æ–ª–∂–Ω–æ—Å—Ç—è–º
    position_outliers = outliers['position'].value_counts()
    print("\nüëî –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ü–û –î–û–õ–ñ–ù–û–°–¢–Ø–ú:")
    for position, count in position_outliers.items():
        position_total = len(data[data['position'] == position])
        percentage = count / position_total * 100 if position_total > 0 else 0
        print(f"{position:15s}: {count} –∏–∑ {position_total} ({percentage:.1f}%)")

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞—Ä–ø–ª–∞—Ç –≤—ã–±—Ä–æ—Å–æ–≤
    print("\nüí∞ –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ó–ê–†–ü–õ–ê–¢ –í–´–ë–†–û–°–û–í:")
    outlier_salaries = outliers['salary']
    print(f"–°—Ä–µ–¥–Ω—è—è –∑–∞—Ä–ø–ª–∞—Ç–∞ –≤—ã–±—Ä–æ—Å–æ–≤: {outlier_salaries.mean():,.0f} —Ä—É–±.")
    print(f"–ú–µ–¥–∏–∞–Ω–Ω–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞ –≤—ã–±—Ä–æ—Å–æ–≤: {outlier_salaries.median():,.0f} —Ä—É–±.")
    print(f"–î–∏–∞–ø–∞–∑–æ–Ω: {outlier_salaries.min():,.0f} - {outlier_salaries.max():,.0f} —Ä—É–±.")

    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∫–∞–∂–¥–æ–º—É –≤—ã–±—Ä–æ—Å—É
    print("\nüéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –û–ë–†–ê–ë–û–¢–ö–ï:")

    # –û—á–µ–Ω—å –≤—ã—Å–æ–∫–∏–µ –∑–∞—Ä–ø–ª–∞—Ç—ã (–≤–æ–∑–º–æ–∂–Ω—ã–µ –æ—à–∏–±–∫–∏)
    very_high = outliers[outliers['salary'] > outliers['salary'].quantile(0.9)]
    if len(very_high) > 0:
        print(f"\n‚ùó –¢–†–ï–ë–£–Æ–¢ –ü–†–û–í–ï–†–ö–ò ({len(very_high)} —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤):")
        check_list = very_high[['first_name', 'last_name', 'department', 'position', 'salary']]
        print(check_list.to_string(index=False))
        print("   –í–æ–∑–º–æ–∂–Ω—ã–µ –æ—à–∏–±–∫–∏ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –Ω–µ–ø—Ä–∞–≤–æ–º–µ—Ä–Ω—ã–µ –≤—ã–ø–ª–∞—Ç—ã")

    # –¢–æ–ø-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç (–∑–∞–∫–æ–Ω–Ω—ã–µ –≤—ã–±—Ä–æ—Å—ã)
    management = outliers[outliers['position'].isin(['Director', 'VP', 'CEO'])]
    if len(management) > 0:
        print(f"\n‚úÖ –í–û–ó–ú–û–ñ–ù–û –û–ë–û–°–ù–û–í–ê–ù–´ ({len(management)} —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤):")
        mgmt_list = management[['first_name', 'last_name', 'department', 'position', 'salary']]
        print(mgmt_list.to_string(index=False))
        print("   –í—ã—Å–æ–∫–∏–µ –∑–∞—Ä–ø–ª–∞—Ç—ã —Ä—É–∫–æ–≤–æ–¥—è—â–∏—Ö –¥–æ–ª–∂–Ω–æ—Å—Ç–µ–π")

def create_outlier_visualizations(data, results_list):
    """
    –°–æ–∑–¥–∞–µ—Ç –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤—ã–±—Ä–æ—Å–æ–≤

    Args:
        data (DataFrame): –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        results_list (list): –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞–∑–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤
    """
    print("\nüìä –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–π –≤—ã–±—Ä–æ—Å–æ–≤...")

    fig, axes = plt.subplots(2, 2, figsize=(16, 12))
    fig.suptitle('–ê–Ω–∞–ª–∏–∑ –≤—ã–±—Ä–æ—Å–æ–≤ –≤ –∑–∞—Ä–ø–ª–∞—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö', fontsize=16, fontweight='bold')

    # 1. Box plot —Å –≤—ã–±—Ä–æ—Å–∞–º–∏
    data.boxplot(column='salary', ax=axes[0, 0])
    axes[0, 0].set_title('Box Plot - –í—ã—è–≤–ª–µ–Ω–∏–µ –≤—ã–±—Ä–æ—Å–æ–≤')
    axes[0, 0].set_ylabel('–ó–∞—Ä–ø–ª–∞—Ç–∞ (—Ä—É–±.)')

    # 2. –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ —Å –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–º–∏ –≤—ã–±—Ä–æ—Å–∞–º–∏
    axes[0, 1].hist(data['salary'], bins=50, alpha=0.7, color='lightblue', label='–í—Å–µ –¥–∞–Ω–Ω—ã–µ')
    if len(results_list) > 0 and len(results_list[0]['outliers']) > 0:
        outlier_salaries = results_list[0]['outliers']['salary']
        axes[0, 1].hist(outlier_salaries, bins=20, alpha=0.8, color='red', label='–í—ã–±—Ä–æ—Å—ã')
    axes[0, 1].set_title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞—Ä–ø–ª–∞—Ç —Å –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–º–∏ –≤—ã–±—Ä–æ—Å–∞–º–∏')
    axes[0, 1].set_xlabel('–ó–∞—Ä–ø–ª–∞—Ç–∞ (—Ä—É–±.)')
    axes[0, 1].set_ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ')
    axes[0, 1].legend()

    # 3. Scatter plot: –∑–∞—Ä–ø–ª–∞—Ç–∞ vs —Å—Ç–∞–∂ —Å –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–º–∏ –≤—ã–±—Ä–æ—Å–∞–º–∏
    axes[1, 0].scatter(data['years_experience'], data['salary'], alpha=0.6, color='blue', s=30, label='–ù–æ—Ä–º–∞–ª—å–Ω—ã–µ')
    if len(results_list) > 0 and len(results_list[0]['outliers']) > 0:
        outliers = results_list[0]['outliers']
        axes[1, 0].scatter(outliers['years_experience'], outliers['salary'], 
                          color='red', s=60, alpha=0.8, label='–í—ã–±—Ä–æ—Å—ã')
    axes[1, 0].set_title('–ó–∞—Ä–ø–ª–∞—Ç–∞ vs –°—Ç–∞–∂ (—Å –≤—ã–±—Ä–æ—Å–∞–º–∏)')
    axes[1, 0].set_xlabel('–°—Ç–∞–∂ (–ª–µ—Ç)')
    axes[1, 0].set_ylabel('–ó–∞—Ä–ø–ª–∞—Ç–∞ (—Ä—É–±.)')
    axes[1, 0].legend()

    # 4. –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–µ—Ç–æ–¥–æ–≤
    if len(results_list) > 1:
        method_counts = [len(result['outliers']) for result in results_list]
        method_names = [result['method'] for result in results_list]

        bars = axes[1, 1].bar(method_names, method_counts, color=['skyblue', 'lightcoral', 'lightgreen', 'gold'][:len(method_names)])
        axes[1, 1].set_title('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–±—Ä–æ—Å–æ–≤ –ø–æ –º–µ—Ç–æ–¥–∞–º')
        axes[1, 1].set_ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–±—Ä–æ—Å–æ–≤')
        axes[1, 1].tick_params(axis='x', rotation=45)

        # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ —Å—Ç–æ–ª–±—Ü—ã
        for bar, count in zip(bars, method_counts):
            axes[1, 1].text(bar.get_x() + bar.get_width()/2., bar.get_height() + 1,
                           str(count), ha='center', va='bottom')

    plt.tight_layout()
    plt.savefig('outlier_analysis_dashboard.png', dpi=300, bbox_inches='tight')
    plt.show()

    print("‚úÖ –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –∫–∞–∫ 'outlier_analysis_dashboard.png'")

def main():
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö –º–µ—Ç–æ–¥–æ–≤ –ø–æ–∏—Å–∫–∞ –≤—ã–±—Ä–æ—Å–æ–≤
    """
    print("üöÄ –ó–ê–ü–£–°–ö –ö–û–ú–ü–õ–ï–ö–°–ù–û–ì–û –ê–ù–ê–õ–ò–ó–ê –í–´–ë–†–û–°–û–í")
    print("=" * 70)

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    df = load_data('hr_salary_data.csv')
    if df is None:
        return

    # –°–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤—Å–µ—Ö –º–µ—Ç–æ–¥–æ–≤
    all_results = []

    # 1. –ú–µ—Ç–æ–¥ –º–µ–∂–∫–≤–∞—Ä—Ç–∏–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–∞—Ö–∞
    iqr_results = iqr_method(df)
    all_results.append(iqr_results)

    # 2. Z-score –º–µ—Ç–æ–¥
    zscore_results = zscore_method(df)
    all_results.append(zscore_results)

    # 3. –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π Z-score –º–µ—Ç–æ–¥
    mod_zscore_results = modified_zscore_method(df)
    all_results.append(mod_zscore_results)

    # 4. Isolation Forest –º–µ—Ç–æ–¥
    try:
        iso_results = isolation_forest_method(df)
        all_results.append(iso_results)
    except Exception as e:
        print(f"‚ö†Ô∏è Isolation Forest –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")

    # 5. –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–µ—Ç–æ–¥–æ–≤
    compare_methods(df, all_results)

    # 6. –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤—ã–±—Ä–æ—Å–æ–≤ (–∏—Å–ø–æ–ª—å–∑—É–µ–º IQR –º–µ—Ç–æ–¥)
    detailed_outlier_analysis(df, iqr_results)

    # 7. –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–π
    create_outlier_visualizations(df, all_results)

    print("\n" + "="*70)
    print("‚úÖ –ê–ù–ê–õ–ò–ó –í–´–ë–†–û–°–û–í –ó–ê–í–ï–†–®–ï–ù!")
    print("üìä –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª: outlier_analysis_dashboard.png")
    print("üéØ –í—Å–µ –º–µ—Ç–æ–¥—ã –≤—ã—è–≤–ª–µ–Ω–∏—è –∞–Ω–æ–º–∞–ª–∏–π –ø—Ä–∏–º–µ–Ω–µ–Ω—ã")
    print("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–±—Ä–æ—Å–æ–≤ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω—ã")

if __name__ == "__main__":
    main()
