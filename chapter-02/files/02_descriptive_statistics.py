#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ì–ª–∞–≤–∞ 2: –û–ø–∏—Å–∞—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
–°–∫—Ä–∏–ø—Ç: –ü–æ–ª–Ω—ã–π —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∑–∞—Ä–ø–ª–∞—Ç–Ω–æ–π –ø–æ–ª–∏—Ç–∏–∫–∏ –∫–æ–º–ø–∞–Ω–∏–∏

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—Å–µ –∫–ª—é—á–µ–≤—ã–µ –º–µ—Ç–æ–¥—ã –æ–ø–∏—Å–∞—Ç–µ–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:
- –ú–µ—Ä—ã —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–π —Ç–µ–Ω–¥–µ–Ω—Ü–∏–∏
- –ú–µ—Ä—ã —Ä–∞–∑–±—Ä–æ—Å–∞ –∏ –≤–∞—Ä–∏–∞—Ü–∏–∏
- –°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≥—Ä—É–ø–ø
- –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑
- –í—ã—è–≤–ª–µ–Ω–∏–µ –≤—ã–±—Ä–æ—Å–æ–≤

–ê–≤—Ç–æ—Ä: Analytics Course
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy import stats
import warnings
warnings.filterwarnings('ignore')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
plt.rcParams['figure.figsize'] = (12, 8)
plt.rcParams['font.size'] = 10
sns.set_style("whitegrid")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä—É—Å—Å–∫–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
plt.rcParams['font.family'] = ['DejaVu Sans']

def load_data(file_path):
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç HR –¥–∞–Ω–Ω—ã–µ –∏–∑ CSV —Ñ–∞–π–ª–∞

    Args:
        file_path (str): –ü—É—Ç—å –∫ CSV —Ñ–∞–π–ª—É

    Returns:
        pandas.DataFrame: –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    """
    try:
        df = pd.read_csv(file_path, sep=';', decimal=',', encoding='utf-8-sig')
        print("‚úÖ HR –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!")
        print(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df)} –∑–∞–ø–∏—Å–µ–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤")
        return df
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return None

def basic_descriptive_stats(df):
    """
    –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –±–∞–∑–æ–≤—ã–µ –æ–ø–∏—Å–∞—Ç–µ–ª—å–Ω—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –∑–∞—Ä–ø–ª–∞—Ç

    Args:
        df (pandas.DataFrame): –î–∞–Ω–Ω—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
    """
    print("\n" + "="*60)
    print("üìä –û–ü–ò–°–ê–¢–ï–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ó–ê–†–ü–õ–ê–¢")
    print("="*60)

    salary_data = df['salary']

    # –ú–µ—Ä—ã —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–π —Ç–µ–Ω–¥–µ–Ω—Ü–∏–∏
    mean_salary = salary_data.mean()
    median_salary = salary_data.median()
    mode_salary = salary_data.mode().iloc[0] if not salary_data.mode().empty else "–ù–µ—Ç –º–æ–¥—ã"

    print("\nüéØ –ú–ï–†–´ –¶–ï–ù–¢–†–ê–õ–¨–ù–û–ô –¢–ï–ù–î–ï–ù–¶–ò–ò:")
    print(f"–°—Ä–µ–¥–Ω–µ–µ –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–æ–µ: {mean_salary:,.0f} —Ä—É–±.")
    print(f"–ú–µ–¥–∏–∞–Ω–∞: {median_salary:,.0f} —Ä—É–±.")
    print(f"–ú–æ–¥–∞: {mode_salary:,.0f} —Ä—É–±." if mode_salary != "–ù–µ—Ç –º–æ–¥—ã" else f"–ú–æ–¥–∞: {mode_salary}")

    # –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è —Ä–∞–∑–ª–∏—á–∏–π
    diff_mean_median = mean_salary - median_salary
    if diff_mean_median > mean_salary * 0.1:
        print("üìà –°—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –±–æ–ª—å—à–µ –º–µ–¥–∏–∞–Ω—ã ‚Üí —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–º–µ—â–µ–Ω–æ –≤–ø—Ä–∞–≤–æ (–µ—Å—Ç—å –≤—ã—Å–æ–∫–∏–µ –≤—ã–±—Ä–æ—Å—ã)")
    elif diff_mean_median < -mean_salary * 0.1:
        print("üìâ –°—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –º–µ–Ω—å—à–µ –º–µ–¥–∏–∞–Ω—ã ‚Üí —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–º–µ—â–µ–Ω–æ –≤–ª–µ–≤–æ")
    else:
        print("‚öñÔ∏è –°—Ä–µ–¥–Ω–µ–µ ‚âà –º–µ–¥–∏–∞–Ω–∞ ‚Üí —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –±–ª–∏–∑–∫–æ –∫ —Å–∏–º–º–µ—Ç—Ä–∏—á–Ω–æ–º—É")

    # –ú–µ—Ä—ã —Ä–∞–∑–±—Ä–æ—Å–∞
    print("\nüìè –ú–ï–†–´ –†–ê–ó–ë–†–û–°–ê:")
    std_dev = salary_data.std()
    variance = salary_data.var()
    range_val = salary_data.max() - salary_data.min()
    iqr = salary_data.quantile(0.75) - salary_data.quantile(0.25)
    coef_variation = std_dev / mean_salary

    print(f"–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: {std_dev:,.0f} —Ä—É–±.")
    print(f"–î–∏—Å–ø–µ—Ä—Å–∏—è: {variance:,.0f}")
    print(f"–†–∞–∑–º–∞—Ö (min-max): {range_val:,.0f} —Ä—É–±.")
    print(f"–ú–µ–∂–∫–≤–∞—Ä—Ç–∏–ª—å–Ω—ã–π —Ä–∞–∑–º–∞—Ö (IQR): {iqr:,.0f} —Ä—É–±.")
    print(f"–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤–∞—Ä–∏–∞—Ü–∏–∏: {coef_variation:.2%}")

    # –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è –≤–∞—Ä–∏–∞—Ü–∏–∏
    if coef_variation < 0.15:
        print("‚úÖ –ù–∏–∑–∫–∞—è –≤–∞—Ä–∏–∞—Ü–∏—è - –∑–∞—Ä–ø–ª–∞—Ç—ã –¥–æ–≤–æ–ª—å–Ω–æ –æ–¥–Ω–æ—Ä–æ–¥–Ω—ã")
    elif coef_variation < 0.35:
        print("‚ö†Ô∏è –£–º–µ—Ä–µ–Ω–Ω–∞—è –≤–∞—Ä–∏–∞—Ü–∏—è - –µ—Å—Ç—å —Ä–∞–∑–ª–∏—á–∏—è, –Ω–æ –æ–Ω–∏ –ø—Ä–∏–µ–º–ª–µ–º—ã")
    else:
        print("‚ùó –í—ã—Å–æ–∫–∞—è –≤–∞—Ä–∏–∞—Ü–∏—è - –∑–∞—Ä–ø–ª–∞—Ç—ã –æ—á–µ–Ω—å –Ω–µ–æ–¥–Ω–æ—Ä–æ–¥–Ω—ã")

    # –ö–≤–∞—Ä—Ç–∏–ª–∏ –∏ –ø—Ä–æ—Ü–µ–Ω—Ç–∏–ª–∏
    print("\nüìä –ö–í–ê–†–¢–ò–õ–ò –ò –ü–†–û–¶–ï–ù–¢–ò–õ–ò:")
    quartiles = salary_data.quantile([0.25, 0.5, 0.75, 0.9, 0.95, 0.99])
    print(f"25-–π –ø—Ä–æ—Ü–µ–Ω—Ç–∏–ª—å (Q1): {quartiles[0.25]:,.0f} —Ä—É–±.")
    print(f"50-–π –ø—Ä–æ—Ü–µ–Ω—Ç–∏–ª—å (Q2, –º–µ–¥–∏–∞–Ω–∞): {quartiles[0.5]:,.0f} —Ä—É–±.")
    print(f"75-–π –ø—Ä–æ—Ü–µ–Ω—Ç–∏–ª—å (Q3): {quartiles[0.75]:,.0f} —Ä—É–±.")
    print(f"90-–π –ø—Ä–æ—Ü–µ–Ω—Ç–∏–ª—å: {quartiles[0.9]:,.0f} —Ä—É–±.")
    print(f"95-–π –ø—Ä–æ—Ü–µ–Ω—Ç–∏–ª—å: {quartiles[0.95]:,.0f} —Ä—É–±.")
    print(f"99-–π –ø—Ä–æ—Ü–µ–Ω—Ç–∏–ª—å: {quartiles[0.99]:,.0f} —Ä—É–±.")

    return {
        'mean': mean_salary,
        'median': median_salary,
        'std': std_dev,
        'q1': quartiles[0.25],
        'q3': quartiles[0.75]
    }

def departmental_analysis(df):
    """
    –ü—Ä–æ–≤–æ–¥–∏—Ç —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∑–∞—Ä–ø–ª–∞—Ç –ø–æ –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∞–º

    Args:
        df (pandas.DataFrame): –î–∞–Ω–Ω—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
    """
    print("\n" + "="*60)
    print("üè¢ –°–†–ê–í–ù–ò–¢–ï–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –ü–û –î–ï–ü–ê–†–¢–ê–ú–ï–ù–¢–ê–ú")
    print("="*60)

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∞–º
    dept_stats = df.groupby('department')['salary'].agg([
        'count', 'mean', 'median', 'std', 'min', 'max'
    ]).round(0)

    dept_stats.columns = ['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ', '–°—Ä–µ–¥–Ω–µ–µ', '–ú–µ–¥–∏–∞–Ω–∞', '–°—Ç–¥_–æ—Ç–∫–ª', '–ú–∏–Ω–∏–º—É–º', '–ú–∞–∫—Å–∏–º—É–º']
    dept_stats = dept_stats.sort_values('–°—Ä–µ–¥–Ω–µ–µ', ascending=False)

    print("\nüìä –°–≤–æ–¥–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –ø–æ –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∞–º:")
    print(dept_stats.to_string())

    # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –≤–∞—Ä–∏–∞—Ü–∏–∏ –ø–æ –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∞–º
    dept_cv = df.groupby('department')['salary'].agg(['mean', 'std'])
    dept_cv['cv'] = dept_cv['std'] / dept_cv['mean']
    dept_cv = dept_cv.sort_values('cv')

    print("\nüìà –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –≤–∞—Ä–∏–∞—Ü–∏–∏ –ø–æ –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∞–º (–æ—Ç —Å–∞–º–æ–≥–æ —Å—Ç–∞–±–∏–ª—å–Ω–æ–≥–æ):")
    for dept, data in dept_cv.iterrows():
        print(f"{dept:15s}: {data['cv']:.2%}")

    # –ê–Ω–∞–ª–∏–∑ —Ä–∞–∑–ª–∏—á–∏–π
    highest_dept = dept_stats.index[0]
    lowest_dept = dept_stats.index[-1]
    salary_gap = dept_stats.loc[highest_dept, '–°—Ä–µ–¥–Ω–µ–µ'] / dept_stats.loc[lowest_dept, '–°—Ä–µ–¥–Ω–µ–µ']

    print(f"\nüí∞ –ö–õ–Æ–ß–ï–í–´–ï –í–´–í–û–î–´:")
    print(f"üìà –°–∞–º—ã–π –≤—ã—Å–æ–∫–æ–æ–ø–ª–∞—á–∏–≤–∞–µ–º—ã–π –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç: {highest_dept}")
    print(f"üìâ –°–∞–º—ã–π –Ω–∏–∑–∫–æ–æ–ø–ª–∞—á–∏–≤–∞–µ–º—ã–π –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç: {lowest_dept}")
    print(f"‚öñÔ∏è –†–∞–∑—Ä—ã–≤ –≤ –æ–ø–ª–∞—Ç–µ: {salary_gap:.1f}x")

    if salary_gap > 2:
        print("‚ùó –ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–∞–∑–ª–∏—á–∏—è –≤ –æ–ø–ª–∞—Ç–µ –º–µ–∂–¥—É –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∞–º–∏")
    elif salary_gap > 1.5:
        print("‚ö†Ô∏è –£–º–µ—Ä–µ–Ω–Ω—ã–µ —Ä–∞–∑–ª–∏—á–∏—è –≤ –æ–ø–ª–∞—Ç–µ")
    else:
        print("‚úÖ –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞—Ä–ø–ª–∞—Ç")

    return dept_stats

def position_analysis(df):
    """
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∑–∞—Ä–ø–ª–∞—Ç—ã –ø–æ –¥–æ–ª–∂–Ω–æ—Å—Ç—è–º

    Args:
        df (pandas.DataFrame): –î–∞–Ω–Ω—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
    """
    print("\n" + "="*60)
    print("üëî –ê–ù–ê–õ–ò–ó –ó–ê–†–ü–õ–ê–¢ –ü–û –î–û–õ–ñ–ù–û–°–¢–Ø–ú")
    print("="*60)

    position_stats = df.groupby('position')['salary'].agg([
        'count', 'mean', 'median', 'std'
    ]).round(0)

    position_stats.columns = ['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ', '–°—Ä–µ–¥–Ω–µ–µ', '–ú–µ–¥–∏–∞–Ω–∞', '–°—Ç–¥_–æ—Ç–∫–ª']
    position_stats = position_stats.sort_values('–°—Ä–µ–¥–Ω–µ–µ', ascending=False)

    print("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–æ–ª–∂–Ω–æ—Å—Ç—è–º:")
    print(position_stats.to_string())

    return position_stats

def correlation_analysis(df):
    """
    –ü—Ä–æ–≤–æ–¥–∏—Ç –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ñ–∞–∫—Ç–æ—Ä–æ–≤ –∑–∞—Ä–ø–ª–∞—Ç—ã

    Args:
        df (pandas.DataFrame): –î–∞–Ω–Ω—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
    """
    print("\n" + "="*60)
    print("üîó –ö–û–†–†–ï–õ–Ø–¶–ò–û–ù–ù–´–ô –ê–ù–ê–õ–ò–ó –§–ê–ö–¢–û–†–û–í –ó–ê–†–ü–õ–ê–¢–´")
    print("="*60)

    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
    correlation_data = df[['salary', 'years_experience', 'age', 'performance_rating']].copy()

    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    education_encoding = {'Bachelor': 1, 'Master': 2, 'PhD': 3}
    correlation_data['education_encoded'] = df['education_level'].map(education_encoding)

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω—É—é –º–∞—Ç—Ä–∏—Ü—É
    corr_matrix = correlation_data.corr()

    print("\nüìä –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è —Å –∑–∞—Ä–ø–ª–∞—Ç–æ–π:")
    salary_correlations = corr_matrix['salary'].drop('salary').sort_values(ascending=False)

    for factor, correlation in salary_correlations.items():
        strength = ""
        if abs(correlation) > 0.7:
            strength = "üí™ –°–∏–ª—å–Ω–∞—è"
        elif abs(correlation) > 0.3:
            strength = "‚û°Ô∏è –£–º–µ—Ä–µ–Ω–Ω–∞—è"
        else:
            strength = "üìâ –°–ª–∞–±–∞—è"

        direction = "–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è" if correlation > 0 else "–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è"
        print(f"{factor:20s}: {correlation:6.3f} ({strength} {direction})")

    print("\nüí° –ò–ù–¢–ï–†–ü–†–ï–¢–ê–¶–ò–Ø –ö–û–†–†–ï–õ–Ø–¶–ò–ô:")

    # –ê–Ω–∞–ª–∏–∑ –∫–∞–∂–¥–æ–≥–æ —Ñ–∞–∫—Ç–æ—Ä–∞
    exp_corr = salary_correlations['years_experience']
    if exp_corr > 0.5:
        print(f"‚úÖ –°—Ç–∞–∂ —Ä–∞–±–æ—Ç—ã —Å–∏–ª—å–Ω–æ –≤–ª–∏—è–µ—Ç –Ω–∞ –∑–∞—Ä–ø–ª–∞—Ç—É (r={exp_corr:.3f})")
    elif exp_corr > 0.3:
        print(f"‚û°Ô∏è –°—Ç–∞–∂ —Ä–∞–±–æ—Ç—ã —É–º–µ—Ä–µ–Ω–Ω–æ –≤–ª–∏—è–µ—Ç –Ω–∞ –∑–∞—Ä–ø–ª–∞—Ç—É (r={exp_corr:.3f})")
    else:
        print(f"‚ùì –°–ª–∞–±–∞—è —Å–≤—è–∑—å —Å—Ç–∞–∂–∞ –∏ –∑–∞—Ä–ø–ª–∞—Ç—ã - –≤–æ–∑–º–æ–∂–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã –≤ —Å–∏—Å—Ç–µ–º–µ –æ–ø–ª–∞—Ç—ã")

    perf_corr = salary_correlations['performance_rating']
    if perf_corr > 0.3:
        print(f"‚úÖ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–ª–∏—è–µ—Ç –Ω–∞ –∑–∞—Ä–ø–ª–∞—Ç—É (r={perf_corr:.3f})")
    else:
        print(f"‚ùì –°–ª–∞–±–∞—è —Å–≤—è–∑—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ –∑–∞—Ä–ø–ª–∞—Ç—ã")

    edu_corr = salary_correlations['education_encoded']
    if edu_corr > 0.3:
        print(f"üéì –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤–ª–∏—è–µ—Ç –Ω–∞ –∑–∞—Ä–ø–ª–∞—Ç—É (r={edu_corr:.3f})")
    else:
        print(f"üìö –°–ª–∞–±–æ–µ –≤–ª–∏—è–Ω–∏–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –Ω–∞ –∑–∞—Ä–ø–ª–∞—Ç—É")

    return correlation_data, corr_matrix

def create_visualizations(df, basic_stats):
    """
    –°–æ–∑–¥–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏

    Args:
        df (pandas.DataFrame): –î–∞–Ω–Ω—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
        basic_stats (dict): –ë–∞–∑–æ–≤—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    """
    print("\n" + "="*60)
    print("üìà –°–û–ó–î–ê–ù–ò–ï –°–¢–ê–¢–ò–°–¢–ò–ß–ï–°–ö–ò–• –í–ò–ó–£–ê–õ–ò–ó–ê–¶–ò–ô")
    print("="*60)

    # –°–æ–∑–¥–∞–µ–º —Ñ–∏–≥—É—Ä—É —Å –ø–æ–¥–≥—Ä–∞—Ñ–∏–∫–∞–º–∏
    fig, axes = plt.subplots(2, 3, figsize=(18, 12))
    fig.suptitle('–°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∑–∞—Ä–ø–ª–∞—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤', fontsize=16, fontweight='bold')

    # 1. –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∑–∞—Ä–ø–ª–∞—Ç
    axes[0, 0].hist(df['salary'], bins=50, alpha=0.7, color='skyblue', edgecolor='black')
    axes[0, 0].axvline(basic_stats['mean'], color='red', linestyle='--', linewidth=2, label=f'–°—Ä–µ–¥–Ω–µ–µ: {basic_stats["mean"]:,.0f}')
    axes[0, 0].axvline(basic_stats['median'], color='green', linestyle='--', linewidth=2, label=f'–ú–µ–¥–∏–∞–Ω–∞: {basic_stats["median"]:,.0f}')
    axes[0, 0].set_title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞—Ä–ø–ª–∞—Ç')
    axes[0, 0].set_xlabel('–ó–∞—Ä–ø–ª–∞—Ç–∞ (—Ä—É–±.)')
    axes[0, 0].set_ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤')
    axes[0, 0].legend()

    # 2. Box plot –ø–æ –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∞–º
    df.boxplot(column='salary', by='department', ax=axes[0, 1], rot=45)
    axes[0, 1].set_title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞—Ä–ø–ª–∞—Ç –ø–æ –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∞–º')
    axes[0, 1].set_xlabel('–î–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç')
    axes[0, 1].set_ylabel('–ó–∞—Ä–ø–ª–∞—Ç–∞ (—Ä—É–±.)')

    # 3. –ó–∞—Ä–ø–ª–∞—Ç—ã –ø–æ –¥–æ–ª–∂–Ω–æ—Å—Ç—è–º
    position_means = df.groupby('position')['salary'].mean().sort_values(ascending=True)
    position_means.plot(kind='barh', ax=axes[0, 2], color='lightgreen')
    axes[0, 2].set_title('–°—Ä–µ–¥–Ω–∏–µ –∑–∞—Ä–ø–ª–∞—Ç—ã –ø–æ –¥–æ–ª–∂–Ω–æ—Å—Ç—è–º')
    axes[0, 2].set_xlabel('–°—Ä–µ–¥–Ω—è—è –∑–∞—Ä–ø–ª–∞—Ç–∞ (—Ä—É–±.)')

    # 4. –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è —Å—Ç–∞–∂–∞ –∏ –∑–∞—Ä–ø–ª–∞—Ç—ã
    axes[1, 0].scatter(df['years_experience'], df['salary'], alpha=0.6, color='orange')
    axes[1, 0].set_title('–ó–∞—Ä–ø–ª–∞—Ç–∞ vs –°—Ç–∞–∂ —Ä–∞–±–æ—Ç—ã')
    axes[1, 0].set_xlabel('–°—Ç–∞–∂ (–ª–µ—Ç)')
    axes[1, 0].set_ylabel('–ó–∞—Ä–ø–ª–∞—Ç–∞ (—Ä—É–±.)')

    # –î–æ–±–∞–≤–ª—è–µ–º –ª–∏–Ω–∏—é —Ç—Ä–µ–Ω–¥–∞
    z = np.polyfit(df['years_experience'], df['salary'], 1)
    p = np.poly1d(z)
    axes[1, 0].plot(df['years_experience'], p(df['years_experience']), "r--", alpha=0.8)

    # 5. –ó–∞—Ä–ø–ª–∞—Ç–∞ vs –í–æ–∑—Ä–∞—Å—Ç
    axes[1, 1].scatter(df['age'], df['salary'], alpha=0.6, color='purple')
    axes[1, 1].set_title('–ó–∞—Ä–ø–ª–∞—Ç–∞ vs –í–æ–∑—Ä–∞—Å—Ç')
    axes[1, 1].set_xlabel('–í–æ–∑—Ä–∞—Å—Ç (–ª–µ—Ç)')
    axes[1, 1].set_ylabel('–ó–∞—Ä–ø–ª–∞—Ç–∞ (—Ä—É–±.)')

    # 6. –ó–∞—Ä–ø–ª–∞—Ç—ã –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    performance_means = df.groupby('performance_rating')['salary'].mean()
    performance_means.plot(kind='bar', ax=axes[1, 2], color='coral')
    axes[1, 2].set_title('–ó–∞—Ä–ø–ª–∞—Ç–∞ vs –†–µ–π—Ç–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏')
    axes[1, 2].set_xlabel('–†–µ–π—Ç–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏')
    axes[1, 2].set_ylabel('–°—Ä–µ–¥–Ω—è—è –∑–∞—Ä–ø–ª–∞—Ç–∞ (—Ä—É–±.)')
    axes[1, 2].set_xticklabels([f'–†–µ–π—Ç–∏–Ω–≥ {x}' for x in performance_means.index], rotation=0)

    plt.tight_layout()
    plt.savefig('statistical_analysis_dashboard.png', dpi=300, bbox_inches='tight')
    plt.show()

    print("‚úÖ –î–∞—à–±–æ—Ä–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∫–∞–∫ 'statistical_analysis_dashboard.png'")

def generate_insights_report(df, dept_stats, basic_stats):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç —Å –∏–Ω—Å–∞–π—Ç–∞–º–∏

    Args:
        df (pandas.DataFrame): –î–∞–Ω–Ω—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤  
        dept_stats (DataFrame): –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∞–º
        basic_stats (dict): –ë–∞–∑–æ–≤—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    """
    print("\n" + "="*60)
    print("üí° –ö–õ–Æ–ß–ï–í–´–ï –ò–ù–°–ê–ô–¢–´ –ò –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò")
    print("="*60)

    print("\nüéØ –û–°–ù–û–í–ù–´–ï –í–´–í–û–î–´:")

    # 1. –û–±—â–∞—è –∫–∞—Ä—Ç–∏–Ω–∞ –∑–∞—Ä–ø–ª–∞—Ç
    mean_salary = basic_stats['mean']
    median_salary = basic_stats['median']

    if mean_salary > median_salary * 1.2:
        print("1. üìä –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ó–ê–†–ü–õ–ê–¢: –°–∏–ª—å–Ω–æ —Å–º–µ—â–µ–Ω–æ –≤–ø—Ä–∞–≤–æ")
        print("   üí° –ï—Å—Ç—å –≥—Ä—É–ø–ø–∞ –≤—ã—Å–æ–∫–æ–æ–ø–ª–∞—á–∏–≤–∞–µ–º—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤, –ø–æ–¥–Ω–∏–º–∞—é—â–∏—Ö —Å—Ä–µ–¥–Ω–µ–µ")
        print("   üéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω–æ—Å—Ç—å –≤—ã—Å–æ–∫–∏—Ö –∑–∞—Ä–ø–ª–∞—Ç")

    # 2. –ê–Ω–∞–ª–∏–∑ –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–æ–≤
    highest_dept = dept_stats.index[0]
    lowest_dept = dept_stats.index[-1]
    gap_ratio = dept_stats.loc[highest_dept, '–°—Ä–µ–¥–Ω–µ–µ'] / dept_stats.loc[lowest_dept, '–°—Ä–µ–¥–Ω–µ–µ']

    print(f"\n2. üè¢ –î–ï–ü–ê–†–¢–ê–ú–ï–ù–¢–´:")
    print(f"   üìà –õ–∏–¥–µ—Ä –ø–æ –∑–∞—Ä–ø–ª–∞—Ç–∞–º: {highest_dept} ({dept_stats.loc[highest_dept, '–°—Ä–µ–¥–Ω–µ–µ']:,.0f} —Ä—É–±.)")
    print(f"   üìâ –ê—É—Ç—Å–∞–π–¥–µ—Ä: {lowest_dept} ({dept_stats.loc[lowest_dept, '–°—Ä–µ–¥–Ω–µ–µ']:,.0f} —Ä—É–±.)")
    print(f"   ‚öñÔ∏è –†–∞–∑—Ä—ã–≤: {gap_ratio:.1f} —Ä–∞–∑–∞")

    if gap_ratio > 2.5:
        print("   ‚ùó –ü–†–û–ë–õ–ï–ú–ê: –°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π —Ä–∞–∑—Ä—ã–≤ –º–µ–∂–¥—É –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∞–º–∏")
        print("   üéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –ü–µ—Ä–µ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞—Ä–ø–ª–∞—Ç–Ω—É—é –ø–æ–ª–∏—Ç–∏–∫—É")

    # 3. –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑
    corr_exp = df['salary'].corr(df['years_experience'])
    if corr_exp > 0.6:
        print(f"\n3. üìä –°–¢–ê–ñ –ò –ó–ê–†–ü–õ–ê–¢–ê: –°–∏–ª—å–Ω–∞—è —Å–≤—è–∑—å (r={corr_exp:.3f})")
        print("   ‚úÖ –°–∏—Å—Ç–µ–º–∞ –º–æ—Ç–∏–≤–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
    elif corr_exp > 0.3:
        print(f"\n3. üìä –°–¢–ê–ñ –ò –ó–ê–†–ü–õ–ê–¢–ê: –£–º–µ—Ä–µ–Ω–Ω–∞—è —Å–≤—è–∑—å (r={corr_exp:.3f})")
        print("   ‚ö†Ô∏è –ú–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å —Å–≤—è–∑—å —Å—Ç–∞–∂–∞ –∏ –∑–∞—Ä–ø–ª–∞—Ç—ã")
    else:
        print(f"\n3. üìä –°–¢–ê–ñ –ò –ó–ê–†–ü–õ–ê–¢–ê: –°–ª–∞–±–∞—è —Å–≤—è–∑—å (r={corr_exp:.3f})")
        print("   ‚ùó –ü–†–û–ë–õ–ï–ú–ê: –°—Ç–∞–∂ —Å–ª–∞–±–æ –≤–ª–∏—è–µ—Ç –Ω–∞ –∑–∞—Ä–ø–ª–∞—Ç—É")

    # 4. –í—ã–±—Ä–æ—Å—ã
    q1 = basic_stats['q1']
    q3 = basic_stats['q3']
    iqr = q3 - q1
    upper_bound = q3 + 1.5 * iqr
    outliers = df[df['salary'] > upper_bound]

    print(f"\n4. üîç –í–´–ë–†–û–°–´:")
    print(f"   üìä –ù–∞–π–¥–µ–Ω–æ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –≤—ã–±—Ä–æ—Å–æ–≤: {len(outliers)}")
    if len(outliers) > 0:
        print("   üéØ –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∞–Ω–æ–º–∞–ª—å–Ω–æ –≤—ã—Å–æ–∫–∏—Ö –∑–∞—Ä–ø–ª–∞—Ç")

    # 5. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    print(f"\nüéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –î–õ–Ø HR-–î–ï–ü–ê–†–¢–ê–ú–ï–ù–¢–ê:")
    print("1. üìã –ü—Ä–æ–≤–µ—Å—Ç–∏ –∞—É–¥–∏—Ç –≤—ã—Å–æ–∫–∏—Ö –∑–∞—Ä–ø–ª–∞—Ç –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏")
    print("2. ‚öñÔ∏è –°–≥–ª–∞–¥–∏—Ç—å —Ä–∞–∑–ª–∏—á–∏—è –≤ –æ–ø–ª–∞—Ç–µ –º–µ–∂–¥—É –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∞–º–∏")  
    print("3. üìà –£—Å–∏–ª–∏—Ç—å —Å–≤—è–∑—å –º–µ–∂–¥—É —Å—Ç–∞–∂–µ–º/–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é –∏ –∑–∞—Ä–ø–ª–∞—Ç–æ–π")
    print("4. üìä –í–Ω–µ–¥—Ä–∏—Ç—å —Ä–µ–≥—É–ª—è—Ä–Ω—ã–π —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞—Ä–ø–ª–∞—Ç")
    print("5. üéØ –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ –æ–ø–ª–∞—Ç—ã —Ç—Ä—É–¥–∞")

def main():
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –≤—ã–ø–æ–ª–Ω—è—é—â–∞—è –ø–æ–ª–Ω—ã–π —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑
    """
    print("üöÄ –ó–ê–ü–£–°–ö –ü–û–õ–ù–û–ì–û –°–¢–ê–¢–ò–°–¢–ò–ß–ï–°–ö–û–ì–û –ê–ù–ê–õ–ò–ó–ê HR –î–ê–ù–ù–´–•")
    print("=" * 80)

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    df = load_data('hr_salary_data.csv')
    if df is None:
        return

    # 1. –ë–∞–∑–æ–≤—ã–µ –æ–ø–∏—Å–∞—Ç–µ–ª—å–Ω—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    basic_stats = basic_descriptive_stats(df)

    # 2. –ê–Ω–∞–ª–∏–∑ –ø–æ –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∞–º
    dept_stats = departmental_analysis(df)

    # 3. –ê–Ω–∞–ª–∏–∑ –ø–æ –¥–æ–ª–∂–Ω–æ—Å—Ç—è–º
    position_stats = position_analysis(df)

    # 4. –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑
    corr_data, corr_matrix = correlation_analysis(df)

    # 5. –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–π
    create_visualizations(df, basic_stats)

    # 6. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞
    generate_insights_report(df, dept_stats, basic_stats)

    print("\n‚úÖ –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù!")
    print("üìä –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª: statistical_analysis_dashboard.png")
    print("üéØ –í—Å–µ –∫–ª—é—á–µ–≤—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω—ã")

if __name__ == "__main__":
    main()
