"""
üîç PCA Analysis Template
–®–∞–±–ª–æ–Ω –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≥–ª–∞–≤–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç (Principal Component Analysis)

–ê–≤—Ç–æ—Ä: Analytics Course
–ì–ª–∞–≤–∞: 24 - –ú—É–ª—å—Ç–∏–≤–∞—Ä–∏–∞–Ω—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.decomposition import PCA
from sklearn.preprocessing import StandardScaler
from sklearn.cluster import KMeans
import warnings
warnings.filterwarnings('ignore')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
plt.style.use('default')
sns.set_palette("husl")

class PCAAnalyzer:
    """
    –ö–ª–∞—Å—Å –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞ –≥–ª–∞–≤–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
    """
    
    def __init__(self):
        self.data = None
        self.features = None
        self.features_scaled = None
        self.pca_model = None
        self.components = None
        self.feature_names = None
        
    def load_and_preprocess_data(self, file_path, id_column='customer_id'):
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏ –ø—Ä–µ–¥–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è PCA
        
        Parameters:
        -----------
        file_path : str
            –ü—É—Ç—å –∫ CSV —Ñ–∞–π–ª—É
        id_column : str
            –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ —Å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞–º–∏
        """
        print("üìä –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏
        self.data = pd.read_csv(file_path, sep=';', decimal=',')
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.data)} –∑–∞–ø–∏—Å–µ–π —Å {len(self.data.columns)} –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏")
        
        # –í—ã–¥–µ–ª—è–µ–º —á–∏—Å–ª–æ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ (–∏—Å–∫–ª—é—á–∞–µ–º ID)
        self.features = self.data.drop(columns=[id_column])
        self.feature_names = list(self.features.columns)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ
        print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö:")
        print(f"–ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: {self.features.isnull().sum().sum()}")
        print(f"–î—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏: {self.features.duplicated().sum()}")
        
        # –ë–∞–∑–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        print("\nüìà –û–ø–∏—Å–∞—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(self.features.describe().round(2))
        
        return self.features
    
    def standardize_features(self):
        """
        –°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–∏–∑–Ω–∞–∫–∏ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è PCA!)
        """
        print("\n‚öñÔ∏è –°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö...")
        
        scaler = StandardScaler()
        self.features_scaled = scaler.fit_transform(self.features)
        
        print("‚úÖ –î–∞–Ω–Ω—ã–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω—ã (—Å—Ä–µ–¥–Ω–µ–µ=0, —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ=1)")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∞—Ü–∏—é
        scaled_df = pd.DataFrame(self.features_scaled, columns=self.feature_names)
        print(f"–ü—Ä–æ–≤–µ—Ä–∫–∞: —Å—Ä–µ–¥–Ω–µ–µ = {scaled_df.mean().mean():.6f}")
        print(f"–ü—Ä–æ–≤–µ—Ä–∫–∞: —Å—Ç–¥. –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ = {scaled_df.std().mean():.6f}")
        
        return self.features_scaled
    
    def perform_pca(self, n_components=None, variance_threshold=0.85):
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç –∞–Ω–∞–ª–∏–∑ –≥–ª–∞–≤–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
        
        Parameters:
        -----------
        n_components : int or None
            –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç (–µ—Å–ª–∏ None, –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
        variance_threshold : float
            –ü–æ—Ä–æ–≥ –æ–±—ä—è—Å–Ω–µ–Ω–Ω–æ–π –∏–∑–º–µ–Ω—á–∏–≤–æ—Å—Ç–∏ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤—ã–±–æ—Ä–∞
        """
        print("\nüîç –ê–Ω–∞–ª–∏–∑ –≥–ª–∞–≤–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç...")
        
        if n_components is None:
            # –°–Ω–∞—á–∞–ª–∞ —Ñ–∏—Ç—Ç–∏–º –ø–æ–ª–Ω—É—é PCA –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
            pca_full = PCA()
            pca_full.fit(self.features_scaled)
            
            # –ù–∞—Ö–æ–¥–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –ø–æ—Ä–æ–≥–∞
            cumsum = np.cumsum(pca_full.explained_variance_ratio_)
            n_components = np.argmax(cumsum >= variance_threshold) + 1
            
            print(f"üéØ –î–ª—è {variance_threshold:.0%} –∏–∑–º–µ–Ω—á–∏–≤–æ—Å—Ç–∏ –Ω—É–∂–Ω–æ {n_components} –∫–æ–º–ø–æ–Ω–µ–Ω—Ç")
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º PCA —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
        self.pca_model = PCA(n_components=n_components)
        self.components = self.pca_model.fit_transform(self.features_scaled)
        
        print(f"‚úÖ PCA –≤—ã–ø–æ–ª–Ω–µ–Ω: {n_components} –∫–æ–º–ø–æ–Ω–µ–Ω—Ç")
        print(f"üìä –û–±—ä—è—Å–Ω–µ–Ω–Ω–∞—è –∏–∑–º–µ–Ω—á–∏–≤–æ—Å—Ç—å: {self.pca_model.explained_variance_ratio_.sum():.1%}")
        
        return self.components
    
    def plot_scree(self, save_path=None):
        """
        –°—Ç—Ä–æ–∏—Ç scree plot –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
        """
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é PCA –¥–ª—è scree plot
        pca_full = PCA()
        pca_full.fit(self.features_scaled)
        
        plt.figure(figsize=(12, 6))
        
        # Scree plot
        plt.subplot(1, 2, 1)
        plt.plot(range(1, len(pca_full.explained_variance_ratio_) + 1), 
                pca_full.explained_variance_ratio_, 'bo-', linewidth=2, markersize=8)
        plt.title('üîç Scree Plot: –ò–∑–º–µ–Ω—á–∏–≤–æ—Å—Ç—å –ø–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º', fontsize=14, fontweight='bold')
        plt.xlabel('–ù–æ–º–µ—Ä –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã')
        plt.ylabel('–û–±—ä—è—Å–Ω–µ–Ω–Ω–∞—è –∏–∑–º–µ–Ω—á–∏–≤–æ—Å—Ç—å')
        plt.grid(True, alpha=0.3)
        
        # –ö—É–º—É–ª—è—Ç–∏–≤–Ω–∞—è –∏–∑–º–µ–Ω—á–∏–≤–æ—Å—Ç—å
        plt.subplot(1, 2, 2)
        cumsum = np.cumsum(pca_full.explained_variance_ratio_)
        plt.plot(range(1, len(cumsum) + 1), cumsum, 'ro-', linewidth=2, markersize=8)
        plt.axhline(y=0.8, color='orange', linestyle='--', label='80%')
        plt.axhline(y=0.85, color='red', linestyle='--', label='85%')
        plt.axhline(y=0.9, color='darkred', linestyle='--', label='90%')
        plt.title('üìà –ö—É–º—É–ª—è—Ç–∏–≤–Ω–∞—è –∏–∑–º–µ–Ω—á–∏–≤–æ—Å—Ç—å', fontsize=14, fontweight='bold')
        plt.xlabel('–ù–æ–º–µ—Ä –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã')
        plt.ylabel('–ö—É–º—É–ª—è—Ç–∏–≤–Ω–∞—è –∏–∑–º–µ–Ω—á–∏–≤–æ—Å—Ç—å')
        plt.legend()
        plt.grid(True, alpha=0.3)
        
        plt.tight_layout()
        
        if save_path:
            plt.savefig(save_path, dpi=300, bbox_inches='tight')
        
        plt.show()
    
    def analyze_loadings(self, top_n=3):
        """
        –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –Ω–∞–≥—Ä—É–∑–∫–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –Ω–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        
        Parameters:
        -----------
        top_n : int
            –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–ø –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–ª—è –∫–∞–∂–¥–æ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        """
        print("\nüìã –ê–Ω–∞–ª–∏–∑ –Ω–∞–≥—Ä—É–∑–æ–∫ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç:")
        
        # –°–æ–∑–¥–∞–µ–º DataFrame —Å –Ω–∞–≥—Ä—É–∑–∫–∞–º–∏
        loadings_df = pd.DataFrame(
            self.pca_model.components_.T,
            columns=[f'PC{i+1}' for i in range(self.pca_model.n_components_)],
            index=self.feature_names
        )
        
        for i in range(self.pca_model.n_components_):
            pc_name = f'PC{i+1}'
            variance_explained = self.pca_model.explained_variance_ratio_[i]
            
            print(f"\nüéØ {pc_name} (–æ–±—ä—è—Å–Ω—è–µ—Ç {variance_explained:.1%} –∏–∑–º–µ–Ω—á–∏–≤–æ—Å—Ç–∏):")
            
            # –¢–æ–ø –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö –Ω–∞–≥—Ä—É–∑–æ–∫
            top_positive = loadings_df[pc_name].nlargest(top_n)
            print(f"  ‚¨ÜÔ∏è –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞–≥—Ä—É–∑–∫–∏:")
            for var, loading in top_positive.items():
                print(f"     {var}: {loading:.3f}")
            
            # –¢–æ–ø –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö –Ω–∞–≥—Ä—É–∑–æ–∫
            top_negative = loadings_df[pc_name].nsmallest(top_n)
            print(f"  ‚¨áÔ∏è –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –Ω–∞–≥—Ä—É–∑–∫–∏:")
            for var, loading in top_negative.items():
                print(f"     {var}: {loading:.3f}")
        
        return loadings_df


def main():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è PCAAnalyzer
    """
    print("üöÄ –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ –≥–ª–∞–≤–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç")
    print("="*50)
    
    # –°–æ–∑–¥–∞–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä
    analyzer = PCAAnalyzer()
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    analyzer.load_and_preprocess_data('customers_data.csv')
    
    # –°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä—É–µ–º
    analyzer.standardize_features()
    
    # –°—Ç—Ä–æ–∏–º scree plot
    analyzer.plot_scree()
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º PCA
    analyzer.perform_pca(variance_threshold=0.85)
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞–≥—Ä—É–∑–∫–∏
    loadings = analyzer.analyze_loadings()
    
    print("\nüéâ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")
    return analyzer


if __name__ == "__main__":
    analyzer = main()