"""
üìä PCA Visualization Template
–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≥–ª–∞–≤–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç

–ê–≤—Ç–æ—Ä: Analytics Course
–ì–ª–∞–≤–∞: 24 - –ú—É–ª—å—Ç–∏–≤–∞—Ä–∏–∞–Ω—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.decomposition import PCA
from sklearn.preprocessing import StandardScaler
from sklearn.cluster import KMeans
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import warnings
warnings.filterwarnings('ignore')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª—è
plt.style.use('default')
sns.set_palette("husl")

class PCAVisualizer:
    """
    –ö–ª–∞—Å—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–π PCA
    """
    
    def __init__(self, pca_model, components, feature_names, original_data=None):
        """
        Parameters:
        -----------
        pca_model : sklearn.decomposition.PCA
            –û–±—É—á–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å PCA
        components : np.array
            –ì–ª–∞–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã (—Ä–µ–∑—É–ª—å—Ç–∞—Ç transform)
        feature_names : list
            –ù–∞–∑–≤–∞–Ω–∏—è –∏—Å—Ö–æ–¥–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        original_data : pd.DataFrame
            –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        """
        self.pca_model = pca_model
        self.components = components
        self.feature_names = feature_names
        self.original_data = original_data
        self.loadings = pca_model.components_.T
        
    def create_biplot(self, pc1=0, pc2=1, save_path=None, figsize=(12, 8)):
        """
        –°–æ–∑–¥–∞–µ—Ç biplot - –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤ –∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        
        Parameters:
        -----------
        pc1, pc2 : int
            –ù–æ–º–µ—Ä–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è (0-indexed)
        """
        fig, ax = plt.subplots(figsize=figsize)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç—Ä–µ–ª–æ–∫
        scale_factor = 3
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –æ–±—ä–µ–∫—Ç—ã (—Ç–æ—á–∫–∏)
        scatter = ax.scatter(self.components[:, pc1], self.components[:, pc2], 
                           alpha=0.6, s=50, c='steelblue', edgecolors='white', linewidth=0.5)
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ (—Å—Ç—Ä–µ–ª–∫–∏)
        for i, feature in enumerate(self.feature_names):
            # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Å—Ç—Ä–µ–ª–∫–∏
            x_coord = self.loadings[i, pc1] * scale_factor
            y_coord = self.loadings[i, pc2] * scale_factor
            
            # –†–∏—Å—É–µ–º —Å—Ç—Ä–µ–ª–∫—É
            ax.arrow(0, 0, x_coord, y_coord, 
                    head_width=0.1, head_length=0.1, 
                    fc='red', ec='red', alpha=0.8, linewidth=2)
            
            # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
            ax.text(x_coord * 1.1, y_coord * 1.1, feature, 
                   fontsize=10, ha='center', va='center',
                   bbox=dict(boxstyle='round,pad=0.3', facecolor='white', alpha=0.8))
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Å–µ–π
        variance_pc1 = self.pca_model.explained_variance_ratio_[pc1]
        variance_pc2 = self.pca_model.explained_variance_ratio_[pc2]
        
        ax.set_xlabel(f'PC{pc1+1} ({variance_pc1:.1%} –∏–∑–º–µ–Ω—á–∏–≤–æ—Å—Ç–∏)', fontsize=12, fontweight='bold')
        ax.set_ylabel(f'PC{pc2+1} ({variance_pc2:.1%} –∏–∑–º–µ–Ω—á–∏–≤–æ—Å—Ç–∏)', fontsize=12, fontweight='bold')
        ax.set_title(f'üìä Biplot: PC{pc1+1} vs PC{pc2+1}', fontsize=14, fontweight='bold')
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–µ—Ç–∫—É –∏ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏
        ax.grid(True, alpha=0.3)
        ax.axhline(y=0, color='black', linestyle='-', alpha=0.3)
        ax.axvline(x=0, color='black', linestyle='-', alpha=0.3)
        
        # –î–µ–ª–∞–µ–º –æ—Å–∏ —Ä–∞–≤–Ω—ã–º–∏ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        ax.set_aspect('equal', adjustable='box')
        
        plt.tight_layout()
        
        if save_path:
            plt.savefig(save_path, dpi=300, bbox_inches='tight')
        
        plt.show()
    
    def plot_clusters_in_pc_space(self, clusters, pc1=0, pc2=1, save_path=None):
        """
        –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∫–ª–∞—Å—Ç–µ—Ä—ã –≤ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ –≥–ª–∞–≤–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
        """
        plt.figure(figsize=(12, 8))
        
        # –¶–≤–µ—Ç–æ–≤–∞—è –ø–∞–ª–∏—Ç—Ä–∞ –¥–ª—è –∫–ª–∞—Å—Ç–µ—Ä–æ–≤
        unique_clusters = np.unique(clusters)
        colors = plt.cm.Set1(np.linspace(0, 1, len(unique_clusters)))
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–∞–∂–¥—ã–π –∫–ª–∞—Å—Ç–µ—Ä –æ—Ç–¥–µ–ª—å–Ω–æ
        for i, cluster in enumerate(unique_clusters):
            mask = clusters == cluster
            plt.scatter(self.components[mask, pc1], self.components[mask, pc2],
                       c=[colors[i]], label=f'–ö–ª–∞—Å—Ç–µ—Ä {cluster}', 
                       alpha=0.7, s=60, edgecolors='white', linewidth=0.5)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥—Ä–∞—Ñ–∏–∫–∞
        variance_pc1 = self.pca_model.explained_variance_ratio_[pc1]
        variance_pc2 = self.pca_model.explained_variance_ratio_[pc2]
        
        plt.xlabel(f'PC{pc1+1} ({variance_pc1:.1%})', fontsize=12, fontweight='bold')
        plt.ylabel(f'PC{pc2+1} ({variance_pc2:.1%})', fontsize=12, fontweight='bold')
        plt.title('üéØ –ö–ª–∞—Å—Ç–µ—Ä—ã –≤ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ –≥–ª–∞–≤–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç', fontsize=14, fontweight='bold')
        plt.legend(bbox_to_anchor=(1.05, 1), loc='upper left')
        plt.grid(True, alpha=0.3)
        
        plt.tight_layout()
        
        if save_path:
            plt.savefig(save_path, dpi=300, bbox_inches='tight')
        
        plt.show()
    
    def plot_variable_contributions(self, component_num=0, top_n=10, save_path=None):
        """
        –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –≤–∫–ª–∞–¥ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –≤ –≥–ª–∞–≤–Ω—É—é –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—É
        """
        # –ü–æ–ª—É—á–∞–µ–º –≤–∫–ª–∞–¥—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö (–∫–≤–∞–¥—Ä–∞—Ç—ã –Ω–∞–≥—Ä—É–∑–æ–∫)
        contributions = self.loadings[:, component_num] ** 2
        
        # –°–æ–∑–¥–∞–µ–º DataFrame –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
        contrib_df = pd.DataFrame({
            'Variable': self.feature_names,
            'Contribution': contributions,
            'Loading': self.loadings[:, component_num]
        }).sort_values('Contribution', ascending=True)
        
        # –ë–µ—Ä–µ–º —Ç–æ–ø –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        top_contrib = contrib_df.tail(top_n)
        
        # –°–æ–∑–¥–∞–µ–º –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π –±–∞—Äplot
        plt.figure(figsize=(10, 6))
        colors = ['red' if x < 0 else 'blue' for x in top_contrib['Loading']]
        
        bars = plt.barh(range(len(top_contrib)), top_contrib['Contribution'], 
                       color=colors, alpha=0.7, edgecolor='white', linewidth=1)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Å–µ–π
        plt.yticks(range(len(top_contrib)), top_contrib['Variable'])
        plt.xlabel('–í–∫–ª–∞–¥ –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—É (–∫–≤–∞–¥—Ä–∞—Ç –Ω–∞–≥—Ä—É–∑–∫–∏)', fontsize=12, fontweight='bold')
        plt.title(f'üìä –í–∫–ª–∞–¥ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –≤ PC{component_num+1}', fontsize=14, fontweight='bold')
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ –±–∞—Ä—ã
        for i, (bar, loading) in enumerate(zip(bars, top_contrib['Loading'])):
            width = bar.get_width()
            plt.text(width + 0.01, bar.get_y() + bar.get_height()/2, 
                    f'{loading:.3f}', ha='left', va='center', fontweight='bold')
        
        plt.grid(True, alpha=0.3, axis='x')
        plt.tight_layout()
        
        if save_path:
            plt.savefig(save_path, dpi=300, bbox_inches='tight')
        
        plt.show()
        
        return top_contrib
    
    def create_enhanced_scree_plot(self, save_path=None):
        """
        –£–ª—É—á—à–µ–Ω–Ω—ã–π scree plot —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        """
        explained_var = self.pca_model.explained_variance_ratio_
        cumulative_var = np.cumsum(explained_var)
        
        fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(15, 6))
        
        # –û—Å–Ω–æ–≤–Ω–æ–π scree plot
        components = range(1, len(explained_var) + 1)
        ax1.plot(components, explained_var, 'bo-', linewidth=2, markersize=8)
        ax1.set_title('üîç Scree Plot', fontsize=14, fontweight='bold')
        ax1.set_xlabel('–ù–æ–º–µ—Ä –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã')
        ax1.set_ylabel('–û–±—ä—è—Å–Ω–µ–Ω–Ω–∞—è –∏–∑–º–µ–Ω—á–∏–≤–æ—Å—Ç—å')
        ax1.grid(True, alpha=0.3)
        
        # –í—ã–¥–µ–ª—è–µ–º "–ª–æ–∫–æ—Ç—å"
        if len(explained_var) >= 3:
            # –ü—Ä–æ—Å—Ç–æ–π —Å–ø–æ—Å–æ–± –Ω–∞–π—Ç–∏ –ª–æ–∫–æ—Ç—å - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ä–∞–∑–Ω–æ—Å—Ç—å –≤—Ç–æ—Ä—ã—Ö –ø—Ä–æ–∏–∑–≤–æ–¥–Ω—ã—Ö
            second_derivatives = np.diff(explained_var, 2)
            if len(second_derivatives) > 0:
                elbow_point = np.argmax(second_derivatives) + 2
                ax1.axvline(x=elbow_point, color='red', linestyle='--', 
                           label=f'–í–æ–∑–º–æ–∂–Ω—ã–π "–ª–æ–∫–æ—Ç—å" (PC{elbow_point})')
                ax1.legend()
        
        # –ö—É–º—É–ª—è—Ç–∏–≤–Ω–∞—è –∏–∑–º–µ–Ω—á–∏–≤–æ—Å—Ç—å
        ax2.plot(components, cumulative_var, 'ro-', linewidth=2, markersize=8)
        ax2.axhline(y=0.8, color='orange', linestyle='--', label='80%')
        ax2.axhline(y=0.85, color='red', linestyle='--', label='85%')
        ax2.axhline(y=0.9, color='darkred', linestyle='--', label='90%')
        ax2.set_title('üìà –ö—É–º—É–ª—è—Ç–∏–≤–Ω–∞—è –∏–∑–º–µ–Ω—á–∏–≤–æ—Å—Ç—å', fontsize=14, fontweight='bold')
        ax2.set_xlabel('–ù–æ–º–µ—Ä –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã')
        ax2.set_ylabel('–ö—É–º—É–ª—è—Ç–∏–≤–Ω–∞—è –∏–∑–º–µ–Ω—á–∏–≤–æ—Å—Ç—å')
        ax2.legend()
        ax2.grid(True, alpha=0.3)
        
        plt.tight_layout()
        
        if save_path:
            plt.savefig(save_path, dpi=300, bbox_inches='tight')
        
        plt.show()
    
    def create_interactive_biplot(self, pc1=0, pc2=1):
        """
        –°–æ–∑–¥–∞–µ—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π biplot —Å –ø–æ–º–æ—â—å—é Plotly
        """
        # –î–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–æ—á–µ–∫
        df_points = pd.DataFrame({
            f'PC{pc1+1}': self.components[:, pc1],
            f'PC{pc2+1}': self.components[:, pc2],
            'index': range(len(self.components))
        })
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–∏–≥—É—Ä—É
        fig = go.Figure()
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ—á–∫–∏
        fig.add_trace(go.Scatter(
            x=df_points[f'PC{pc1+1}'],
            y=df_points[f'PC{pc2+1}'],
            mode='markers',
            marker=dict(size=8, color='steelblue', opacity=0.7),
            text=df_points['index'],
            hovertemplate=f'<b>–û–±—ä–µ–∫—Ç %{{text}}</b><br>PC{pc1+1}: %{{x:.3f}}<br>PC{pc2+1}: %{{y:.3f}}<extra></extra>',
            name='–û–±—ä–µ–∫—Ç—ã'
        ))
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–µ–ª–∫–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        scale_factor = 3
        for i, feature in enumerate(self.feature_names):
            x_start, y_start = 0, 0
            x_end = self.loadings[i, pc1] * scale_factor
            y_end = self.loadings[i, pc2] * scale_factor
            
            # –°—Ç—Ä–µ–ª–∫–∞
            fig.add_annotation(
                x=x_end, y=y_end,
                ax=x_start, ay=y_start,
                xref='x', yref='y',
                axref='x', ayref='y',
                arrowhead=2,
                arrowsize=1,
                arrowwidth=2,
                arrowcolor='red'
            )
            
            # –ü–æ–¥–ø–∏—Å—å
            fig.add_annotation(
                x=x_end * 1.1, y=y_end * 1.1,
                text=feature,
                showarrow=False,
                font=dict(color='red', size=10)
            )
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Å–µ–π
        variance_pc1 = self.pca_model.explained_variance_ratio_[pc1]
        variance_pc2 = self.pca_model.explained_variance_ratio_[pc2]
        
        fig.update_layout(
            title=f'üìä –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π Biplot: PC{pc1+1} vs PC{pc2+1}',
            xaxis_title=f'PC{pc1+1} ({variance_pc1:.1%})',
            yaxis_title=f'PC{pc2+1} ({variance_pc2:.1%})',
            showlegend=False,
            width=800,
            height=600
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–µ—Ç–∫—É
        fig.update_xaxes(showgrid=True, gridwidth=1, gridcolor='lightgray')
        fig.update_yaxes(showgrid=True, gridwidth=1, gridcolor='lightgray')
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏
        fig.add_hline(y=0, line_dash="dash", line_color="gray", opacity=0.5)
        fig.add_vline(x=0, line_dash="dash", line_color="gray", opacity=0.5)
        
        fig.show()
        
        return fig
    
    def create_dashboard(self, clusters=None, save_path=None):
        """
        –°–æ–∑–¥–∞–µ—Ç –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –¥–∞—à–±–æ—Ä–¥ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ PCA
        """
        fig = plt.figure(figsize=(16, 12))
        
        # 1. Scree plot
        ax1 = plt.subplot(2, 3, 1)
        explained_var = self.pca_model.explained_variance_ratio_
        plt.plot(range(1, len(explained_var) + 1), explained_var, 'bo-')
        plt.title('üîç Scree Plot')
        plt.xlabel('–ö–æ–º–ø–æ–Ω–µ–Ω—Ç–∞')
        plt.ylabel('–ò–∑–º–µ–Ω—á–∏–≤–æ—Å—Ç—å')
        plt.grid(True, alpha=0.3)
        
        # 2. –ö—É–º—É–ª—è—Ç–∏–≤–Ω–∞—è –∏–∑–º–µ–Ω—á–∏–≤–æ—Å—Ç—å
        ax2 = plt.subplot(2, 3, 2)
        cumulative = np.cumsum(explained_var)
        plt.plot(range(1, len(cumulative) + 1), cumulative, 'ro-')
        plt.axhline(y=0.8, color='orange', linestyle='--', alpha=0.7)
        plt.axhline(y=0.9, color='red', linestyle='--', alpha=0.7)
        plt.title('üìà –ö—É–º—É–ª—è—Ç–∏–≤–Ω–∞—è –∏–∑–º–µ–Ω—á–∏–≤–æ—Å—Ç—å')
        plt.xlabel('–ö–æ–º–ø–æ–Ω–µ–Ω—Ç–∞')
        plt.ylabel('–ö—É–º—É–ª—è—Ç–∏–≤–Ω–∞—è –¥–æ–ª—è')
        plt.grid(True, alpha=0.3)
        
        # 3. Biplot
        ax3 = plt.subplot(2, 3, 3)
        if clusters is not None:
            colors = plt.cm.Set1(clusters)
            plt.scatter(self.components[:, 0], self.components[:, 1], c=colors, alpha=0.7)
        else:
            plt.scatter(self.components[:, 0], self.components[:, 1], alpha=0.7)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤–µ–∫—Ç–æ—Ä—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö (—É–ø—Ä–æ—â–µ–Ω–Ω–æ)
        scale = 2
        for i, feature in enumerate(self.feature_names[:5]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5
            plt.arrow(0, 0, self.loadings[i, 0]*scale, self.loadings[i, 1]*scale,
                     color='red', alpha=0.7, head_width=0.05)
        
        plt.title('üìä Biplot (PC1 vs PC2)')
        plt.xlabel(f'PC1 ({explained_var[0]:.1%})')
        plt.ylabel(f'PC2 ({explained_var[1]:.1%})')
        plt.grid(True, alpha=0.3)
        
        # 4. Heatmap –Ω–∞–≥—Ä—É–∑–æ–∫ (–ø–µ—Ä–≤—ã–µ 4 –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã)
        ax4 = plt.subplot(2, 3, 4)
        n_comp_to_show = min(4, self.pca_model.n_components_)
        loadings_subset = self.loadings[:, :n_comp_to_show]
        
        sns.heatmap(loadings_subset, 
                   xticklabels=[f'PC{i+1}' for i in range(n_comp_to_show)],
                   yticklabels=self.feature_names,
                   annot=True, fmt='.2f', cmap='RdBu_r', center=0)
        plt.title('üî• –ú–∞—Ç—Ä–∏—Ü–∞ –Ω–∞–≥—Ä—É–∑–æ–∫')
        
        # 5. –í–∫–ª–∞–¥ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –≤ PC1
        ax5 = plt.subplot(2, 3, 5)
        contributions = self.loadings[:, 0] ** 2
        sorted_idx = np.argsort(contributions)[-8:]  # –¢–æ–ø 8
        
        plt.barh(range(len(sorted_idx)), contributions[sorted_idx])
        plt.yticks(range(len(sorted_idx)), [self.feature_names[i] for i in sorted_idx])
        plt.title('üìä –í–∫–ª–∞–¥ –≤ PC1')
        plt.xlabel('–í–∫–ª–∞–¥')
        
        # 6. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        ax6 = plt.subplot(2, 3, 6)
        ax6.axis('off')
        
        # –¢–µ–∫—Å—Ç–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        info_text = f"""
        üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ PCA:
        
        ‚Ä¢ –ö–æ–º–ø–æ–Ω–µ–Ω—Ç: {self.pca_model.n_components_}
        ‚Ä¢ –û–±—ä—è—Å–Ω–µ–Ω–Ω–∞—è –∏–∑–º–µ–Ω—á–∏–≤–æ—Å—Ç—å: {explained_var.sum():.1%}
        ‚Ä¢ –ò—Å—Ö–æ–¥–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö: {len(self.feature_names)}
        ‚Ä¢ –ù–∞–±–ª—é–¥–µ–Ω–∏–π: {len(self.components)}
        
        üéØ –¢–æ–ø-3 –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:
        ‚Ä¢ PC1: {explained_var[0]:.1%}
        ‚Ä¢ PC2: {explained_var[1]:.1%}
        ‚Ä¢ PC3: {explained_var[2]:.1%}
        """
        
        ax6.text(0.1, 0.5, info_text, fontsize=11, verticalalignment='center',
                bbox=dict(boxstyle='round', facecolor='lightblue', alpha=0.8))
        
        plt.tight_layout()
        
        if save_path:
            plt.savefig(save_path, dpi=300, bbox_inches='tight')
        
        plt.show()


def demo_visualization():
    """
    –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ PCA
    """
    print("üé® –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ PCA")
    print("="*40)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    data = pd.read_csv('customers_data.csv', sep=';', decimal=',')
    features = data.drop('customer_id', axis=1)
    
    # –°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä—É–µ–º
    scaler = StandardScaler()
    features_scaled = scaler.fit_transform(features)
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º PCA
    pca = PCA(n_components=4)
    components = pca.fit_transform(features_scaled)
    
    # –ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è
    kmeans = KMeans(n_clusters=4, random_state=42)
    clusters = kmeans.fit_predict(components)
    
    # –°–æ–∑–¥–∞–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ç–æ—Ä
    visualizer = PCAVisualizer(pca, components, features.columns, data)
    
    print("\n1. üìä –°–æ–∑–¥–∞–Ω–∏–µ biplot...")
    visualizer.create_biplot()
    
    print("\n2. üéØ –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤...")
    visualizer.plot_clusters_in_pc_space(clusters)
    
    print("\n3. üìä –í–∫–ª–∞–¥ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö...")
    visualizer.plot_variable_contributions(component_num=0)
    
    print("\n4. üîç –£–ª—É—á—à–µ–Ω–Ω—ã–π scree plot...")
    visualizer.create_enhanced_scree_plot()
    
    print("\n5. üì± –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π biplot...")
    visualizer.create_interactive_biplot()
    
    print("\n6. üìä –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –¥–∞—à–±–æ—Ä–¥...")
    visualizer.create_dashboard(clusters)
    
    print("\nüéâ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    
    return visualizer


if __name__ == "__main__":
    visualizer = demo_visualization()