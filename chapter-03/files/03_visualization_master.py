#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ì–ª–∞–≤–∞ 3: –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –∏ —Å–≤–æ–¥–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
–°–∫—Ä–∏–ø—Ç: –ú–∞—Å—Ç–µ—Ä—Å–∫–∞—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–π –¥–ª—è retail-–¥–∞–Ω–Ω—ã—Ö

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–π:
- –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä—è–¥—ã —Å —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç—å—é –∏ —Ç—Ä–µ–Ω–¥–∞–º–∏
- –°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∏–∞–≥—Ä–∞–º–º—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –∏ —Ä–µ–≥–∏–æ–Ω–∞–º
- Heat maps –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
- –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –¥–∞—à–±–æ—Ä–¥—ã —Å Plotly
- –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ —Å seaborn

–ê–≤—Ç–æ—Ä: Analytics Course
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import warnings
warnings.filterwarnings('ignore')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª–µ–π –¥–ª—è –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–π –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
plt.style.use('seaborn-v0_8-whitegrid')
sns.set_palette("husl", 8)

# –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–∞—è —Ü–≤–µ—Ç–æ–≤–∞—è –ø–∞–ª–∏—Ç—Ä–∞ –¢–µ—Ö–Ω–æ–ú–∞—Ä—Ç
CORPORATE_COLORS = {
    'primary': '#1f77b4',      # –°–∏–Ω–∏–π
    'secondary': '#ff7f0e',    # –û—Ä–∞–Ω–∂–µ–≤—ã–π  
    'success': '#2ca02c',      # –ó–µ–ª–µ–Ω—ã–π
    'danger': '#d62728',       # –ö—Ä–∞—Å–Ω—ã–π
    'warning': '#ff9500',      # –ñ–µ–ª—Ç—ã–π
    'info': '#17a2b8',         # –ì–æ–ª—É–±–æ–π
    'dark': '#343a40',         # –¢–µ–º–Ω–æ-—Å–µ—Ä—ã–π
    'light': '#f8f9fa'         # –°–≤–µ—Ç–ª–æ-—Å–µ—Ä—ã–π
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä—É—Å—Å–∫–∏—Ö —à—Ä–∏—Ñ—Ç–æ–≤
plt.rcParams['font.family'] = ['DejaVu Sans']
plt.rcParams['figure.figsize'] = (12, 8)
plt.rcParams['font.size'] = 10

def load_retail_data(file_path):
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏ –ø–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç retail –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏

    Args:
        file_path (str): –ü—É—Ç—å –∫ CSV —Ñ–∞–π–ª—É —Å –¥–∞–Ω–Ω—ã–º–∏

    Returns:
        pandas.DataFrame: –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    """
    try:
        df = pd.read_csv(file_path, sep=';', decimal=',', encoding='utf-8-sig')
        print("‚úÖ Retail –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!")
        print(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df)} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π")

        # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–∞—Ç
        df['date'] = pd.to_datetime(df['date'])
        df['month_year'] = df['date'].dt.to_period('M')

        return df
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return None

def create_sales_trend_chart(df):
    """
    –°–æ–∑–¥–∞–µ—Ç –≥—Ä–∞—Ñ–∏–∫ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ä—è–¥–∞ –ø—Ä–æ–¥–∞–∂ —Å —Ç—Ä–µ–Ω–¥–æ–º

    Args:
        df (pandas.DataFrame): –î–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–¥–∞–∂–∞—Ö
    """
    print("\n" + "="*60)
    print("üìà –°–û–ó–î–ê–ù–ò–ï –ì–†–ê–§–ò–ö–ê –î–ò–ù–ê–ú–ò–ö–ò –ü–†–û–î–ê–ñ")
    print("="*60)

    # –ê–≥—Ä–µ–≥–∞—Ü–∏—è –ø–æ –º–µ—Å—è—Ü–∞–º
    monthly_sales = df.groupby('month_year').agg({
        'total_amount': 'sum',
        'transaction_id': 'count'
    }).reset_index()

    monthly_sales['month_year_str'] = monthly_sales['month_year'].astype(str)

    fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(14, 10))
    fig.suptitle('–î–∏–Ω–∞–º–∏–∫–∞ –ø—Ä–æ–¥–∞–∂ —Å–µ—Ç–∏ –¢–µ—Ö–Ω–æ–ú–∞—Ä—Ç', fontsize=16, fontweight='bold')

    # –ì—Ä–∞—Ñ–∏–∫ –≤—ã—Ä—É—á–∫–∏
    ax1.plot(monthly_sales['month_year_str'], monthly_sales['total_amount'], 
             marker='o', linewidth=3, markersize=8, color=CORPORATE_COLORS['primary'])

    # –î–æ–±–∞–≤–ª—è–µ–º –ª–∏–Ω–∏—é —Ç—Ä–µ–Ω–¥–∞
    x_numeric = range(len(monthly_sales))
    z = np.polyfit(x_numeric, monthly_sales['total_amount'], 1)
    p = np.poly1d(z)
    ax1.plot(monthly_sales['month_year_str'], p(x_numeric), 
             "--", alpha=0.7, color=CORPORATE_COLORS['danger'], linewidth=2, label='–¢—Ä–µ–Ω–¥')

    ax1.set_title('–í—ã—Ä—É—á–∫–∞ –ø–æ –º–µ—Å—è—Ü–∞–º', fontsize=14, fontweight='bold')
    ax1.set_ylabel('–í—ã—Ä—É—á–∫–∞ (—Ä—É–±.)', fontsize=12)
    ax1.tick_params(axis='x', rotation=45)
    ax1.legend()

    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å–∏ Y
    ax1.yaxis.set_major_formatter(plt.FuncFormatter(lambda x, p: f'{x/1000000:.1f}–ú'))

    # –ì—Ä–∞—Ñ–∏–∫ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    ax2.bar(monthly_sales['month_year_str'], monthly_sales['transaction_id'], 
            color=CORPORATE_COLORS['secondary'], alpha=0.7)

    ax2.set_title('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ –º–µ—Å—è—Ü–∞–º', fontsize=14, fontweight='bold')
    ax2.set_ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π', fontsize=12)
    ax2.set_xlabel('–ü–µ—Ä–∏–æ–¥', fontsize=12)
    ax2.tick_params(axis='x', rotation=45)

    plt.tight_layout()
    plt.savefig('sales_trend_analysis.png', dpi=300, bbox_inches='tight')
    plt.show()

    print("‚úÖ –ì—Ä–∞—Ñ–∏–∫ –¥–∏–Ω–∞–º–∏–∫–∏ –ø—Ä–æ–¥–∞–∂ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∫–∞–∫ 'sales_trend_analysis.png'")

    return monthly_sales

def create_category_comparison(df):
    """
    –°–æ–∑–¥–∞–µ—Ç —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ç–æ–≤–∞—Ä–æ–≤

    Args:
        df (pandas.DataFrame): –î–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–¥–∞–∂–∞—Ö
    """
    print("\n" + "="*60)
    print("üìä –ê–ù–ê–õ–ò–ó –ö–ê–¢–ï–ì–û–†–ò–ô –¢–û–í–ê–†–û–í")
    print("="*60)

    # –ê–Ω–∞–ª–∏–∑ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    category_analysis = df.groupby('category').agg({
        'total_amount': ['sum', 'mean', 'count'],
        'profit': 'sum'
    }).round(0)

    category_analysis.columns = ['–í—ã—Ä—É—á–∫–∞', '–°—Ä–µ–¥–Ω–∏–π_—á–µ–∫', '–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π', '–ü—Ä–∏–±—ã–ª—å']
    category_analysis['–ú–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å'] = (category_analysis['–ü—Ä–∏–±—ã–ª—å'] / 
                                          category_analysis['–í—ã—Ä—É—á–∫–∞'] * 100).round(1)

    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –≤—ã—Ä—É—á–∫–µ
    category_analysis = category_analysis.sort_values('–í—ã—Ä—É—á–∫–∞', ascending=True)

    fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2, 2, figsize=(16, 12))
    fig.suptitle('–ê–Ω–∞–ª–∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ç–æ–≤–∞—Ä–æ–≤ –¢–µ—Ö–Ω–æ–ú–∞—Ä—Ç', fontsize=16, fontweight='bold')

    # 1. –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è —Å—Ç–æ–ª–±—á–∞—Ç–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ –≤—ã—Ä—É—á–∫–∏
    bars1 = ax1.barh(category_analysis.index, category_analysis['–í—ã—Ä—É—á–∫–∞'], 
                     color=CORPORATE_COLORS['primary'])
    ax1.set_title('–í—ã—Ä—É—á–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º', fontsize=14, fontweight='bold')
    ax1.set_xlabel('–í—ã—Ä—É—á–∫–∞ (–º–ª–Ω —Ä—É–±.)', fontsize=12)

    # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ —Å—Ç–æ–ª–±—Ü—ã
    for i, bar in enumerate(bars1):
        width = bar.get_width()
        ax1.text(width + width*0.01, bar.get_y() + bar.get_height()/2, 
                f'{width/1000000:.1f}–ú', ha='left', va='center', fontweight='bold')

    # 2. –°—Ä–µ–¥–Ω–∏–π —á–µ–∫ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    bars2 = ax2.bar(range(len(category_analysis)), category_analysis['–°—Ä–µ–¥–Ω–∏–π_—á–µ–∫'],
                    color=CORPORATE_COLORS['secondary'])
    ax2.set_title('–°—Ä–µ–¥–Ω–∏–π —á–µ–∫ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º', fontsize=14, fontweight='bold')
    ax2.set_ylabel('–°—Ä–µ–¥–Ω–∏–π —á–µ–∫ (—Ä—É–±.)', fontsize=12)
    ax2.set_xticks(range(len(category_analysis)))
    ax2.set_xticklabels(category_analysis.index, rotation=45, ha='right')

    # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ —Å—Ç–æ–ª–±—Ü—ã
    for i, bar in enumerate(bars2):
        height = bar.get_height()
        ax2.text(bar.get_x() + bar.get_width()/2, height + height*0.01,
                f'{height:,.0f}', ha='center', va='bottom', fontweight='bold')

    # 3. –ú–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å
    colors_margin = [CORPORATE_COLORS['success'] if x > 20 else 
                    CORPORATE_COLORS['warning'] if x > 15 else 
                    CORPORATE_COLORS['danger'] for x in category_analysis['–ú–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å']]

    bars3 = ax3.bar(range(len(category_analysis)), category_analysis['–ú–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å'],
                    color=colors_margin)
    ax3.set_title('–ú–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º', fontsize=14, fontweight='bold')
    ax3.set_ylabel('–ú–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å (%)', fontsize=12)
    ax3.set_xticks(range(len(category_analysis)))
    ax3.set_xticklabels(category_analysis.index, rotation=45, ha='right')

    # –î–æ–±–∞–≤–ª—è–µ–º —Ü–µ–ª–µ–≤—É—é –ª–∏–Ω–∏—é –º–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ (18%)
    ax3.axhline(y=18, color='red', linestyle='--', alpha=0.7, label='–¶–µ–ª—å (18%)')
    ax3.legend()

    # 4. –ü—É–∑—ã—Ä—å–∫–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞: –í—ã—Ä—É—á–∫–∞ vs –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ vs –°—Ä–µ–¥–Ω–∏–π —á–µ–∫
    x = category_analysis['–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π']
    y = category_analysis['–í—ã—Ä—É—á–∫–∞'] / 1000000  # –í –º–∏–ª–ª–∏–æ–Ω–∞—Ö
    sizes = category_analysis['–°—Ä–µ–¥–Ω–∏–π_—á–µ–∫'] / 1000  # –†–∞–∑–º–µ—Ä –ø—É–∑—ã—Ä—å–∫–∞

    scatter = ax4.scatter(x, y, s=sizes, alpha=0.6, 
                         c=range(len(category_analysis)), cmap='viridis')
    ax4.set_title('–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ vs –í—ã—Ä—É—á–∫–∞ (—Ä–∞–∑–º–µ—Ä = —Å—Ä–µ–¥–Ω–∏–π —á–µ–∫)', fontsize=14, fontweight='bold')
    ax4.set_xlabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π', fontsize=12)
    ax4.set_ylabel('–í—ã—Ä—É—á–∫–∞ (–º–ª–Ω —Ä—É–±.)', fontsize=12)

    # –ü–æ–¥–ø–∏—Å–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    for i, cat in enumerate(category_analysis.index):
        ax4.annotate(cat, (x.iloc[i], y.iloc[i]), xytext=(5, 5), 
                    textcoords='offset points', fontsize=9)

    plt.tight_layout()
    plt.savefig('category_analysis_dashboard.png', dpi=300, bbox_inches='tight')
    plt.show()

    print("‚úÖ –ê–Ω–∞–ª–∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∫–∞–∫ 'category_analysis_dashboard.png'")
    print("\nüìä –¢–æ–ø-3 –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ –≤—ã—Ä—É—á–∫–µ:")
    top_categories = category_analysis.sort_values('–í—ã—Ä—É—á–∫–∞', ascending=False).head(3)
    for i, (cat, data) in enumerate(top_categories.iterrows(), 1):
        print(f"{i}. {cat}: {data['–í—ã—Ä—É—á–∫–∞']:,.0f} —Ä—É–±. (–º–∞—Ä–∂–∞: {data['–ú–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å']:.1f}%)")

    return category_analysis

def create_regional_heatmap(df):
    """
    –°–æ–∑–¥–∞–µ—Ç —Ç–µ–ø–ª–æ–≤—É—é –∫–∞—Ä—Ç—É –ø—Ä–æ–¥–∞–∂ –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º

    Args:
        df (pandas.DataFrame): –î–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–¥–∞–∂–∞—Ö
    """
    print("\n" + "="*60)
    print("üó∫ –°–û–ó–î–ê–ù–ò–ï –†–ï–ì–ò–û–ù–ê–õ–¨–ù–û–ô –¢–ï–ü–õ–û–í–û–ô –ö–ê–†–¢–´")
    print("="*60)

    # –°–æ–∑–¥–∞–Ω–∏–µ —Å–≤–æ–¥–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è —Ç–µ–ø–ª–æ–≤–æ–π –∫–∞—Ä—Ç—ã
    heatmap_data = df.pivot_table(
        values='total_amount', 
        index='city', 
        columns='category', 
        aggfunc='sum', 
        fill_value=0
    )

    # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ —Å—Ç—Ä–æ–∫–∞–º (–ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ç –æ–±—â–∏—Ö –ø—Ä–æ–¥–∞–∂ –≥–æ—Ä–æ–¥–∞)
    heatmap_pct = heatmap_data.div(heatmap_data.sum(axis=1), axis=0) * 100

    fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(18, 8))
    fig.suptitle('–†–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–¥–∞–∂ –¢–µ—Ö–Ω–æ–ú–∞—Ä—Ç', fontsize=16, fontweight='bold')

    # 1. –ê–±—Å–æ–ª—é—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–æ–¥–∞–∂
    sns.heatmap(heatmap_data/1000000, annot=True, fmt='.1f', cmap='YlOrRd', 
                ax=ax1, cbar_kws={'label': '–í—ã—Ä—É—á–∫–∞ (–º–ª–Ω —Ä—É–±.)'})
    ax1.set_title('–í—ã—Ä—É—á–∫–∞ –ø–æ –≥–æ—Ä–æ–¥–∞–º –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º', fontsize=14, fontweight='bold')
    ax1.set_xlabel('–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ç–æ–≤–∞—Ä–∞', fontsize=12)
    ax1.set_ylabel('–ì–æ—Ä–æ–¥', fontsize=12)

    # 2. –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –¥–æ–ª–∏ (%)
    sns.heatmap(heatmap_pct, annot=True, fmt='.1f', cmap='RdYlBu_r', 
                ax=ax2, cbar_kws={'label': '–î–æ–ª—è –≤ –ø—Ä–æ–¥–∞–∂–∞—Ö –≥–æ—Ä–æ–¥–∞ (%)'})
    ax2.set_title('–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–¥–∞–∂ –ø–æ –≥–æ—Ä–æ–¥–∞–º (%)', fontsize=14, fontweight='bold')
    ax2.set_xlabel('–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ç–æ–≤–∞—Ä–∞', fontsize=12)
    ax2.set_ylabel('–ì–æ—Ä–æ–¥', fontsize=12)

    plt.tight_layout()
    plt.savefig('regional_heatmap.png', dpi=300, bbox_inches='tight')
    plt.show()

    print("‚úÖ –†–µ–≥–∏–æ–Ω–∞–ª—å–Ω–∞—è —Ç–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∫–∞–∫ 'regional_heatmap.png'")

    # –ê–Ω–∞–ª–∏–∑ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≥–æ—Ä–æ–¥–æ–≤
    print("\nüéØ –°–ü–ï–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ì–û–†–û–î–û–í:")
    for city in heatmap_pct.index:
        top_category = heatmap_pct.loc[city].idxmax()
        percentage = heatmap_pct.loc[city].max()
        print(f"{city}: —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –Ω–∞ '{top_category}' ({percentage:.1f}% –ø—Ä–æ–¥–∞–∂)")

    return heatmap_data

def create_statistical_analysis(df):
    """
    –°–æ–∑–¥–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–ª—è –≥–ª—É–±–æ–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞

    Args:
        df (pandas.DataFrame): –î–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–¥–∞–∂–∞—Ö
    """
    print("\n" + "="*60)
    print("üìä –°–¢–ê–¢–ò–°–¢–ò–ß–ï–°–ö–ò–ô –ê–ù–ê–õ–ò–ó –î–ê–ù–ù–´–•")
    print("="*60)

    fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2, 2, figsize=(16, 12))
    fig.suptitle('–°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–¥–∞–∂ –¢–µ—Ö–Ω–æ–ú–∞—Ä—Ç', fontsize=16, fontweight='bold')

    # 1. Box plot —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —á–µ–∫–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    df_plot = df[df['total_amount'] < df['total_amount'].quantile(0.95)]  # –£–±–∏—Ä–∞–µ–º –≤—ã–±—Ä–æ—Å—ã –¥–ª—è –Ω–∞–≥–ª—è–¥–Ω–æ—Å—Ç–∏
    sns.boxplot(data=df_plot, x='category', y='total_amount', ax=ax1)
    ax1.set_title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—É–º–º—ã —á–µ–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º', fontsize=14, fontweight='bold')
    ax1.set_xlabel('–ö–∞—Ç–µ–≥–æ—Ä–∏—è', fontsize=12)
    ax1.set_ylabel('–°—É–º–º–∞ —á–µ–∫–∞ (—Ä—É–±.)', fontsize=12)
    ax1.tick_params(axis='x', rotation=45)

    # 2. Violin plot –¥–ª—è –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π
    sns.violinplot(data=df_plot, x='category', y='total_amount', ax=ax2, inner='quart')
    ax2.set_title('–ü–ª–æ—Ç–Ω–æ—Å—Ç—å —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —á–µ–∫–æ–≤', fontsize=14, fontweight='bold')
    ax2.set_xlabel('–ö–∞—Ç–µ–≥–æ—Ä–∏—è', fontsize=12)
    ax2.set_ylabel('–°—É–º–º–∞ —á–µ–∫–∞ (—Ä—É–±.)', fontsize=12)
    ax2.tick_params(axis='x', rotation=45)

    # 3. –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞ —á–∏—Å–ª–æ–≤—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π
    numeric_cols = ['quantity', 'item_price', 'total_amount', 'profit']
    correlation_matrix = df[numeric_cols].corr()

    sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', center=0,
                square=True, ax=ax3, cbar_kws={'label': '–ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è'})
    ax3.set_title('–ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è –º–µ–∂–¥—É –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è–º–∏', fontsize=14, fontweight='bold')

    # 4. –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–∂ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏
    dow_order = ['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞', '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ']
    dow_sales = df.groupby('day_of_week')['total_amount'].sum().reindex(dow_order)

    colors_dow = [CORPORATE_COLORS['primary'] if day in ['–°—É–±–±–æ—Ç–∞', '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'] 
                  else CORPORATE_COLORS['secondary'] for day in dow_order]

    bars4 = ax4.bar(range(len(dow_sales)), dow_sales, color=colors_dow)
    ax4.set_title('–ü—Ä–æ–¥–∞–∂–∏ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏', fontsize=14, fontweight='bold')
    ax4.set_xlabel('–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏', fontsize=12)
    ax4.set_ylabel('–í—ã—Ä—É—á–∫–∞ (—Ä—É–±.)', fontsize=12)
    ax4.set_xticks(range(len(dow_order)))
    ax4.set_xticklabels([day[:3] for day in dow_order])  # –°–æ–∫—Ä–∞—â–µ–Ω–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è

    # –í—ã–¥–µ–ª—è–µ–º –≤—ã—Ö–æ–¥–Ω—ã–µ –¥–Ω–∏
    weekend_avg = dow_sales[['–°—É–±–±–æ—Ç–∞', '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ']].mean()
    weekday_avg = dow_sales[['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞']].mean()

    ax4.axhline(y=weekend_avg, color='red', linestyle='--', alpha=0.7, 
                label=f'–°—Ä–µ–¥–Ω–µ–µ –≤—ã—Ö–æ–¥–Ω—ã–µ: {weekend_avg/1000000:.1f}–ú')
    ax4.axhline(y=weekday_avg, color='blue', linestyle='--', alpha=0.7,
                label=f'–°—Ä–µ–¥–Ω–µ–µ –±—É–¥–Ω–∏: {weekday_avg/1000000:.1f}–ú')
    ax4.legend()

    plt.tight_layout()
    plt.savefig('statistical_analysis.png', dpi=300, bbox_inches='tight')
    plt.show()

    print("‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∫–∞–∫ 'statistical_analysis.png'")

    return correlation_matrix

def create_interactive_dashboard(df):
    """
    –°–æ–∑–¥–∞–µ—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –¥–∞—à–±–æ—Ä–¥ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Plotly

    Args:
        df (pandas.DataFrame): –î–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–¥–∞–∂–∞—Ö
    """
    print("\n" + "="*60)
    print("üéõ –°–û–ó–î–ê–ù–ò–ï –ò–ù–¢–ï–†–ê–ö–¢–ò–í–ù–û–ì–û –î–ê–®–ë–û–†–î–ê")
    print("="*60)

    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞
    monthly_sales = df.groupby('month_year').agg({
        'total_amount': 'sum',
        'transaction_id': 'count',
        'profit': 'sum'
    }).reset_index()

    monthly_sales['month_year_str'] = monthly_sales['month_year'].astype(str)
    monthly_sales['margin_percent'] = (monthly_sales['profit'] / monthly_sales['total_amount'] * 100).round(1)

    # –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–≥—Ä–∞—Ñ–∏–∫–æ–≤
    fig = make_subplots(
        rows=2, cols=2,
        subplot_titles=('–î–∏–Ω–∞–º–∏–∫–∞ –≤—ã—Ä—É—á–∫–∏', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π', 
                       '–¢–æ–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–∏', '–ú–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å'),
        specs=[[{"secondary_y": False}, {"secondary_y": False}],
               [{"type": "bar"}, {"secondary_y": False}]]
    )

    # 1. –õ–∏–Ω–µ–π–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ –≤—ã—Ä—É—á–∫–∏
    fig.add_trace(
        go.Scatter(x=monthly_sales['month_year_str'], 
                  y=monthly_sales['total_amount'],
                  mode='lines+markers',
                  name='–í—ã—Ä—É—á–∫–∞',
                  line=dict(color='#1f77b4', width=3),
                  marker=dict(size=8)),
        row=1, col=1
    )

    # 2. –°—Ç–æ–ª–±—á–∞—Ç—ã–π –≥—Ä–∞—Ñ–∏–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    fig.add_trace(
        go.Bar(x=monthly_sales['month_year_str'],
               y=monthly_sales['transaction_id'],
               name='–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏',
               marker_color='#ff7f0e'),
        row=1, col=2
    )

    # 3. –¢–æ–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è —Å—Ç–æ–ª–±—á–∞—Ç–∞—è)
    category_sales = df.groupby('category')['total_amount'].sum().sort_values(ascending=True).tail(7)

    fig.add_trace(
        go.Bar(x=category_sales.values,
               y=category_sales.index,
               orientation='h',
               name='–í—ã—Ä—É—á–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º',
               marker_color='#2ca02c'),
        row=2, col=1
    )

    # 4. –ú–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å –ø–æ –º–µ—Å—è—Ü–∞–º
    fig.add_trace(
        go.Scatter(x=monthly_sales['month_year_str'],
                  y=monthly_sales['margin_percent'],
                  mode='lines+markers',
                  name='–ú–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å (%)',
                  line=dict(color='#d62728', width=3),
                  marker=dict(size=8)),
        row=2, col=2
    )

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∞–∫–µ—Ç–∞
    fig.update_layout(
        title_text="üìä –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –¥–∞—à–±–æ—Ä–¥ –¢–µ—Ö–Ω–æ–ú–∞—Ä—Ç",
        title_x=0.5,
        height=800,
        showlegend=False,
        font=dict(size=12)
    )

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Å–µ–π
    fig.update_xaxes(title_text="–ü–µ—Ä–∏–æ–¥", row=1, col=1)
    fig.update_yaxes(title_text="–í—ã—Ä—É—á–∫–∞ (—Ä—É–±.)", row=1, col=1)

    fig.update_xaxes(title_text="–ü–µ—Ä–∏–æ–¥", row=1, col=2)
    fig.update_yaxes(title_text="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", row=1, col=2)

    fig.update_xaxes(title_text="–í—ã—Ä—É—á–∫–∞ (—Ä—É–±.)", row=2, col=1)
    fig.update_yaxes(title_text="–ö–∞—Ç–µ–≥–æ—Ä–∏—è", row=2, col=1)

    fig.update_xaxes(title_text="–ü–µ—Ä–∏–æ–¥", row=2, col=2)
    fig.update_yaxes(title_text="–ú–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å (%)", row=2, col=2)

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–∞—à–±–æ—Ä–¥–∞
    fig.write_html("interactive_dashboard.html")
    print("‚úÖ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –¥–∞—à–±–æ—Ä–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∫–∞–∫ 'interactive_dashboard.html'")

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∞—à–±–æ—Ä–¥ (–µ—Å–ª–∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –≤ Jupyter)
    try:
        fig.show()
    except:
        print("üí° –û—Ç–∫—Ä–æ–π—Ç–µ —Ñ–∞–π–ª 'interactive_dashboard.html' –≤ –±—Ä–∞—É–∑–µ—Ä–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞")

def generate_insights_report(df):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç —Å –∫–ª—é—á–µ–≤—ã–º–∏ –∏–Ω—Å–∞–π—Ç–∞–º–∏

    Args:
        df (pandas.DataFrame): –î–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–¥–∞–∂–∞—Ö
    """
    print("\n" + "="*60)
    print("üí° –ì–ï–ù–ï–†–ê–¶–ò–Ø –û–¢–ß–ï–¢–ê –° –ö–õ–Æ–ß–ï–í–´–ú–ò –ò–ù–°–ê–ô–¢–ê–ú–ò")
    print("="*60)

    # –ë–∞–∑–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
    total_revenue = df['total_amount'].sum()
    total_profit = df['profit'].sum()
    avg_margin = total_profit / total_revenue * 100
    avg_check = df['total_amount'].mean()
    total_transactions = len(df)

    # –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤
    monthly_trend = df.groupby(df['date'].dt.to_period('M'))['total_amount'].sum()
    growth_rate = ((monthly_trend.iloc[-1] - monthly_trend.iloc[0]) / monthly_trend.iloc[0] * 100)

    # –¢–æ–ø–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
    top_city = df.groupby('city')['total_amount'].sum().idxmax()
    top_category = df.groupby('category')['total_amount'].sum().idxmax()
    best_day = df.groupby('day_of_week')['total_amount'].mean().idxmax()

    # –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
    report = f"""
üè™ –û–¢–ß–ï–¢ –ü–û –†–ï–ó–£–õ–¨–¢–ê–¢–ê–ú –ê–ù–ê–õ–ò–ó–ê –°–ï–¢–ò –¢–ï–•–ù–û–ú–ê–†–¢
{'='*60}

üìä –û–°–ù–û–í–ù–´–ï –ü–û–ö–ê–ó–ê–¢–ï–õ–ò:
‚Ä¢ –û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞: {total_revenue:,.0f} —Ä—É–±.
‚Ä¢ –û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å: {total_profit:,.0f} —Ä—É–±.
‚Ä¢ –°—Ä–µ–¥–Ω—è—è –º–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å: {avg_margin:.1f}%
‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: {avg_check:,.0f} —Ä—É–±.
‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {total_transactions:,}

üìà –î–ò–ù–ê–ú–ò–ö–ê –ò –¢–†–ï–ù–î–´:
‚Ä¢ –†–æ—Å—Ç –≤—ã—Ä—É—á–∫–∏ –∑–∞ –ø–µ—Ä–∏–æ–¥: {growth_rate:.1f}%
‚Ä¢ –õ—É—á—à–∏–π –≥–æ—Ä–æ–¥ –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º: {top_city}
‚Ä¢ –¢–æ–ø–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {top_category}
‚Ä¢ –°–∞–º—ã–π –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ã–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏: {best_day}

üéØ –ö–õ–Æ–ß–ï–í–´–ï –ò–ù–°–ê–ô–¢–´:

1. –°–ï–ó–û–ù–ù–û–°–¢–¨ –ü–†–û–î–ê–ñ:
   –î–∞–Ω–Ω—ã–µ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç —á–µ—Ç–∫—É—é —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç—å —Å –ø–∏–∫–∞–º–∏ –≤ –Ω–æ—è–±—Ä–µ-–¥–µ–∫–∞–±—Ä–µ
   (–ø–µ—Ä–∏–æ–¥ –Ω–æ–≤–æ–≥–æ–¥–Ω–∏—Ö —Ä–∞—Å–ø—Ä–æ–¥–∞–∂) –∏ —Å–ø–∞–¥–æ–º –≤ –ª–µ—Ç–Ω–∏–µ –º–µ—Å—è—Ü—ã.

2. –†–ï–ì–ò–û–ù–ê–õ–¨–ù–´–ï –†–ê–ó–õ–ò–ß–ò–Ø:
   –ú–æ—Å–∫–≤–∞ –∏ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥ –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç 50%+ –æ–±—â–µ–π –≤—ã—Ä—É—á–∫–∏,
   —á—Ç–æ —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –≤—ã—Å–æ–∫—É—é –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—é –ø—Ä–æ–¥–∞–∂ –≤ –º–µ–≥–∞–ø–æ–ª–∏—Å–∞—Ö.

3. –ö–ê–¢–ï–ì–û–†–ò–ô–ù–´–ô –ê–ù–ê–õ–ò–ó:
   –ù–æ—É—Ç–±—É–∫–∏ –∏ —Ç–µ–ª–µ–≤–∏–∑–æ—Ä—ã - –æ—Å–Ω–æ–≤–Ω—ã–µ –¥—Ä–∞–π–≤–µ—Ä—ã –≤—ã—Ä—É—á–∫–∏,
   –Ω–æ –∞–∫—Å–µ—Å—Å—É–∞—Ä—ã –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –Ω–∞–∏–≤—ã—Å—à—É—é –º–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å.

4. –ü–ê–¢–¢–ï–†–ù–´ –ü–û–¢–†–ï–ë–õ–ï–ù–ò–Ø:
   –í—ã—Ö–æ–¥–Ω—ã–µ –¥–Ω–∏ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –Ω–∞ 15-20% –±–æ–ª—å—à–µ –ø—Ä–æ–¥–∞–∂,
   —á—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç retail-—Å–ø–µ—Ü–∏—Ñ–∏–∫—É –ø–æ–∫—É–ø–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è.

üöÄ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:

‚Ä¢ –£—Å–∏–ª–∏—Ç—å –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ —Å–ª–∞–±—ã—Ö —Ä–µ–≥–∏–æ–Ω–∞—Ö
‚Ä¢ –†–∞—Å—à–∏—Ä–∏—Ç—å –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç –≤—ã—Å–æ–∫–æ–º–∞—Ä–∂–∏–Ω–∞–ª—å–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
‚Ä¢ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å —à—Ç–∞—Ç–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ–¥ –¥–Ω–µ–≤–Ω—É—é –Ω–µ–¥–µ–ª—é
‚Ä¢ –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ —Å–µ–∑–æ–Ω–Ω—ã–º –ø–∏–∫–∞–º —Å–ø—Ä–æ—Å–∞

üìä –í—Å–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ç–µ–∫—É—â–µ–π –ø–∞–ø–∫–µ
üéõ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –¥–∞—à–±–æ—Ä–¥: interactive_dashboard.html
"""

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
    with open('retail_analysis_report.txt', 'w', encoding='utf-8') as f:
        f.write(report)

    print(report)
    print("\n‚úÖ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∫–∞–∫ 'retail_analysis_report.txt'")

def main():
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –≤—ã–ø–æ–ª–Ω—è—é—â–∞—è –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
    """
    print("üöÄ –ó–ê–ü–£–°–ö –ú–ê–°–¢–ï–†–°–ö–û–ô –í–ò–ó–£–ê–õ–ò–ó–ê–¶–ò–ô –¢–ï–•–ù–û–ú–ê–†–¢")
    print("=" * 80)

    # 1. –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    df = load_retail_data('retail_sales_data.csv')
    if df is None:
        return

    # 2. –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –≥—Ä–∞—Ñ–∏–∫–æ–≤
    monthly_data = create_sales_trend_chart(df)

    # 3. –ê–Ω–∞–ª–∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    category_data = create_category_comparison(df)

    # 4. –†–µ–≥–∏–æ–Ω–∞–ª—å–Ω–∞—è —Ç–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞
    heatmap_data = create_regional_heatmap(df)

    # 5. –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑
    correlation_data = create_statistical_analysis(df)

    # 6. –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –¥–∞—à–±–æ—Ä–¥
    create_interactive_dashboard(df)

    # 7. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞
    generate_insights_report(df)

    print("\n" + "="*80)
    print("‚úÖ –ú–ê–°–¢–ï–†–°–ö–ê–Ø –í–ò–ó–£–ê–õ–ò–ó–ê–¶–ò–ô –ó–ê–í–ï–†–®–ï–ù–ê!")
    print("üìä –°–æ–∑–¥–∞–Ω–æ 5 —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:")
    print("   ‚Ä¢ sales_trend_analysis.png")
    print("   ‚Ä¢ category_analysis_dashboard.png") 
    print("   ‚Ä¢ regional_heatmap.png")
    print("   ‚Ä¢ statistical_analysis.png")
    print("üéõ –°–æ–∑–¥–∞–Ω –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –¥–∞—à–±–æ—Ä–¥: interactive_dashboard.html")
    print("üìù –°–æ–∑–¥–∞–Ω –æ—Ç—á–µ—Ç —Å –∏–Ω—Å–∞–π—Ç–∞–º–∏: retail_analysis_report.txt")
    print("\nüéØ –í—Å–µ —Ñ–∞–π–ª—ã –≥–æ—Ç–æ–≤—ã –¥–ª—è –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤—É!")

if __name__ == "__main__":
    main()
