"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–æ–≥–æ –∏ —Ä–µ–≥—Ä–µ—Å—Å–∏–æ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –≥–æ—Ç–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞,
–ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è —Ä–µ–≥—Ä–µ—Å—Å–∏–æ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –∏ –∏—Ö –≤–∞–ª–∏–¥–∞—Ü–∏–∏.
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.linear_model import LinearRegression
from sklearn.preprocessing import PolynomialFeatures, StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.metrics import r2_score, mean_absolute_error, mean_squared_error
from scipy.stats import pearsonr
import warnings
warnings.filterwarnings('ignore')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
plt.rcParams['font.family'] = 'DejaVu Sans'
plt.rcParams['figure.figsize'] = (12, 8)
plt.style.use('default')

def load_business_data(filename: str) -> pd.DataFrame:
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –±–∏–∑–Ω–µ—Å-–¥–∞–Ω–Ω—ã–µ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Ä—É—Å—Å–∫–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
    
    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
    ----------
    filename : str
        –ò–º—è CSV —Ñ–∞–π–ª–∞
        
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
    ----------
    pd.DataFrame
        –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    """
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å —Ä—É—Å—Å–∫–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        df = pd.read_csv(filename, sep=';', decimal='.', encoding='utf-8')
        
        print(f"‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: {filename}")
        print(f"üìä –†–∞–∑–º–µ—Ä: {df.shape[0]} —Å—Ç—Ä–æ–∫, {df.shape[1]} —Å—Ç–æ–ª–±—Ü–æ–≤")
        print(f"üìã –°—Ç–æ–ª–±—Ü—ã: {list(df.columns)}")
        
        return df
        
    except FileNotFoundError:
        print(f"‚ùå –§–∞–π–ª {filename} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return pd.DataFrame()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
        return pd.DataFrame()

def create_correlation_matrix(df: pd.DataFrame, figsize: tuple = (10, 8)) -> None:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫—Ä–∞—Å–∏–≤—É—é —Ç–µ–ø–ª–æ–≤—É—é –∫–∞—Ä—Ç—É –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π
    
    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
    ----------
    df : pd.DataFrame
        DataFrame —Å —á–∏—Å–ª–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    figsize : tuple
        –†–∞–∑–º–µ—Ä –≥—Ä–∞—Ñ–∏–∫–∞
    """
    
    # –í—ã–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ–≤—ã–µ —Å—Ç–æ–ª–±—Ü—ã
    numeric_cols = df.select_dtypes(include=[np.number]).columns
    
    if len(numeric_cols) < 2:
        print("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —á–∏—Å–ª–æ–≤—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞")
        return
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏
    corr_matrix = df[numeric_cols].corr()
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ–ø–ª–æ–≤—É—é –∫–∞—Ä—Ç—É
    plt.figure(figsize=figsize)
    
    # –°–æ–∑–¥–∞–µ–º –º–∞—Å–∫—É –¥–ª—è –≤–µ—Ä—Ö–Ω–µ–≥–æ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞ (—É–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ)
    mask = np.triu(np.ones_like(corr_matrix, dtype=bool))
    
    # –†–∏—Å—É–µ–º —Ç–µ–ø–ª–æ–≤—É—é –∫–∞—Ä—Ç—É
    sns.heatmap(
        corr_matrix, 
        mask=mask,
        annot=True, 
        cmap='RdYlBu_r',
        center=0,
        fmt='.2f',
        square=True,
        cbar_kws={'label': '–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏'}
    )
    
    plt.title('üîó –ö–∞—Ä—Ç–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π –º–µ–∂–¥—É –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è–º–∏', fontsize=16, pad=20)
    plt.xticks(rotation=45, ha='right')
    plt.yticks(rotation=0)
    plt.tight_layout()
    plt.show()
    
    # –í—ã–≤–æ–¥–∏–º —Ç–æ–ø –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π
    print("\nüèÜ –¢–û–ü-5 –°–ê–ú–´–• –°–ò–õ–¨–ù–´–• –°–í–Ø–ó–ï–ô:")
    print("=" * 50)
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–∞—Ä—ã –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π
    correlations = []
    for i in range(len(corr_matrix.columns)):
        for j in range(i+1, len(corr_matrix.columns)):
            var1 = corr_matrix.columns[i]
            var2 = corr_matrix.columns[j]
            corr_val = corr_matrix.iloc[i, j]
            correlations.append((var1, var2, corr_val))
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é –∞–±—Å–æ–ª—é—Ç–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
    correlations.sort(key=lambda x: abs(x[2]), reverse=True)
    
    for i, (var1, var2, corr_val) in enumerate(correlations[:5], 1):
        direction = "üìà –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è" if corr_val > 0 else "üìâ –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è"
        strength = "üî• –°–∏–ª—å–Ω–∞—è" if abs(corr_val) > 0.7 else ("‚ö° –°—Ä–µ–¥–Ω—è—è" if abs(corr_val) > 0.3 else "üí® –°–ª–∞–±–∞—è")
        print(f"{i}. {var1} ‚Üî {var2}")
        print(f"   {direction} —Å–≤—è–∑—å: {corr_val:.3f} ({strength})")
        print()

def simple_regression_analysis(df: pd.DataFrame, x_col: str, y_col: str) -> dict:
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø—Ä–æ—Å—Ç–æ–π —Ä–µ–≥—Ä–µ—Å—Å–∏–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –º–µ–∂–¥—É –¥–≤—É–º—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏
    
    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
    ----------
    df : pd.DataFrame
        –î–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    x_col : str
        –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π (X)
    y_col : str
        –ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π (Y)
        
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
    ----------
    dict
        –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–µ–≥—Ä–µ—Å—Å–∏–æ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
    """
    
    if x_col not in df.columns or y_col not in df.columns:
        print(f"‚ùå –°—Ç–æ–ª–±—Ü—ã {x_col} –∏–ª–∏ {y_col} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return {}
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    X = df[[x_col]].values
    y = df[y_col].values
    
    # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    mask = ~(np.isnan(X.flatten()) | np.isnan(y))
    X = X[mask]
    y = y[mask]
    
    if len(X) < 3:
        print("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–µ–≥—Ä–µ—Å—Å–∏–∏")
        return {}
    
    # –°—Ç—Ä–æ–∏–º –º–æ–¥–µ–ª—å
    model = LinearRegression()
    model.fit(X, y)
    
    # –î–µ–ª–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
    y_pred = model.predict(X)
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
    r2 = r2_score(y, y_pred)
    correlation, p_value = pearsonr(X.flatten(), y)
    mae = mean_absolute_error(y, y_pred)
    rmse = np.sqrt(mean_squared_error(y, y_pred))
    
    results = {
        'coefficient': model.coef_[0],
        'intercept': model.intercept_,
        'r_squared': r2,
        'correlation': correlation,
        'p_value': p_value,
        'mae': mae,
        'rmse': rmse,
        'n_observations': len(X)
    }
    
    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–†–û–°–¢–û–ô –†–ï–ì–†–ï–°–°–ò–ò")
    print("=" * 40)
    print(f"üìà –ú–æ–¥–µ–ª—å: {y_col} = {model.intercept_:.2f} + {model.coef_[0]:.3f} √ó {x_col}")
    print()
    print("üìã –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤:")
    print(f"‚Ä¢ –ë–∞–∑–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å: {model.intercept_:.2f}")
    print(f"‚Ä¢ –≠—Ñ—Ñ–µ–∫—Ç {x_col}: {model.coef_[0]:.3f}")
    if model.coef_[0] > 0:
        print(f"  ‚Üí –ü—Ä–∏ —É–≤–µ–ª–∏—á–µ–Ω–∏–∏ {x_col} –Ω–∞ 1 –µ–¥., {y_col} —Ä–∞—Å—Ç–µ—Ç –Ω–∞ {model.coef_[0]:.3f}")
    else:
        print(f"  ‚Üí –ü—Ä–∏ —É–≤–µ–ª–∏—á–µ–Ω–∏–∏ {x_col} –Ω–∞ 1 –µ–¥., {y_col} –ø–∞–¥–∞–µ—Ç –Ω–∞ {abs(model.coef_[0]):.3f}")
    print()
    print("üìä –ö–∞—á–µ—Å—Ç–≤–æ –º–æ–¥–µ–ª–∏:")
    print(f"‚Ä¢ R¬≤ = {r2:.3f} (–º–æ–¥–µ–ª—å –æ–±—ä—è—Å–Ω—è–µ—Ç {r2*100:.1f}% –≤–∞—Ä–∏–∞—Ü–∏–∏)")
    print(f"‚Ä¢ –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è = {correlation:.3f}")
    print(f"‚Ä¢ P-value = {p_value:.6f} ({'–∑–Ω–∞—á–∏–º–æ' if p_value < 0.05 else '–ù–ï –∑–Ω–∞—á–∏–º–æ'})")
    print(f"‚Ä¢ –°—Ä–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞ = {mae:.2f}")
    
    # –°—Ç—Ä–æ–∏–º –≥—Ä–∞—Ñ–∏–∫
    plt.figure(figsize=(12, 5))
    
    # –ì—Ä–∞—Ñ–∏–∫ —Ä–∞—Å—Å–µ—è–Ω–∏—è —Å –ª–∏–Ω–∏–µ–π —Ä–µ–≥—Ä–µ—Å—Å–∏–∏
    plt.subplot(1, 2, 1)
    plt.scatter(X, y, alpha=0.6, color='steelblue', s=50)
    plt.plot(X, y_pred, color='red', linewidth=2, label=f'y = {model.intercept_:.1f} + {model.coef_[0]:.2f}x')
    plt.xlabel(x_col, fontsize=12)
    plt.ylabel(y_col, fontsize=12)
    plt.title(f'üìà –†–µ–≥—Ä–µ—Å—Å–∏–æ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å\nR¬≤ = {r2:.3f}', fontsize=14)
    plt.legend()
    plt.grid(True, alpha=0.3)
    
    # –ì—Ä–∞—Ñ–∏–∫ –æ—Å—Ç–∞—Ç–∫–æ–≤
    residuals = y - y_pred
    plt.subplot(1, 2, 2)
    plt.scatter(y_pred, residuals, alpha=0.6, color='orange', s=50)
    plt.axhline(y=0, color='red', linestyle='--', linewidth=2)
    plt.xlabel('–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è', fontsize=12)
    plt.ylabel('–û—Å—Ç–∞—Ç–∫–∏', fontsize=12)
    plt.title('üîç –ê–Ω–∞–ª–∏–∑ –æ—Å—Ç–∞—Ç–∫–æ–≤', fontsize=14)
    plt.grid(True, alpha=0.3)
    
    plt.tight_layout()
    plt.show()
    
    return results

def multiple_regression_analysis(df: pd.DataFrame, target_col: str, feature_cols: list) -> dict:
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Ä–µ–≥—Ä–µ—Å—Å–∏–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑
    
    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
    ----------
    df : pd.DataFrame
        –î–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    target_col : str
        –¶–µ–ª–µ–≤–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è (Y)
    feature_cols : list
        –°–ø–∏—Å–æ–∫ –Ω–µ–∑–∞–≤–∏—Å–∏–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö (X)
        
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
    ----------
    dict
        –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–π —Ä–µ–≥—Ä–µ—Å—Å–∏–∏
    """
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å—Ç–æ–ª–±—Ü–æ–≤
    missing_cols = [col for col in feature_cols + [target_col] if col not in df.columns]
    if missing_cols:
        print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ —Å—Ç–æ–ª–±—Ü—ã: {missing_cols}")
        return {}
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    X = df[feature_cols].values
    y = df[target_col].values
    
    # –£–±–∏—Ä–∞–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
    mask = ~(np.isnan(X).any(axis=1) | np.isnan(y))
    X = X[mask]
    y = y[mask]
    
    if len(X) < len(feature_cols) + 2:
        print("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–π —Ä–µ–≥—Ä–µ—Å—Å–∏–∏")
        return {}
    
    # –°—Ç—Ä–æ–∏–º –º–æ–¥–µ–ª—å
    model = LinearRegression()
    model.fit(X, y)
    
    # –î–µ–ª–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
    y_pred = model.predict(X)
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
    r2 = r2_score(y, y_pred)
    mae = mean_absolute_error(y, y_pred)
    rmse = np.sqrt(mean_squared_error(y, y_pred))
    
    results = {
        'coefficients': dict(zip(feature_cols, model.coef_)),
        'intercept': model.intercept_,
        'r_squared': r2,
        'mae': mae,
        'rmse': rmse,
        'n_observations': len(X),
        'n_features': len(feature_cols)
    }
    
    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ú–ù–û–ñ–ï–°–¢–í–ï–ù–ù–û–ô –†–ï–ì–†–ï–°–°–ò–ò")
    print("=" * 45)
    
    # –§–æ—Ä–º—É–ª–∞ –º–æ–¥–µ–ª–∏
    formula_parts = [f"{model.intercept_:.2f}"]
    for feature, coef in zip(feature_cols, model.coef_):
        if coef >= 0:
            formula_parts.append(f"+ {coef:.3f}√ó{feature}")
        else:
            formula_parts.append(f"- {abs(coef):.3f}√ó{feature}")
    
    formula = f"{target_col} = " + " ".join(formula_parts)
    print(f"üìà –ú–æ–¥–µ–ª—å: {formula}")
    print()
    
    print("üìã –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤:")
    print(f"‚Ä¢ –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∞: {model.intercept_:.2f} (–±–∞–∑–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å)")
    
    for feature, coef in zip(feature_cols, model.coef_):
        direction = "—É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è" if coef > 0 else "—É–º–µ–Ω—å—à–∞–µ—Ç—Å—è"
        print(f"‚Ä¢ {feature}: {coef:.3f}")
        print(f"  ‚Üí –ü—Ä–∏ —Ä–æ—Å—Ç–µ –Ω–∞ 1 –µ–¥., {target_col} {direction} –Ω–∞ {abs(coef):.3f}")
    print()
    
    print("üìä –ö–∞—á–µ—Å—Ç–≤–æ –º–æ–¥–µ–ª–∏:")
    print(f"‚Ä¢ R¬≤ = {r2:.3f} (–æ–±—ä—è—Å–Ω—è–µ—Ç {r2*100:.1f}% –≤–∞—Ä–∏–∞—Ü–∏–∏)")
    print(f"‚Ä¢ –°—Ä–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞ = {mae:.2f}")
    print(f"‚Ä¢ –ù–∞–±–ª—é–¥–µ–Ω–∏–π: {len(X)}")
    
    # –ì—Ä–∞—Ñ–∏–∫ –≤–∞–∂–Ω–æ—Å—Ç–∏ —Ñ–∞–∫—Ç–æ—Ä–æ–≤
    plt.figure(figsize=(12, 6))
    
    # –í–∞–∂–Ω–æ—Å—Ç—å —Ñ–∞–∫—Ç–æ—Ä–æ–≤ (–ø–æ –∞–±—Å–æ–ª—é—Ç–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏—è–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤)
    plt.subplot(1, 2, 1)
    importances = np.abs(model.coef_)
    indices = np.argsort(importances)[::-1]
    
    colors = ['green' if coef > 0 else 'red' for coef in model.coef_[indices]]
    plt.bar(range(len(importances)), importances[indices], color=colors, alpha=0.7)
    plt.xlabel('–§–∞–∫—Ç–æ—Ä—ã')
    plt.ylabel('–í–∞–∂–Ω–æ—Å—Ç—å (|–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç|)')
    plt.title('üìä –í–∞–∂–Ω–æ—Å—Ç—å —Ñ–∞–∫—Ç–æ—Ä–æ–≤')
    plt.xticks(range(len(feature_cols)), [feature_cols[i] for i in indices], rotation=45, ha='right')
    plt.grid(True, alpha=0.3)
    
    # –ì—Ä–∞—Ñ–∏–∫ –æ—Å—Ç–∞—Ç–∫–æ–≤ vs –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    plt.subplot(1, 2, 2)
    residuals = y - y_pred
    plt.scatter(y_pred, residuals, alpha=0.6, color='purple', s=50)
    plt.axhline(y=0, color='red', linestyle='--', linewidth=2)
    plt.xlabel('–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è')
    plt.ylabel('–û—Å—Ç–∞—Ç–∫–∏')
    plt.title('üîç –ê–Ω–∞–ª–∏–∑ –æ—Å—Ç–∞—Ç–∫–æ–≤')
    plt.grid(True, alpha=0.3)
    
    plt.tight_layout()
    plt.show()
    
    return results

def polynomial_regression_analysis(df: pd.DataFrame, x_col: str, y_col: str, degree: int = 2) -> dict:
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–ª–∏–Ω–æ–º–∏–∞–ª—å–Ω—É—é —Ä–µ–≥—Ä–µ—Å—Å–∏—é –¥–ª—è –Ω–µ–ª–∏–Ω–µ–π–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    
    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
    ----------
    df : pd.DataFrame
        –î–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    x_col : str
        –ù–µ–∑–∞–≤–∏—Å–∏–º–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è
    y_col : str
        –ó–∞–≤–∏—Å–∏–º–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è
    degree : int
        –°—Ç–µ–ø–µ–Ω—å –ø–æ–ª–∏–Ω–æ–º–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 2 - –∫–≤–∞–¥—Ä–∞—Ç–∏—á–Ω–∞—è)
        
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
    ----------
    dict
        –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–ª–∏–Ω–æ–º–∏–∞–ª—å–Ω–æ–π —Ä–µ–≥—Ä–µ—Å—Å–∏–∏
    """
    
    if x_col not in df.columns or y_col not in df.columns:
        print(f"‚ùå –°—Ç–æ–ª–±—Ü—ã {x_col} –∏–ª–∏ {y_col} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return {}
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    X = df[x_col].values.reshape(-1, 1)
    y = df[y_col].values
    
    # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    mask = ~(np.isnan(X.flatten()) | np.isnan(y))
    X = X[mask]
    y = y[mask]
    
    # –°–æ–∑–¥–∞–µ–º –ø–æ–ª–∏–Ω–æ–º–∏–∞–ª—å–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
    poly_features = PolynomialFeatures(degree=degree)
    X_poly = poly_features.fit_transform(X)
    
    # –°—Ç—Ä–æ–∏–º –º–æ–¥–µ–ª–∏
    linear_model = LinearRegression()
    linear_model.fit(X, y)
    linear_pred = linear_model.predict(X)
    linear_r2 = r2_score(y, linear_pred)
    
    poly_model = LinearRegression()
    poly_model.fit(X_poly, y)
    poly_pred = poly_model.predict(X_poly)
    poly_r2 = r2_score(y, poly_pred)
    
    results = {
        'linear_r2': linear_r2,
        'polynomial_r2': poly_r2,
        'improvement': poly_r2 - linear_r2,
        'polynomial_coefficients': poly_model.coef_,
        'polynomial_intercept': poly_model.intercept_,
        'degree': degree,
        'better_model': 'polynomial' if poly_r2 > linear_r2 else 'linear'
    }
    
    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print("üìä –°–†–ê–í–ù–ï–ù–ò–ï –õ–ò–ù–ï–ô–ù–û–ô –ò –ü–û–õ–ò–ù–û–ú–ò–ê–õ–¨–ù–û–ô –ú–û–î–ï–õ–ï–ô")
    print("=" * 55)
    print(f"üìà –õ–∏–Ω–µ–π–Ω–∞—è –º–æ–¥–µ–ª—å R¬≤ = {linear_r2:.3f}")
    print(f"üìà –ü–æ–ª–∏–Ω–æ–º–∏–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å (—Å—Ç–µ–ø–µ–Ω—å {degree}) R¬≤ = {poly_r2:.3f}")
    print(f"üéØ –£–ª—É—á—à–µ–Ω–∏–µ = {poly_r2 - linear_r2:.3f}")
    print()
    
    if poly_r2 > linear_r2 + 0.05:  # –ó–Ω–∞—á–∏–º–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ
        print("‚úÖ –ü–æ–ª–∏–Ω–æ–º–∏–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –ª—É—á—à–µ!")
        print("üí° –í –¥–∞–Ω–Ω—ã—Ö –µ—Å—Ç—å –Ω–µ–ª–∏–Ω–µ–π–Ω–∞—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å")
    elif poly_r2 > linear_r2:
        print("‚ö° –ù–µ–±–æ–ª—å—à–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ –æ—Ç –ø–æ–ª–∏–Ω–æ–º–∏–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏")
        print("üí° –í–æ–∑–º–æ–∂–Ω–æ, –µ—Å—Ç—å —Å–ª–∞–±–∞—è –Ω–µ–ª–∏–Ω–µ–π–Ω–æ—Å—Ç—å")
    else:
        print("‚ùå –õ–∏–Ω–µ–π–Ω–∞—è –º–æ–¥–µ–ª—å —Ä–∞–±–æ—Ç–∞–µ—Ç –ª—É—á—à–µ")
        print("üí° –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –ª–∏–Ω–µ–π–Ω–∞—è")
    
    # –ì—Ä–∞—Ñ–∏–∫ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    plt.figure(figsize=(15, 5))
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–π –∫—Ä–∏–≤–æ–π
    sort_idx = np.argsort(X.flatten())
    X_sorted = X[sort_idx]
    y_sorted = y[sort_idx]
    X_poly_sorted = X_poly[sort_idx]
    linear_pred_sorted = linear_pred[sort_idx]
    poly_pred_sorted = poly_pred[sort_idx]
    
    # –õ–∏–Ω–µ–π–Ω–∞—è –º–æ–¥–µ–ª—å
    plt.subplot(1, 3, 1)
    plt.scatter(X, y, alpha=0.6, color='steelblue', s=50)
    plt.plot(X_sorted, linear_pred_sorted, color='red', linewidth=2, label=f'Linear (R¬≤={linear_r2:.3f})')
    plt.xlabel(x_col)
    plt.ylabel(y_col)
    plt.title('üìà –õ–∏–Ω–µ–π–Ω–∞—è –º–æ–¥–µ–ª—å')
    plt.legend()
    plt.grid(True, alpha=0.3)
    
    # –ü–æ–ª–∏–Ω–æ–º–∏–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å
    plt.subplot(1, 3, 2)
    plt.scatter(X, y, alpha=0.6, color='steelblue', s=50)
    plt.plot(X_sorted, poly_pred_sorted, color='green', linewidth=2, label=f'Polynomial (R¬≤={poly_r2:.3f})')
    plt.xlabel(x_col)
    plt.ylabel(y_col)
    plt.title(f'üìà –ü–æ–ª–∏–Ω–æ–º–∏–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å (—Å—Ç–µ–ø–µ–Ω—å {degree})')
    plt.legend()
    plt.grid(True, alpha=0.3)
    
    # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–æ–≤
    plt.subplot(1, 3, 3)
    linear_residuals = y - linear_pred
    poly_residuals = y - poly_pred
    
    plt.scatter(linear_pred, linear_residuals, alpha=0.6, color='red', s=30, label='–õ–∏–Ω–µ–π–Ω–∞—è')
    plt.scatter(poly_pred, poly_residuals, alpha=0.6, color='green', s=30, label='–ü–æ–ª–∏–Ω–æ–º–∏–∞–ª—å–Ω–∞—è')
    plt.axhline(y=0, color='black', linestyle='--', linewidth=1)
    plt.xlabel('–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è')
    plt.ylabel('–û—Å—Ç–∞—Ç–∫–∏')
    plt.title('üîç –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–æ–≤')
    plt.legend()
    plt.grid(True, alpha=0.3)
    
    plt.tight_layout()
    plt.show()
    
    return results

def business_roi_calculator(model_results: dict, cost_per_unit: float, revenue_per_unit: float) -> dict:
    """
    –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç ROI –∏ –±–∏–∑–Ω–µ—Å-—ç—Ñ—Ñ–µ–∫—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–æ–¥–µ–ª–∏ —Ä–µ–≥—Ä–µ—Å—Å–∏–∏
    
    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
    ----------
    model_results : dict
        –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–µ–≥—Ä–µ—Å—Å–∏–æ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
    cost_per_unit : float
        –°—Ç–æ–∏–º–æ—Å—Ç—å –µ–¥–∏–Ω–∏—Ü—ã –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
    revenue_per_unit : float
        –í—ã—Ä—É—á–∫–∞ —Å –µ–¥–∏–Ω–∏—Ü—ã –∑–∞–≤–∏—Å–∏–º–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
        
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
    ----------
    dict
        –†–∞—Å—á–µ—Ç—ã ROI –∏ –±–∏–∑–Ω–µ—Å-—ç—Ñ—Ñ–µ–∫—Ç–∞
    """
    
    if 'coefficient' not in model_results:
        print("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–æ–¥–µ–ª–∏")
        return {}
    
    coefficient = model_results['coefficient']
    r_squared = model_results['r_squared']
    
    # –†–∞—Å—á–µ—Ç—ã ROI
    revenue_increase = coefficient * revenue_per_unit
    roi_percent = (revenue_increase / cost_per_unit - 1) * 100 if cost_per_unit > 0 else 0
    payback_units = cost_per_unit / revenue_increase if revenue_increase > 0 else float('inf')
    
    results = {
        'coefficient': coefficient,
        'cost_per_unit': cost_per_unit,
        'revenue_per_unit': revenue_per_unit,
        'revenue_increase': revenue_increase,
        'roi_percent': roi_percent,
        'payback_units': payback_units,
        'model_reliability': r_squared
    }
    
    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print("üí∞ –†–ê–°–ß–ï–¢ –ë–ò–ó–ù–ï–°-–≠–§–§–ï–ö–¢–ê –ò ROI")
    print("=" * 35)
    print(f"üìä –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –º–æ–¥–µ–ª–∏: {coefficient:.3f}")
    print(f"üí∏ –ó–∞—Ç—Ä–∞—Ç—ã –Ω–∞ –µ–¥–∏–Ω–∏—Ü—É: {cost_per_unit:.2f} —Ä—É–±")
    print(f"üíµ –í—ã—Ä—É—á–∫–∞ —Å –µ–¥–∏–Ω–∏—Ü—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {revenue_per_unit:.2f} —Ä—É–±")
    print()
    print("üéØ –ë–∏–∑–Ω–µ—Å-—ç—Ñ—Ñ–µ–∫—Ç:")
    print(f"‚Ä¢ –†–æ—Å—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –Ω–∞ –µ–¥–∏–Ω–∏—Ü—É –∑–∞—Ç—Ä–∞—Ç: {coefficient:.3f}")
    print(f"‚Ä¢ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –≤—ã—Ä—É—á–∫–∞: {revenue_increase:.2f} —Ä—É–±")
    print(f"‚Ä¢ ROI: {roi_percent:.1f}%")
    
    if roi_percent > 0:
        print(f"‚Ä¢ ‚úÖ –û–∫—É–ø–∞–µ–º–æ—Å—Ç—å: {payback_units:.1f} –µ–¥–∏–Ω–∏—Ü")
        if roi_percent >= 100:
            print("üöÄ –û–¢–õ–ò–ß–ù–ê–Ø –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è!")
        elif roi_percent >= 50:
            print("‚úÖ –•–æ—Ä–æ—à–∞—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è")
        elif roi_percent >= 20:
            print("‚ö° –ü—Ä–∏–µ–º–ª–µ–º–∞—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è")
        else:
            print("‚ö†Ô∏è –ù–∏–∑–∫–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å")
    else:
        print("‚ùå –£–±—ã—Ç–æ—á–Ω–∞—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è")
    
    print(f"\nüéØ –ù–∞–¥–µ–∂–Ω–æ—Å—Ç—å –ø—Ä–æ–≥–Ω–æ–∑–∞: {r_squared*100:.1f}% (R¬≤)")
    
    return results

def validate_model(df: pd.DataFrame, target_col: str, feature_cols: list, test_size: float = 0.3) -> dict:
    """
    –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –º–æ–¥–µ–ª—å –Ω–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    
    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
    ----------
    df : pd.DataFrame
        –ü–æ–ª–Ω—ã–π –Ω–∞–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö
    target_col : str
        –¶–µ–ª–µ–≤–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è
    feature_cols : list
        –°–ø–∏—Å–æ–∫ –Ω–µ–∑–∞–≤–∏—Å–∏–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    test_size : float
        –î–æ–ª—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 30%)
        
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
    ----------
    dict
        –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    """
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    X = df[feature_cols].values
    y = df[target_col].values
    
    # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    mask = ~(np.isnan(X).any(axis=1) | np.isnan(y))
    X = X[mask]
    y = y[mask]
    
    # –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ –æ–±—É—á–µ–Ω–∏–µ –∏ —Ç–µ—Å—Ç
    X_train, X_test, y_train, y_test = train_test_split(
        X, y, test_size=test_size, random_state=42
    )
    
    # –û–±—É—á–∞–µ–º –º–æ–¥–µ–ª—å
    model = LinearRegression()
    model.fit(X_train, y_train)
    
    # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
    y_train_pred = model.predict(X_train)
    y_test_pred = model.predict(X_test)
    
    # –ú–µ—Ç—Ä–∏–∫–∏
    train_r2 = r2_score(y_train, y_train_pred)
    test_r2 = r2_score(y_test, y_test_pred)
    train_mae = mean_absolute_error(y_train, y_train_pred)
    test_mae = mean_absolute_error(y_test, y_test_pred)
    
    results = {
        'train_r2': train_r2,
        'test_r2': test_r2,
        'train_mae': train_mae,
        'test_mae': test_mae,
        'overfitting': train_r2 - test_r2,
        'train_size': len(X_train),
        'test_size': len(X_test)
    }
    
    # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    print("üß™ –í–ê–õ–ò–î–ê–¶–ò–Ø –ú–û–î–ï–õ–ò –ù–ê –¢–ï–°–¢–û–í–´–• –î–ê–ù–ù–´–•")
    print("=" * 45)
    print(f"üìä –û–±—É—á–∞—é—â–∞—è –≤—ã–±–æ—Ä–∫–∞: {len(X_train)} –Ω–∞–±–ª—é–¥–µ–Ω–∏–π")
    print(f"üìä –¢–µ—Å—Ç–æ–≤–∞—è –≤—ã–±–æ—Ä–∫–∞: {len(X_test)} –Ω–∞–±–ª—é–¥–µ–Ω–∏–π")
    print()
    print("üìà –ö–∞—á–µ—Å—Ç–≤–æ –º–æ–¥–µ–ª–∏:")
    print(f"‚Ä¢ R¬≤ –Ω–∞ –æ–±—É—á–µ–Ω–∏–∏: {train_r2:.3f}")
    print(f"‚Ä¢ R¬≤ –Ω–∞ —Ç–µ—Å—Ç–µ: {test_r2:.3f}")
    print(f"‚Ä¢ –°—Ä–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞ –Ω–∞ –æ–±—É—á–µ–Ω–∏–∏: {train_mae:.2f}")
    print(f"‚Ä¢ –°—Ä–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞ –Ω–∞ —Ç–µ—Å—Ç–µ: {test_mae:.2f}")
    print()
    
    # –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è
    overfitting = train_r2 - test_r2
    print("üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è:")
    print(f"‚Ä¢ –†–∞–∑–Ω–∏—Ü–∞ R¬≤: {overfitting:.3f}")
    
    if overfitting < 0.05:
        print("‚úÖ –ú–æ–¥–µ–ª—å —Å—Ç–∞–±–∏–ª—å–Ω–∞, –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è –Ω–µ—Ç")
    elif overfitting < 0.15:
        print("‚ö†Ô∏è –ù–µ–±–æ–ª—å—à–æ–µ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ, –º–æ–¥–µ–ª—å –ø—Ä–∏–µ–º–ª–µ–º–∞")
    else:
        print("‚ùå –°–∏–ª—å–Ω–æ–µ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ, —É–ø—Ä–æ—Å—Ç–∏—Ç–µ –º–æ–¥–µ–ª—å")
    
    # –ì—Ä–∞—Ñ–∏–∫ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    plt.figure(figsize=(12, 5))
    
    plt.subplot(1, 2, 1)
    plt.scatter(y_train_pred, y_train, alpha=0.6, color='blue', label=f'–û–±—É—á–µ–Ω–∏–µ (R¬≤={train_r2:.3f})')
    plt.scatter(y_test_pred, y_test, alpha=0.6, color='red', label=f'–¢–µ—Å—Ç (R¬≤={test_r2:.3f})')
    
    # –õ–∏–Ω–∏—è –∏–¥–µ–∞–ª—å–Ω–æ–≥–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
    min_val = min(min(y_train), min(y_test))
    max_val = max(max(y_train), max(y_test))
    plt.plot([min_val, max_val], [min_val, max_val], 'k--', alpha=0.8, linewidth=2)
    
    plt.xlabel('–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è')
    plt.ylabel('–†–µ–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è')
    plt.title('üéØ –ö–∞—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π')
    plt.legend()
    plt.grid(True, alpha=0.3)
    
    # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—à–∏–±–æ–∫
    plt.subplot(1, 2, 2)
    train_residuals = y_train - y_train_pred
    test_residuals = y_test - y_test_pred
    
    plt.hist(train_residuals, bins=20, alpha=0.7, color='blue', label='–û–±—É—á–µ–Ω–∏–µ')
    plt.hist(test_residuals, bins=20, alpha=0.7, color='red', label='–¢–µ—Å—Ç')
    plt.xlabel('–û—à–∏–±–∫–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è')
    plt.ylabel('–ß–∞—Å—Ç–æ—Ç–∞')
    plt.title('üìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—à–∏–±–æ–∫')
    plt.legend()
    plt.grid(True, alpha=0.3)
    
    plt.tight_layout()
    plt.show()
    
    return results

# –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    print("üöÄ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ö–û–†–†–ï–õ–Ø–¶–ò–û–ù–ù–û–ì–û –ò –†–ï–ì–†–ï–°–°–ò–û–ù–ù–û–ì–û –ê–ù–ê–õ–ò–ó–ê")
    print("=" * 60)
    
    # –ü—Ä–∏–º–µ—Ä 1: –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑
    print("\n1Ô∏è‚É£ –ö–û–†–†–ï–õ–Ø–¶–ò–û–ù–ù–´–ô –ê–ù–ê–õ–ò–ó")
    print("-" * 30)
    
    # –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å business_metrics.csv
    df_business = load_business_data('business_metrics.csv')
    
    if not df_business.empty:
        print("\nüîó –°—Ç—Ä–æ–∏–º –∫–∞—Ä—Ç—É –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π...")
        create_correlation_matrix(df_business)
    
    # –ü—Ä–∏–º–µ—Ä 2: –ü—Ä–æ—Å—Ç–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è
    print("\n2Ô∏è‚É£ –ü–†–û–°–¢–ê–Ø –†–ï–ì–†–ï–°–°–ò–Ø")
    print("-" * 25)
    
    # –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å advertising_sales.csv
    df_ads = load_business_data('advertising_sales.csv')
    
    if not df_ads.empty and 'advertising_budget' in df_ads.columns and 'sales' in df_ads.columns:
        print("\nüìà –ê–Ω–∞–ª–∏–∑ —Å–≤—è–∑–∏ —Ä–µ–∫–ª–∞–º–∞ ‚Üí –ø—Ä–æ–¥–∞–∂–∏...")
        results = simple_regression_analysis(df_ads, 'advertising_budget', 'sales')
        
        if results:
            # –†–∞—Å—á–µ—Ç ROI –¥–ª—è —Ä–µ–∫–ª–∞–º—ã
            print("\nüí∞ –†–∞—Å—á–µ—Ç ROI —Ä–µ–∫–ª–∞–º—ã...")
            roi_results = business_roi_calculator(results, cost_per_unit=1000, revenue_per_unit=1000)
    
    # –ü—Ä–∏–º–µ—Ä 3: –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è
    print("\n3Ô∏è‚É£ –ú–ù–û–ñ–ï–°–¢–í–ï–ù–ù–ê–Ø –†–ï–ì–†–ï–°–°–ò–Ø")
    print("-" * 30)
    
    df_multiple = load_business_data('multiple_factors.csv')
    
    if not df_multiple.empty:
        feature_columns = ['advertising_budget', 'num_promotions', 'seasonal_index', 'competitor_activity']
        available_features = [col for col in feature_columns if col in df_multiple.columns]
        
        if len(available_features) >= 2 and 'sales' in df_multiple.columns:
            print(f"\nüìä –ê–Ω–∞–ª–∏–∑ –≤–ª–∏—è–Ω–∏—è —Ñ–∞–∫—Ç–æ—Ä–æ–≤: {available_features}")
            multiple_results = multiple_regression_analysis(df_multiple, 'sales', available_features)
            
            if multiple_results:
                print("\nüß™ –í–∞–ª–∏–¥–∞—Ü–∏—è –º–æ–¥–µ–ª–∏...")
                validation_results = validate_model(df_multiple, 'sales', available_features)
    
    # –ü—Ä–∏–º–µ—Ä 4: –ù–µ–ª–∏–Ω–µ–π–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    print("\n4Ô∏è‚É£ –ù–ï–õ–ò–ù–ï–ô–ù–´–ï –ó–ê–í–ò–°–ò–ú–û–°–¢–ò")
    print("-" * 35)
    
    df_nonlinear = load_business_data('nonlinear_data.csv')
    
    if not df_nonlinear.empty and 'price' in df_nonlinear.columns and 'demand' in df_nonlinear.columns:
        print("\nüîÑ –ê–Ω–∞–ª–∏–∑ –Ω–µ–ª–∏–Ω–µ–π–Ω–æ–π —Å–≤—è–∑–∏ —Ü–µ–Ω–∞ ‚Üí —Å–ø—Ä–æ—Å...")
        poly_results = polynomial_regression_analysis(df_nonlinear, 'price', 'demand', degree=2)
    
    print("\nüéâ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print("üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ —ç—Ç–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å–≤–æ–∏—Ö –¥–∞–Ω–Ω—ã—Ö")