#!/usr/bin/env python3
"""
üîó –ì–æ—Ç–æ–≤—ã–µ –ø—Ä–∏–º–µ—Ä—ã —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ø—É–ª—è—Ä–Ω—ã–º–∏ API

–≠—Ç–æ—Ç —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –≥–æ—Ç–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –∫–ª–∞—Å—Å—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ API.
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–∏ –ø—Ä–∏–º–µ—Ä—ã –∫–∞–∫ —à–∞–±–ª–æ–Ω—ã –¥–ª—è –≤–∞—à–∏—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤.

–¢—Ä–µ–±—É–µ–º—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏:
pip install requests pandas python-dotenv

–ê–≤—Ç–æ—Ä: Analytics Course (github.com/lazuale/analytics-course)
–ì–ª–∞–≤–∞: 18 - –†–∞–±–æ—Ç–∞ —Å API
"""

import requests
import pandas as pd
import json
import time
import os
from datetime import datetime, timedelta
from dotenv import load_dotenv
from typing import Dict, List, Optional, Any

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

print("üöÄ API Examples –¥–ª—è –≥–ª–∞–≤—ã 18")
print("=" * 50)

# ========================================
# üå§Ô∏è –†–ê–ë–û–¢–ê –° OPENWEATHERMAP API
# ========================================

class WeatherAPI:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å OpenWeatherMap API"""
    
    def __init__(self, api_key: str):
        self.api_key = api_key
        self.base_url = "http://api.openweathermap.org/data/2.5"
        
    def get_current_weather(self, city: str, units: str = "metric") -> Dict:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –ø–æ–≥–æ–¥—ã –¥–ª—è –≥–æ—Ä–æ–¥–∞
        
        Args:
            city: –ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "Moscow" –∏–ª–∏ "London")
            units: –ï–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è ("metric", "imperial", "kelvin")
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –ø–æ–≥–æ–¥–µ
        """
        
        url = f"{self.base_url}/weather"
        params = {
            'q': city,
            'appid': self.api_key,
            'units': units,
            'lang': 'ru'  # –û–ø–∏—Å–∞–Ω–∏—è –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
        }
        
        try:
            response = requests.get(url, params=params, timeout=10)
            response.raise_for_status()  # –í—ã–∑–æ–≤–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ HTTP –æ—à–∏–±–∫–µ
            
            data = response.json()
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
            weather_data = {
                'city': data['name'],
                'country': data['sys']['country'],
                'temperature': round(data['main']['temp'], 1),
                'feels_like': round(data['main']['feels_like'], 1),
                'humidity': data['main']['humidity'],
                'pressure': data['main']['pressure'],
                'description': data['weather'][0]['description'],
                'main': data['weather'][0]['main'],
                'wind_speed': data.get('wind', {}).get('speed', 0),
                'wind_direction': data.get('wind', {}).get('deg', 0),
                'cloudiness': data['clouds']['all'],
                'visibility': data.get('visibility', 0) / 1000,  # –∫–º
                'sunrise': datetime.fromtimestamp(data['sys']['sunrise']),
                'sunset': datetime.fromtimestamp(data['sys']['sunset']),
                'collected_at': datetime.now()
            }
            
            return weather_data
            
        except requests.exceptions.HTTPError as e:
            if response.status_code == 401:
                raise ValueError("üîê –ù–µ–≤–µ—Ä–Ω—ã–π API –∫–ª—é—á OpenWeatherMap")
            elif response.status_code == 404:
                raise ValueError(f"üîç –ì–æ—Ä–æ–¥ '{city}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
            else:
                raise ValueError(f"‚ùå HTTP –æ—à–∏–±–∫–∞: {response.status_code}")
                
        except requests.exceptions.RequestException as e:
            raise ValueError(f"üåê –û—à–∏–±–∫–∞ —Å–µ—Ç–∏: {e}")
    
    def get_multiple_cities(self, cities: List[str]) -> pd.DataFrame:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–≥–æ–¥—ã –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –≥–æ—Ä–æ–¥–æ–≤
        
        Args:
            cities: –°–ø–∏—Å–æ–∫ –Ω–∞–∑–≤–∞–Ω–∏–π –≥–æ—Ä–æ–¥–æ–≤
            
        Returns:
            DataFrame —Å –ø–æ–≥–æ–¥–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        """
        
        weather_data = []
        
        for city in cities:
            try:
                data = self.get_current_weather(city)
                weather_data.append(data)
                print(f"‚úÖ {city}: {data['temperature']}¬∞C, {data['description']}")
                time.sleep(1)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –¥–ª—è {city}: {e}")
                # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—É—é –∑–∞–ø–∏—Å—å —Å –æ—à–∏–±–∫–æ–π
                weather_data.append({
                    'city': city,
                    'error': str(e),
                    'collected_at': datetime.now()
                })
        
        return pd.DataFrame(weather_data)

# ========================================
# üí± –†–ê–ë–û–¢–ê –° –í–ê–õ–Æ–¢–ù–´–ú–ò API
# ========================================

class CurrencyAPI:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≤–∞–ª—é—Ç–Ω—ã–º–∏ –∫—É—Ä—Å–∞–º–∏"""
    
    def __init__(self):
        self.base_url = "https://api.exchangerate-api.com/v4/latest"
        
    def get_exchange_rates(self, base_currency: str = "USD") -> Dict:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç
        
        Args:
            base_currency: –ë–∞–∑–æ–≤–∞—è –≤–∞–ª—é—Ç–∞ (USD, EUR, RUB –∏ —Ç.–¥.)
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –∫—É—Ä—Å–∞–º–∏ –≤–∞–ª—é—Ç
        """
        
        url = f"{self.base_url}/{base_currency}"
        
        try:
            response = requests.get(url, timeout=10)
            response.raise_for_status()
            
            data = response.json()
            
            return {
                'base': data['base'],
                'date': data['date'],
                'rates': data['rates'],
                'collected_at': datetime.now()
            }
            
        except requests.exceptions.RequestException as e:
            raise ValueError(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç: {e}")
    
    def get_specific_rates(self, base: str, target_currencies: List[str]) -> pd.DataFrame:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∫—É—Ä—Å–æ–≤ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –≤–∞–ª—é—Ç
        
        Args:
            base: –ë–∞–∑–æ–≤–∞—è –≤–∞–ª—é—Ç–∞
            target_currencies: –°–ø–∏—Å–æ–∫ —Ü–µ–ª–µ–≤—ã—Ö –≤–∞–ª—é—Ç
            
        Returns:
            DataFrame —Å –∫—É—Ä—Å–∞–º–∏
        """
        
        rates_data = self.get_exchange_rates(base)
        
        filtered_rates = []
        for currency in target_currencies:
            if currency in rates_data['rates']:
                filtered_rates.append({
                    'currency': currency,
                    'rate': rates_data['rates'][currency],
                    'base': rates_data['base'],
                    'date': rates_data['date'],
                    'collected_at': rates_data['collected_at']
                })
            else:
                print(f"‚ö†Ô∏è –í–∞–ª—é—Ç–∞ {currency} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        
        return pd.DataFrame(filtered_rates)
    
    def calculate_conversion(self, amount: float, from_currency: str, 
                           to_currency: str) -> Dict:
        """
        –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤–∞–ª—é—Ç
        
        Args:
            amount: –°—É–º–º–∞ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
            from_currency: –ò—Å—Ö–æ–¥–Ω–∞—è –≤–∞–ª—é—Ç–∞
            to_currency: –¶–µ–ª–µ–≤–∞—è –≤–∞–ª—é—Ç–∞
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
        """
        
        rates = self.get_exchange_rates(from_currency)
        
        if to_currency not in rates['rates']:
            raise ValueError(f"–í–∞–ª—é—Ç–∞ {to_currency} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è")
        
        converted_amount = amount * rates['rates'][to_currency]
        
        return {
            'original_amount': amount,
            'original_currency': from_currency,
            'converted_amount': round(converted_amount, 2),
            'target_currency': to_currency,
            'exchange_rate': rates['rates'][to_currency],
            'conversion_date': rates['date']
        }

# ========================================
# üë• –†–ê–ë–û–¢–ê –° JSONPLACEHOLDER API
# ========================================

class JSONPlaceholderAPI:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å JSONPlaceholder API (—Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ)"""
    
    def __init__(self):
        self.base_url = "https://jsonplaceholder.typicode.com"
    
    def get_users(self) -> pd.DataFrame:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        
        url = f"{self.base_url}/users"
        
        try:
            response = requests.get(url, timeout=10)
            response.raise_for_status()
            
            users_data = response.json()
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è
            processed_users = []
            for user in users_data:
                processed_users.append({
                    'id': user['id'],
                    'name': user['name'],
                    'username': user['username'],
                    'email': user['email'],
                    'city': user['address']['city'],
                    'zipcode': user['address']['zipcode'],
                    'lat': float(user['address']['geo']['lat']),
                    'lng': float(user['address']['geo']['lng']),
                    'phone': user['phone'],
                    'website': user['website'],
                    'company_name': user['company']['name']
                })
            
            return pd.DataFrame(processed_users)
            
        except requests.exceptions.RequestException as e:
            raise ValueError(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
    
    def get_posts(self) -> pd.DataFrame:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ—Å—Ç–æ–≤"""
        
        url = f"{self.base_url}/posts"
        
        try:
            response = requests.get(url, timeout=10)
            response.raise_for_status()
            
            posts_data = response.json()
            posts_df = pd.DataFrame(posts_data)
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            posts_df['title_length'] = posts_df['title'].str.len()
            posts_df['body_length'] = posts_df['body'].str.len()
            
            return posts_df
            
        except requests.exceptions.RequestException as e:
            raise ValueError(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å—Ç–æ–≤: {e}")
    
    def analyze_user_activity(self) -> pd.DataFrame:
        """–ê–Ω–∞–ª–∏–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        
        users_df = self.get_users()
        posts_df = self.get_posts()
        
        # –ê–Ω–∞–ª–∏–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        activity_stats = posts_df.groupby('userId').agg({
            'id': 'count',
            'title_length': 'mean',
            'body_length': 'mean'
        }).round(2)
        
        activity_stats.columns = ['posts_count', 'avg_title_length', 'avg_body_length']
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        result = users_df.merge(
            activity_stats, 
            left_on='id', 
            right_index=True, 
            how='left'
        )
        
        # –ó–∞–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–ø—É—Å–∫–∏ –Ω—É–ª—è–º–∏
        result[['posts_count', 'avg_title_length', 'avg_body_length']] = \
            result[['posts_count', 'avg_title_length', 'avg_body_length']].fillna(0)
        
        return result.sort_values('posts_count', ascending=False)

# ========================================
# üîß –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ô API –ö–õ–ò–ï–ù–¢
# ========================================

class UniversalAPIClient:
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ª—é–±—ã–º–∏ REST API"""
    
    def __init__(self, base_url: str, api_key: Optional[str] = None, 
                 auth_type: str = 'bearer', timeout: int = 30):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞
        
        Args:
            base_url: –ë–∞–∑–æ–≤—ã–π URL API
            api_key: API –∫–ª—é—á –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
            auth_type: –¢–∏–ø –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ ('bearer', 'api_key', 'query')
            timeout: –¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        """
        
        self.base_url = base_url.rstrip('/')
        self.api_key = api_key
        self.timeout = timeout
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–µ—Å—Å–∏—é
        self.session = requests.Session()
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
        if api_key:
            if auth_type == 'bearer':
                self.session.headers['Authorization'] = f'Bearer {api_key}'
            elif auth_type == 'api_key':
                self.session.headers['X-API-Key'] = api_key
            elif auth_type == 'query':
                self.default_params = {'api_key': api_key}
                
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—â–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
        self.session.headers.update({
            'User-Agent': 'Python-Analytics-Client/1.0',
            'Accept': 'application/json',
            'Content-Type': 'application/json'
        })
    
    def make_request(self, method: str, endpoint: str, 
                    params: Optional[Dict] = None, 
                    data: Optional[Dict] = None,
                    max_retries: int = 3) -> Dict:
        """
        –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è API –∑–∞–ø—Ä–æ—Å–æ–≤ —Å retry –ª–æ–≥–∏–∫–æ–π
        
        Args:
            method: HTTP –º–µ—Ç–æ–¥ ('GET', 'POST', 'PUT', 'DELETE')
            endpoint: API endpoint
            params: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
            data: –î–∞–Ω–Ω—ã–µ –¥–ª—è POST/PUT –∑–∞–ø—Ä–æ—Å–æ–≤
            max_retries: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–æ–≤
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –æ—Ç–≤–µ—Ç–æ–º API
        """
        
        url = f"{self.base_url}/{endpoint.lstrip('/')}"
        
        # –î–æ–±–∞–≤–ª—è–µ–º API –∫–ª—é—á –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if hasattr(self, 'default_params'):
            params = {**(params or {}), **self.default_params}
        
        last_exception = None
        
        for attempt in range(max_retries):
            try:
                response = self.session.request(
                    method=method,
                    url=url,
                    params=params,
                    json=data,
                    timeout=self.timeout
                )
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–¥—ã
                if response.status_code == 200:
                    return response.json()
                elif response.status_code == 401:
                    raise ValueError("üîê –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ API –∫–ª—é—á")
                elif response.status_code == 404:
                    raise ValueError("üîç –†–µ—Å—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                elif response.status_code == 429:
                    retry_after = int(response.headers.get('Retry-After', 60))
                    if attempt < max_retries - 1:
                        print(f"‚è≥ Rate limit. –ñ–¥–µ–º {retry_after} —Å–µ–∫...")
                        time.sleep(retry_after)
                        continue
                    else:
                        raise ValueError("üö´ –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ API")
                elif response.status_code >= 500:
                    if attempt < max_retries - 1:
                        wait_time = 2 ** attempt  # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
                        print(f"üîß –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –ñ–¥–µ–º {wait_time} —Å–µ–∫...")
                        time.sleep(wait_time)
                        continue
                    else:
                        raise ValueError(f"üî• –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {response.status_code}")
                else:
                    response.raise_for_status()
                    
            except requests.exceptions.Timeout:
                last_exception = f"‚è∞ –¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞ (>{self.timeout}s)"
                if attempt < max_retries - 1:
                    print(f"{last_exception}. –ü–æ–≤—Ç–æ—Ä...")
                    time.sleep(2)
                    
            except requests.exceptions.RequestException as e:
                last_exception = f"üåê –û—à–∏–±–∫–∞ —Å–µ—Ç–∏: {e}"
                if attempt < max_retries - 1:
                    print(f"{last_exception}. –ü–æ–≤—Ç–æ—Ä...")
                    time.sleep(2)
        
        raise Exception(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –ø–æ—Å–ª–µ {max_retries} –ø–æ–ø—ã—Ç–æ–∫. "
                       f"–ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞: {last_exception}")
    
    def get(self, endpoint: str, params: Optional[Dict] = None) -> Dict:
        """GET –∑–∞–ø—Ä–æ—Å"""
        return self.make_request('GET', endpoint, params=params)
    
    def post(self, endpoint: str, data: Optional[Dict] = None) -> Dict:
        """POST –∑–∞–ø—Ä–æ—Å"""
        return self.make_request('POST', endpoint, data=data)
    
    def put(self, endpoint: str, data: Optional[Dict] = None) -> Dict:
        """PUT –∑–∞–ø—Ä–æ—Å"""
        return self.make_request('PUT', endpoint, data=data)
    
    def delete(self, endpoint: str) -> Dict:
        """DELETE –∑–∞–ø—Ä–æ—Å"""
        return self.make_request('DELETE', endpoint)

# ========================================
# üìä –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–û–ù–ù–´–ï –ü–†–ò–ú–ï–†–´
# ========================================

def demo_weather_api():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–≥–æ–¥–Ω—ã–º API"""
    
    print("\nüå§Ô∏è –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø WEATHER API")
    print("-" * 40)
    
    # –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    api_key = os.getenv('WEATHER_API_KEY')
    
    if not api_key:
        print("‚ö†Ô∏è API –∫–ª—é—á –¥–ª—è OpenWeatherMap –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        print("üí° –°–æ–∑–¥–∞–π—Ç–µ .env —Ñ–∞–π–ª –∏ –¥–æ–±–∞–≤—å—Ç–µ: WEATHER_API_KEY=your_key_here")
        return
    
    try:
        weather = WeatherAPI(api_key)
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–≥–æ–¥—É –¥–ª—è –æ–¥–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞
        print("üìç –ü–æ–ª—É—á–∞–µ–º –ø–æ–≥–æ–¥—É –¥–ª—è –ú–æ—Å–∫–≤—ã...")
        moscow_weather = weather.get_current_weather("Moscow")
        print(f"‚úÖ –ú–æ—Å–∫–≤–∞: {moscow_weather['temperature']}¬∞C, {moscow_weather['description']}")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–≥–æ–¥—É –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –≥–æ—Ä–æ–¥–æ–≤
        print("\nüìç –ü–æ–ª—É—á–∞–µ–º –ø–æ–≥–æ–¥—É –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –≥–æ—Ä–æ–¥–æ–≤...")
        cities = ["Moscow", "Saint Petersburg", "Novosibirsk", "London", "New York"]
        weather_df = weather.get_multiple_cities(cities)
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
        if not weather_df.empty and 'temperature' in weather_df.columns:
            valid_data = weather_df.dropna(subset=['temperature'])
            if not valid_data.empty:
                print(f"\nüìä –ê–ù–ê–õ–ò–ó –ü–û–ì–û–î–´:")
                print(f"   üå°Ô∏è  –°–∞–º—ã–π —Ç–µ–ø–ª—ã–π –≥–æ—Ä–æ–¥: {valid_data.loc[valid_data['temperature'].idxmax(), 'city']} "
                      f"({valid_data['temperature'].max()}¬∞C)")
                print(f"   üßä –°–∞–º—ã–π —Ö–æ–ª–æ–¥–Ω—ã–π –≥–æ—Ä–æ–¥: {valid_data.loc[valid_data['temperature'].idxmin(), 'city']} "
                      f"({valid_data['temperature'].min()}¬∞C)")
                print(f"   üìä –°—Ä–µ–¥–Ω—è—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {valid_data['temperature'].mean():.1f}¬∞C")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ Weather API: {e}")

def demo_currency_api():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã —Å –≤–∞–ª—é—Ç–Ω—ã–º API"""
    
    print("\nüí± –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø CURRENCY API")
    print("-" * 40)
    
    try:
        currency = CurrencyAPI()
        
        # –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å—ã –æ—Å–Ω–æ–≤–Ω—ã—Ö –≤–∞–ª—é—Ç –∫ –¥–æ–ª–ª–∞—Ä—É
        print("üí∞ –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç –∫ USD...")
        target_currencies = ['RUB', 'EUR', 'GBP', 'JPY', 'CNY']
        rates_df = currency.get_specific_rates('USD', target_currencies)
        
        print("üìä –¢–ï–ö–£–©–ò–ï –ö–£–†–°–´:")
        for _, row in rates_df.iterrows():
            print(f"   üí∏ 1 USD = {row['rate']:.4f} {row['currency']}")
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤–∞–ª—é—Ç
        print("\nüîÑ –ü—Ä–∏–º–µ—Ä—ã –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏:")
        conversions = [
            (100, 'USD', 'RUB'),
            (1000, 'EUR', 'USD'),
            (50000, 'RUB', 'EUR')
        ]
        
        for amount, from_curr, to_curr in conversions:
            try:
                conversion = currency.calculate_conversion(amount, from_curr, to_curr)
                print(f"   üí± {conversion['original_amount']} {conversion['original_currency']} = "
                      f"{conversion['converted_amount']} {conversion['target_currency']}")
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ {from_curr}‚Üí{to_curr}: {e}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ Currency API: {e}")

def demo_jsonplaceholder_api():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã —Å JSONPlaceholder API"""
    
    print("\nüë• –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø JSONPLACEHOLDER API")
    print("-" * 40)
    
    try:
        api = JSONPlaceholderAPI()
        
        # –ü–æ–ª—É—á–∞–µ–º –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        print("üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
        activity_df = api.analyze_user_activity()
        
        print("üèÜ –¢–û–ü-5 –°–ê–ú–´–• –ê–ö–¢–ò–í–ù–´–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô:")
        top_users = activity_df.head()
        for _, user in top_users.iterrows():
            print(f"   üë§ {user['name']} (@{user['username']}): "
                  f"{user['posts_count']} –ø–æ—Å—Ç–æ–≤")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        print(f"\nüìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"   üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(activity_df)}")
        print(f"   üìù –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤: {activity_df['posts_count'].sum()}")
        print(f"   üìä –°—Ä–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {activity_df['posts_count'].mean():.1f} –ø–æ—Å—Ç–æ–≤/–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
        print(f"   üìè –°—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞ –ø–æ—Å—Ç–∞: {activity_df['avg_body_length'].mean():.0f} —Å–∏–º–≤–æ–ª–æ–≤")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ JSONPlaceholder API: {e}")

def demo_universal_client():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ API –∫–ª–∏–µ–Ω—Ç–∞"""
    
    print("\nüîß –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–û–ì–û –ö–õ–ò–ï–ù–¢–ê")
    print("-" * 40)
    
    try:
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç –¥–ª—è JSONPlaceholder API
        client = UniversalAPIClient("https://jsonplaceholder.typicode.com")
        
        print("üìä –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∫–ª–∏–µ–Ω—Ç...")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users = client.get("users")
        print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å—Ç—ã
        posts = client.get("posts")
        print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –ø–æ—Å—Ç–æ–≤: {len(posts)}")
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        comments = client.get("comments", params={"postId": 1})
        print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –¥–ª—è –ø–æ—Å—Ç–∞ 1: {len(comments)}")
        
        print("üéâ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∫–ª–∏–µ–Ω—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ Universal Client: {e}")

# ========================================
# üöÄ –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø
# ========================================

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–π"""
    
    print("üé¨ –ó–ê–ü–£–°–ö –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–ô API EXAMPLES")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ .env —Ñ–∞–π–ª–∞
    if not os.path.exists('.env'):
        print("‚ö†Ô∏è –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        print("üí° –°–æ–∑–¥–∞–π—Ç–µ .env —Ñ–∞–π–ª –ø–æ –æ–±—Ä–∞–∑—Ü—É .env.example –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API –∫–ª—é—á–∞–º–∏")
        print()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    demo_weather_api()
    demo_currency_api()
    demo_jsonplaceholder_api() 
    demo_universal_client()
    
    print("\n" + "=" * 60)
    print("üéâ –í–°–ï –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–ò –ó–ê–í–ï–†–®–ï–ù–´!")
    print("üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–ª–∞—Å—Å—ã –∏–∑ —ç—Ç–æ–≥–æ —Ñ–∞–π–ª–∞ –≤ –≤–∞—à–∏—Ö –ø—Ä–æ–µ–∫—Ç–∞—Ö")
    print("üìñ –ü–æ–¥—Ä–æ–±–Ω–µ–µ –≤ practice.md –∏ README.md")
    print("=" * 60)

if __name__ == "__main__":
    main()