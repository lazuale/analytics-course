import sqlite3
import pandas as pd
import numpy as np
from datetime import datetime, timedelta
import random

class DatabasePerformanceTester:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å –∏–Ω–¥–µ–∫—Å–∞–º–∏"""
    
    def __init__(self, db_path='university_database.db'):
        self.db_path = db_path
        self.conn = sqlite3.connect(db_path)
        self.conn.execute("PRAGMA foreign_keys = ON")
        
    def create_large_dataset(self, students_count=10000, enrollments_per_student=8):
        """–°–æ–∑–¥–∞–Ω–∏–µ –±–æ–ª—å—à–æ–≥–æ –Ω–∞–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        print(f"üèóÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –Ω–∞–±–æ—Ä–∞ –∏–∑ {students_count} —Å—Ç—É–¥–µ–Ω—Ç–æ–≤...")
        
        cursor = self.conn.cursor()
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
        first_names = ['–ê–ª–µ–∫—Å–∞–Ω–¥—Ä', '–ú–∞—Ä–∏—è', '–î–º–∏—Ç—Ä–∏–π', '–ê–Ω–Ω–∞', '–ú–∞–∫—Å–∏–º', '–ï–ª–µ–Ω–∞', '–ê—Ä—Ç–µ–º', '–û–ª—å–≥–∞', '–ù–∏–∫–∏—Ç–∞', '–ï–∫–∞—Ç–µ—Ä–∏–Ω–∞'] * 100
        last_names = ['–ò–≤–∞–Ω–æ–≤', '–ü–µ—Ç—Ä–æ–≤', '–°–∏–¥–æ—Ä–æ–≤', '–ö–æ–∑–ª–æ–≤', '–ú–æ—Ä–æ–∑–æ–≤', '–ù–æ–≤–∏–∫–æ–≤', '–§–µ–¥–æ—Ä–æ–≤', '–û—Ä–ª–æ–≤', '–ü–æ–ø–æ–≤', '–°–æ–∫–æ–ª–æ–≤'] * 100
        
        students_data = []
        for i in range(students_count):
            student_id = 10000 + i
            first_name = random.choice(first_names)
            last_name = random.choice(last_names)
            email = f"{first_name.lower()}.{last_name.lower()}{i}@test.university.edu"
            birth_date = datetime(1990, 1, 1) + timedelta(days=random.randint(0, 4000))
            enrollment_date = datetime(2018, 9, 1) + timedelta(days=random.randint(0, 1800))
            gpa = round(random.uniform(2.0, 4.0), 2)
            
            students_data.append((
                student_id, first_name, last_name, email, 
                f"+7-9{random.randint(10,99)}-{random.randint(100,999)}-{random.randint(10,99)}-{random.randint(10,99)}",
                birth_date.strftime('%Y-%m-%d'), enrollment_date.strftime('%Y-%m-%d'),
                'active', gpa, 0
            ))
        
        # –ú–∞—Å—Å–æ–≤–∞—è –≤—Å—Ç–∞–≤–∫–∞ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
        cursor.executemany("""
            INSERT INTO students 
            (student_id, first_name, last_name, email, phone, birth_date, enrollment_date, status, gpa, total_credits)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
        """, students_data)
        
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(students_data)} —Å—Ç—É–¥–µ–Ω—Ç–æ–≤")
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–ø–∏—Å–µ–π –Ω–∞ –∫—É—Ä—Å—ã
        cursor.execute("SELECT course_id, professor_id FROM courses")
        courses = cursor.fetchall()
        
        semesters = ['Fall', 'Spring']
        years = [2020, 2021, 2022, 2023, 2024]
        grades = ['A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D', 'F']
        grade_points = {'A': 4.0, 'A-': 3.7, 'B+': 3.3, 'B': 3.0, 'B-': 2.7, 'C+': 2.3, 'C': 2.0, 'C-': 1.7, 'D': 1.0, 'F': 0.0}
        
        enrollments_data = []
        enrollment_id = 100000
        
        for student in students_data:
            student_id = student[0]
            courses_taken = random.sample(courses, min(enrollments_per_student, len(courses)))
            
            for course_id, professor_id in courses_taken:
                semester = random.choice(semesters)
                year = random.choice(years)
                grade = random.choice(grades)
                enrollment_date = datetime(year, 1 if semester == 'Spring' else 9, random.randint(1, 15))
                
                enrollments_data.append((
                    enrollment_id, student_id, course_id, professor_id,
                    semester, year, enrollment_date.strftime('%Y-%m-%d'),
                    grade, grade_points[grade], 1
                ))
                enrollment_id += 1
        
        # –ú–∞—Å—Å–æ–≤–∞—è –≤—Å—Ç–∞–≤–∫–∞ –∑–∞–ø–∏—Å–µ–π –Ω–∞ –∫—É—Ä—Å—ã (–ø–æ —á–∞—Å—Ç—è–º –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –æ—à–∏–±–æ–∫ –ø–∞–º—è—Ç–∏)
        chunk_size = 1000
        for i in range(0, len(enrollments_data), chunk_size):
            chunk = enrollments_data[i:i+chunk_size]
            try:
                cursor.executemany("""
                    INSERT OR IGNORE INTO enrollments 
                    (enrollment_id, student_id, course_id, professor_id, semester, year, enrollment_date, letter_grade, grade_points, is_completed)
                    VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                """, chunk)
            except sqlite3.IntegrityError:
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
                pass
        
        self.conn.commit()
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ –∑–∞–ø–∏—Å–µ–π –Ω–∞ –∫—É—Ä—Å—ã")
        
    def run_performance_tests(self):
        """–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        print("\nüöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...")
        
        cursor = self.conn.cursor()
        
        # –í–∫–ª—é—á–∞–µ–º –∏–∑–º–µ—Ä–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
        cursor.execute("PRAGMA timer = ON")
        
        test_queries = [
            {
                'name': '–ü–æ–∏—Å–∫ —Å—Ç—É–¥–µ–Ω—Ç–∞ –ø–æ —Ñ–∞–º–∏–ª–∏–∏',
                'query': "SELECT * FROM students WHERE last_name = '–ò–≤–∞–Ω–æ–≤'",
                'index': "CREATE INDEX IF NOT EXISTS idx_student_lastname ON students(last_name)"
            },
            {
                'name': '–°–ø–∏—Å–æ–∫ –∫—É—Ä—Å–æ–≤ —Å—Ç—É–¥–µ–Ω—Ç–∞',
                'query': """
                    SELECT s.first_name, s.last_name, c.course_name, e.letter_grade
                    FROM students s
                    JOIN enrollments e ON s.student_id = e.student_id
                    JOIN courses c ON e.course_id = c.course_id
                    WHERE s.student_id = 10500
                """,
                'index': "CREATE INDEX IF NOT EXISTS idx_enrollment_student_course ON enrollments(student_id, course_id)"
            },
            {
                'name': '–°—Ä–µ–¥–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏ –ø–æ –∫—É—Ä—Å–∞–º',
                'query': """
                    SELECT c.course_name, AVG(e.grade_points) as avg_grade, COUNT(*) as students
                    FROM courses c
                    JOIN enrollments e ON c.course_id = e.course_id
                    WHERE e.semester = 'Fall' AND e.year = 2023
                    GROUP BY c.course_name
                    ORDER BY avg_grade DESC
                """,
                'index': "CREATE INDEX IF NOT EXISTS idx_enrollment_semester_year_grade ON enrollments(semester, year, grade_points)"
            },
            {
                'name': '–¢–æ–ø —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –ø–æ GPA',
                'query': """
                    SELECT first_name, last_name, gpa
                    FROM students
                    WHERE status = 'active' AND gpa >= 3.5
                    ORDER BY gpa DESC
                    LIMIT 100
                """,
                'index': "CREATE INDEX IF NOT EXISTS idx_student_status_gpa ON students(status, gpa)"
            },
            {
                'name': '–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π',
                'query': """
                    SELECT p.first_name, p.last_name, COUNT(DISTINCT e.student_id) as students_count
                    FROM professors p
                    JOIN enrollments e ON p.professor_id = e.professor_id
                    WHERE e.year = 2024
                    GROUP BY p.professor_id, p.first_name, p.last_name
                    HAVING students_count > 50
                    ORDER BY students_count DESC
                """,
                'index': "CREATE INDEX IF NOT EXISTS idx_enrollment_prof_year ON enrollments(professor_id, year)"
            }
        ]
        
        results = []
        
        for test in test_queries:
            print(f"\nüìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: {test['name']}")
            
            # –¢–µ—Å—Ç –±–µ–∑ –∏–Ω–¥–µ–∫—Å–∞ (—É–¥–∞–ª—è–µ–º –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
            cursor.execute("DROP INDEX IF EXISTS " + test['index'].split()[-1])
            
            start_time = datetime.now()
            cursor.execute("EXPLAIN QUERY PLAN " + test['query'])
            plan_before = cursor.fetchall()
            
            cursor.execute(test['query'])
            rows_before = len(cursor.fetchall())
            end_time = datetime.now()
            time_before = (end_time - start_time).total_seconds()
            
            print(f"   –ë–µ–∑ –∏–Ω–¥–µ–∫—Å–∞: {time_before:.4f} —Å–µ–∫, {rows_before} —Å—Ç—Ä–æ–∫")
            
            # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å
            cursor.execute(test['index'])
            
            # –¢–µ—Å—Ç —Å –∏–Ω–¥–µ–∫—Å–æ–º
            start_time = datetime.now()
            cursor.execute("EXPLAIN QUERY PLAN " + test['query'])
            plan_after = cursor.fetchall()
            
            cursor.execute(test['query'])
            rows_after = len(cursor.fetchall())
            end_time = datetime.now()
            time_after = (end_time - start_time).total_seconds()
            
            print(f"   –° –∏–Ω–¥–µ–∫—Å–æ–º:  {time_after:.4f} —Å–µ–∫, {rows_after} —Å—Ç—Ä–æ–∫")
            
            improvement = ((time_before - time_after) / time_before * 100) if time_before > 0 else 0
            print(f"   –£–ª—É—á—à–µ–Ω–∏–µ:   {improvement:.1f}%")
            
            results.append({
                'test': test['name'],
                'time_before': time_before,
                'time_after': time_after,
                'improvement': improvement,
                'rows': rows_after
            })
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        results_df = pd.DataFrame(results)
        results_df.to_csv('performance_test_results.csv', index=False, sep=';')
        
        return results_df
    
    def analyze_index_usage(self):
        """–ê–Ω–∞–ª–∏–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏–Ω–¥–µ–∫—Å–æ–≤"""
        print("\nüîç –ê–Ω–∞–ª–∏–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏–Ω–¥–µ–∫—Å–æ–≤...")
        
        cursor = self.conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∏–Ω–¥–µ–∫—Å–æ–≤
        cursor.execute("""
            SELECT name, sql 
            FROM sqlite_master 
            WHERE type = 'index' 
            AND name NOT LIKE 'sqlite_autoindex%'
        """)
        
        indexes = cursor.fetchall()
        
        print(f"\nüìã –ù–∞–π–¥–µ–Ω–æ –∏–Ω–¥–µ–∫—Å–æ–≤: {len(indexes)}")
        for name, sql in indexes:
            print(f"   ‚Ä¢ {name}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–∞–±–ª–∏—Ü
        cursor.execute("""
            SELECT 
                name,
                (SELECT COUNT(*) FROM sqlite_master WHERE type='index' AND tbl_name=m.name) as index_count
            FROM sqlite_master m
            WHERE type = 'table'
            AND name NOT LIKE 'sqlite_%'
        """)
        
        table_stats = cursor.fetchall()
        
        print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–Ω–¥–µ–∫—Å–æ–≤ –ø–æ —Ç–∞–±–ª–∏—Ü–∞–º:")
        for table, idx_count in table_stats:
            cursor.execute(f"SELECT COUNT(*) FROM {table}")
            row_count = cursor.fetchone()[0]
            print(f"   {table}: {row_count:,} —Å—Ç—Ä–æ–∫, {idx_count} –∏–Ω–¥–µ–∫—Å–æ–≤")
    
    def generate_recommendations(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
        print("\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏:")
        
        cursor = self.conn.cursor()
        
        # –ê–Ω–∞–ª–∏–∑ –±–æ–ª—å—à–∏—Ö —Ç–∞–±–ª–∏—Ü –±–µ–∑ –∏–Ω–¥–µ–∫—Å–æ–≤
        cursor.execute("""
            SELECT name
            FROM sqlite_master 
            WHERE type = 'table' 
            AND name NOT LIKE 'sqlite_%'
        """)
        
        tables = cursor.fetchall()
        
        for (table,) in tables:
            cursor.execute(f"SELECT COUNT(*) FROM {table}")
            row_count = cursor.fetchone()[0]
            
            cursor.execute(f"""
                SELECT COUNT(*) 
                FROM sqlite_master 
                WHERE type = 'index' 
                AND tbl_name = '{table}'
                AND name NOT LIKE 'sqlite_autoindex%'
            """)
            index_count = cursor.fetchone()[0]
            
            if row_count > 1000 and index_count < 2:
                print(f"   ‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ {table} ({row_count:,} —Å—Ç—Ä–æ–∫) –∏–º–µ–µ—Ç –º–∞–ª–æ –∏–Ω–¥–µ–∫—Å–æ–≤ ({index_count})")
        
        print(f"\n‚úÖ –û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        print(f"   ‚Ä¢ –°–æ–∑–¥–∞–≤–∞–π—Ç–µ –∏–Ω–¥–µ–∫—Å—ã –Ω–∞ —Å—Ç–æ–ª–±—Ü—ã –≤ WHERE —É—Å–ª–æ–≤–∏—è—Ö")
        print(f"   ‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–æ—Å—Ç–∞–≤–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –∫–æ–º–±–∏–Ω–∞—Ü–∏–π")
        print(f"   ‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä—å—Ç–µ —Ä–∞–∑–º–µ—Ä –∏–Ω–¥–µ–∫—Å–æ–≤ vs —É–ª—É—á—à–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
        print(f"   ‚Ä¢ –†–µ–≥—É–ª—è—Ä–Ω–æ –æ–±–Ω–æ–≤–ª—è–π—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É: ANALYZE")
    
    def cleanup_test_data(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        print("\nüßπ –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
        
        cursor = self.conn.cursor()
        cursor.execute("DELETE FROM enrollments WHERE enrollment_id >= 100000")
        cursor.execute("DELETE FROM students WHERE student_id >= 10000")
        self.conn.commit()
        
        print("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã")
    
    def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        self.conn.close()

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    print("‚ö° –°–ò–°–¢–ï–ú–ê –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò –ë–î")
    print("="*60)
    
    tester = DatabasePerformanceTester()
    
    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ –±–æ–ª—å—à–æ–≥–æ –Ω–∞–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
        tester.create_large_dataset(students_count=5000, enrollments_per_student=6)
        
        # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        results = tester.run_performance_tests()
        
        # –ê–Ω–∞–ª–∏–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏–Ω–¥–µ–∫—Å–æ–≤
        tester.analyze_index_usage()
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        tester.generate_recommendations()
        
        # –í—ã–≤–æ–¥ –∏—Ç–æ–≥–æ–≤—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        print(f"\nüìä –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
        print("="*50)
        avg_improvement = results['improvement'].mean()
        best_improvement = results.loc[results['improvement'].idxmax()]
        
        print(f"–°—Ä–µ–¥–Ω–µ–µ —É–ª—É—á—à–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {avg_improvement:.1f}%")
        print(f"–õ—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {best_improvement['test']} - {best_improvement['improvement']:.1f}%")
        
        # –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        response = input("\n–£–¥–∞–ª–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ? (y/n): ")
        if response.lower() == 'y':
            tester.cleanup_test_data()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        import traceback
        traceback.print_exc()
    
    finally:
        tester.close()

if __name__ == "__main__":
    main()