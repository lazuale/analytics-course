"""
üóÑÔ∏è –ü—Ä–∏–º–µ—Ä —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö SQLite –∏–∑ Python
–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é Pandas –∏ SQL
"""

import sqlite3
import pandas as pd

def connect_to_database(db_path):
    """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    try:
        conn = sqlite3.connect(db_path)
        print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î: {db_path}")
        return conn
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        return None

def explore_database(conn):
    """–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    print("\nüîç –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:")

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü
    tables_query = "SELECT name FROM sqlite_master WHERE type='table';"
    tables = pd.read_sql_query(tables_query, conn)

    print("üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã:")
    for table in tables['name']:
        print(f"   üìä {table}")

        # –°—á–∏—Ç–∞–µ–º –∑–∞–ø–∏—Å–∏ –≤ –∫–∞–∂–¥–æ–π —Ç–∞–±–ª–∏—Ü–µ
        count_query = f"SELECT COUNT(*) as count FROM {table};"
        count = pd.read_sql_query(count_query, conn)
        print(f"      –ó–∞–ø–∏—Å–µ–π: {count['count'].iloc[0]:,}")

def load_customers_analysis(conn):
    """–ê–Ω–∞–ª–∏–∑ –∫–ª–∏–µ–Ω—Ç–æ–≤"""
    print("\nüë• –ê–ù–ê–õ–ò–ó –ö–õ–ò–ï–ù–¢–û–í")
    print("-" * 15)

    query = """
    SELECT 
        customer_name,
        city,
        country,
        customer_segment,
        total_spent
    FROM customers
    ORDER BY total_spent DESC
    LIMIT 5
    """

    df = pd.read_sql_query(query, conn)
    print("üèÜ –¢–æ–ø-5 –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ —Ç—Ä–∞—Ç–∞–º:")
    print(df.to_string(index=False))

    return df

def load_sales_analysis(conn):
    """–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–¥–∞–∂"""
    print("\nüí∞ –ê–ù–ê–õ–ò–ó –ü–†–û–î–ê–ñ")
    print("-" * 13)

    query = """
    SELECT 
        c.customer_name,
        o.order_date,
        o.total_amount,
        o.status
    FROM orders o
    JOIN customers c ON o.customer_id = c.customer_id
    WHERE o.status = 'Completed'
    ORDER BY o.total_amount DESC
    LIMIT 5
    """

    df = pd.read_sql_query(query, conn)
    print("üíé –¢–æ–ø-5 –∑–∞–∫–∞–∑–æ–≤:")
    print(df.to_string(index=False))

    return df

def create_summary_report(conn):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Å–≤–æ–¥–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
    print("\nüìä –°–í–û–î–ù–´–ô –û–¢–ß–ï–¢")
    print("-" * 13)

    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    summary_query = """
    SELECT 
        COUNT(DISTINCT c.customer_id) as total_customers,
        COUNT(o.order_id) as total_orders,
        SUM(o.total_amount) as total_revenue,
        AVG(o.total_amount) as avg_order_value
    FROM customers c
    LEFT JOIN orders o ON c.customer_id = o.customer_id
    WHERE o.status = 'Completed'
    """

    summary = pd.read_sql_query(summary_query, conn)

    print("üìà –ö–ª—é—á–µ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:")
    print(f"   üë• –í—Å–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–æ–≤: {summary['total_customers'].iloc[0]:,}")
    print(f"   üõí –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: {summary['total_orders'].iloc[0]:,}")
    print(f"   üí∞ –û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞: ${summary['total_revenue'].iloc[0]:,.2f}")
    print(f"   üí≥ –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: ${summary['avg_order_value'].iloc[0]:,.2f}")

def save_results_to_database(conn, df, table_name):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞ –æ–±—Ä–∞—Ç–Ω–æ –≤ –ë–î"""
    print(f"\nüíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ç–∞–±–ª–∏—Ü—É: {table_name}")

    try:
        df.to_sql(table_name, conn, if_exists='replace', index=False)
        print(f"   ‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {table_name}")
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    """–û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å –∞–Ω–∞–ª–∏–∑–∞"""
    print("üóÑÔ∏è Pandas + SQL = –°—É–ø–µ—Ä—Å–∏–ª–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞!")
    print("=" * 40)

    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ë–î
    conn = connect_to_database('sample_database.db')
    if not conn:
        return

    try:
        # –ò—Å—Å–ª–µ–¥—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        explore_database(conn)

        # –ü—Ä–æ–≤–æ–¥–∏–º –∞–Ω–∞–ª–∏–∑—ã
        customers_df = load_customers_analysis(conn)
        sales_df = load_sales_analysis(conn)

        # –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç
        create_summary_report(conn)

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –≤ Pandas
        print("\nüêç –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –≤ Pandas:")

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –∑–∞–∫–∞–∑—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        all_orders = pd.read_sql_query("""
            SELECT o.*, c.customer_segment, c.city, c.country
            FROM orders o
            JOIN customers c ON o.customer_id = c.customer_id
            WHERE o.status = 'Completed'
        """, conn)

        # –ê–Ω–∞–ª–∏–∑ –ø–æ —Å–µ–≥–º–µ–Ω—Ç–∞–º
        segment_analysis = all_orders.groupby('customer_segment').agg({
            'total_amount': ['sum', 'mean', 'count']
        }).round(2)

        print("üìä –ê–Ω–∞–ª–∏–∑ –ø–æ —Å–µ–≥–º–µ–Ω—Ç–∞–º –∫–ª–∏–µ–Ω—Ç–æ–≤:")
        print(segment_analysis)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞—Ç–Ω–æ –≤ –ë–î
        save_results_to_database(conn, segment_analysis.reset_index(), 'segment_analysis')

    finally:
        conn.close()
        print("\nüîí –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î –∑–∞–∫—Ä—ã—Ç–æ")

    print("\n‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω! SQL + Pandas = üí™")

if __name__ == "__main__":
    main()
